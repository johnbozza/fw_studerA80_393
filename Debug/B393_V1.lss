
B393_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001308  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800136  00800136  000013d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001470  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001765  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdc  00000000  00000000  00002d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee4  00000000  00000000  00003929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00004810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000725  00000000  00000000  00004c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a72  00000000  00000000  000053c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_1>
       8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_2>
       c:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_3>
      10:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_4>
      14:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e0       	ldi	r30, 0x08	; 8
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 33       	cpi	r26, 0x36	; 54
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a6 e3       	ldi	r26, 0x36	; 54
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 36       	cpi	r26, 0x62	; 98
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
      9e:	0c 94 82 09 	jmp	0x1304	; 0x1304 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gpio_send_str>:
// 	spi_gpio(YBI_CLK,	Circ->signal_output[CLK_OUT]);
 	
}

void gpio_do_encoder()
{
      a6:	ac 01       	movw	r20, r24
      a8:	20 e0       	ldi	r18, 0x00	; 0
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	0e c0       	rjmp	.+28     	; 0xca <gpio_send_str+0x24>
      ae:	fa 01       	movw	r30, r20
      b0:	e2 0f       	add	r30, r18
      b2:	f3 1f       	adc	r31, r19
      b4:	90 81       	ld	r25, Z
      b6:	99 23       	and	r25, r25
      b8:	59 f0       	breq	.+22     	; 0xd0 <gpio_send_str+0x2a>
      ba:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      c2:	95 ff       	sbrs	r25, 5
      c4:	fc cf       	rjmp	.-8      	; 0xbe <gpio_send_str+0x18>
      c6:	2f 5f       	subi	r18, 0xFF	; 255
      c8:	3f 4f       	sbci	r19, 0xFF	; 255
      ca:	28 32       	cpi	r18, 0x28	; 40
      cc:	31 05       	cpc	r19, r1
      ce:	7c f3       	brlt	.-34     	; 0xae <gpio_send_str+0x8>
      d0:	08 95       	ret

000000d2 <gpio_do_uart_rx>:
      d2:	bf 92       	push	r11
      d4:	cf 92       	push	r12
      d6:	df 92       	push	r13
      d8:	ef 92       	push	r14
      da:	ff 92       	push	r15
      dc:	0f 93       	push	r16
      de:	1f 93       	push	r17
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	a8 97       	sbiw	r28, 0x28	; 40
      ea:	0f b6       	in	r0, 0x3f	; 63
      ec:	f8 94       	cli
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	08 2f       	mov	r16, r24
      f6:	fe 01       	movw	r30, r28
      f8:	31 96       	adiw	r30, 0x01	; 1
      fa:	88 e2       	ldi	r24, 0x28	; 40
      fc:	df 01       	movw	r26, r30
      fe:	1d 92       	st	X+, r1
     100:	8a 95       	dec	r24
     102:	e9 f7       	brne	.-6      	; 0xfe <gpio_do_uart_rx+0x2c>
     104:	80 ed       	ldi	r24, 0xD0	; 208
     106:	80 0f       	add	r24, r16
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	00 f5       	brcc	.+64     	; 0x14c <gpio_do_uart_rx+0x7a>
     10c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     110:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	00 33       	cpi	r16, 0x30	; 48
     118:	09 f4       	brne	.+2      	; 0x11c <gpio_do_uart_rx+0x4a>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	85 8b       	std	Z+21, r24	; 0x15
     11e:	85 89       	ldd	r24, Z+21	; 0x15
     120:	1f 92       	push	r1
     122:	8f 93       	push	r24
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	9f 93       	push	r25
     12a:	8f 93       	push	r24
     12c:	ce 01       	movw	r24, r28
     12e:	01 96       	adiw	r24, 0x01	; 1
     130:	7c 01       	movw	r14, r24
     132:	9f 93       	push	r25
     134:	8f 93       	push	r24
     136:	0e 94 90 06 	call	0xd20	; 0xd20 <sprintf>
     13a:	c7 01       	movw	r24, r14
     13c:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	02 33       	cpi	r16, 0x32	; 50
     14e:	b9 f5       	brne	.+110    	; 0x1be <gpio_do_uart_rx+0xec>
     150:	8a e0       	ldi	r24, 0x0A	; 10
     152:	e1 e1       	ldi	r30, 0x11	; 17
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	de 01       	movw	r26, r28
     158:	11 96       	adiw	r26, 0x01	; 1
     15a:	01 90       	ld	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	8a 95       	dec	r24
     160:	e1 f7       	brne	.-8      	; 0x15a <gpio_do_uart_rx+0x88>
     162:	ce 01       	movw	r24, r28
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	1e c0       	rjmp	.+60     	; 0x1aa <gpio_do_uart_rx+0xd8>
     16e:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     172:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     176:	e1 0f       	add	r30, r17
     178:	f1 1d       	adc	r31, r1
     17a:	81 8d       	ldd	r24, Z+25	; 0x19
     17c:	1f 92       	push	r1
     17e:	8f 93       	push	r24
     180:	8b e1       	ldi	r24, 0x1B	; 27
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9f 93       	push	r25
     186:	8f 93       	push	r24
     188:	de 01       	movw	r26, r28
     18a:	11 96       	adiw	r26, 0x01	; 1
     18c:	7d 01       	movw	r14, r26
     18e:	bf 93       	push	r27
     190:	af 93       	push	r26
     192:	0e 94 90 06 	call	0xd20	; 0xd20 <sprintf>
     196:	c7 01       	movw	r24, r14
     198:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     19c:	1f 5f       	subi	r17, 0xFF	; 255
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	16 30       	cpi	r17, 0x06	; 6
     1ac:	00 f3       	brcs	.-64     	; 0x16e <gpio_do_uart_rx+0x9c>
     1ae:	8a e0       	ldi	r24, 0x0A	; 10
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	9a 83       	std	Y+2, r25	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	ce 01       	movw	r24, r28
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     1be:	03 33       	cpi	r16, 0x33	; 51
     1c0:	59 f5       	brne	.+86     	; 0x218 <gpio_do_uart_rx+0x146>
     1c2:	1f c0       	rjmp	.+62     	; 0x202 <gpio_do_uart_rx+0x130>
     1c4:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     1c8:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     1cc:	e1 0f       	add	r30, r17
     1ce:	f1 1d       	adc	r31, r1
     1d0:	87 85       	ldd	r24, Z+15	; 0x0f
     1d2:	1f 92       	push	r1
     1d4:	8f 93       	push	r24
     1d6:	8b e1       	ldi	r24, 0x1B	; 27
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	9f 93       	push	r25
     1dc:	8f 93       	push	r24
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	7c 01       	movw	r14, r24
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	0e 94 90 06 	call	0xd20	; 0xd20 <sprintf>
     1ec:	c7 01       	movw	r24, r14
     1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     1f2:	1f 5f       	subi	r17, 0xFF	; 255
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	01 c0       	rjmp	.+2      	; 0x204 <gpio_do_uart_rx+0x132>
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	1a 30       	cpi	r17, 0x0A	; 10
     206:	f0 f2       	brcs	.-68     	; 0x1c4 <gpio_do_uart_rx+0xf2>
     208:	8a e0       	ldi	r24, 0x0A	; 10
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	ce 01       	movw	r24, r28
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     218:	04 33       	cpi	r16, 0x34	; 52
     21a:	09 f0       	breq	.+2      	; 0x21e <gpio_do_uart_rx+0x14c>
     21c:	6a c0       	rjmp	.+212    	; 0x2f2 <gpio_do_uart_rx+0x220>
     21e:	8d e0       	ldi	r24, 0x0D	; 13
     220:	ef e1       	ldi	r30, 0x1F	; 31
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	de 01       	movw	r26, r28
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	8a 95       	dec	r24
     22e:	e1 f7       	brne	.-8      	; 0x228 <gpio_do_uart_rx+0x156>
     230:	ce 01       	movw	r24, r28
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     238:	b1 2c       	mov	r11, r1
     23a:	4f c0       	rjmp	.+158    	; 0x2da <gpio_do_uart_rx+0x208>
     23c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     240:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     244:	8b 2d       	mov	r24, r11
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	8c 01       	movw	r16, r24
     24a:	00 0f       	add	r16, r16
     24c:	11 1f       	adc	r17, r17
     24e:	08 0f       	add	r16, r24
     250:	19 1f       	adc	r17, r25
     252:	e0 0f       	add	r30, r16
     254:	f1 1f       	adc	r31, r17
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	1f 92       	push	r1
     25a:	8f 93       	push	r24
     25c:	0f 2e       	mov	r0, r31
     25e:	fc e2       	ldi	r31, 0x2C	; 44
     260:	cf 2e       	mov	r12, r31
     262:	f1 e0       	ldi	r31, 0x01	; 1
     264:	df 2e       	mov	r13, r31
     266:	f0 2d       	mov	r31, r0
     268:	df 92       	push	r13
     26a:	cf 92       	push	r12
     26c:	de 01       	movw	r26, r28
     26e:	11 96       	adiw	r26, 0x01	; 1
     270:	7d 01       	movw	r14, r26
     272:	bf 93       	push	r27
     274:	af 93       	push	r26
     276:	0e 94 90 06 	call	0xd20	; 0xd20 <sprintf>
     27a:	c7 01       	movw	r24, r14
     27c:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     280:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     284:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     288:	e0 0f       	add	r30, r16
     28a:	f1 1f       	adc	r31, r17
     28c:	80 81       	ld	r24, Z
     28e:	1f 92       	push	r1
     290:	8f 93       	push	r24
     292:	df 92       	push	r13
     294:	cf 92       	push	r12
     296:	ff 92       	push	r15
     298:	ef 92       	push	r14
     29a:	0e 94 90 06 	call	0xd20	; 0xd20 <sprintf>
     29e:	c7 01       	movw	r24, r14
     2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     2a4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Circ>
     2a8:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Circ+0x1>
     2ac:	fc 01       	movw	r30, r24
     2ae:	e0 0f       	add	r30, r16
     2b0:	f1 1f       	adc	r31, r17
     2b2:	82 81       	ldd	r24, Z+2	; 0x02
     2b4:	1f 92       	push	r1
     2b6:	8f 93       	push	r24
     2b8:	8f e2       	ldi	r24, 0x2F	; 47
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	ff 92       	push	r15
     2c2:	ef 92       	push	r14
     2c4:	0e 94 90 06 	call	0xd20	; 0xd20 <sprintf>
     2c8:	c7 01       	movw	r24, r14
     2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     2ce:	b3 94       	inc	r11
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	94 e0       	ldi	r25, 0x04	; 4
     2dc:	9b 15       	cp	r25, r11
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <gpio_do_uart_rx+0x210>
     2e0:	ad cf       	rjmp	.-166    	; 0x23c <gpio_do_uart_rx+0x16a>
     2e2:	8a e0       	ldi	r24, 0x0A	; 10
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	9a 83       	std	Y+2, r25	; 0x02
     2e8:	89 83       	std	Y+1, r24	; 0x01
     2ea:	ce 01       	movw	r24, r28
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     2f2:	a8 96       	adiw	r28, 0x28	; 40
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	bf 90       	pop	r11
     310:	08 95       	ret

00000312 <gpio_do_update>:
     312:	0e 94 d5 05 	call	0xbaa	; 0xbaa <circuit_update>
     316:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     31a:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     31e:	83 b1       	in	r24, 0x03	; 3
     320:	81 70       	andi	r24, 0x01	; 1
     322:	87 87       	std	Z+15, r24	; 0x0f
     324:	86 b1       	in	r24, 0x06	; 6
     326:	82 fb       	bst	r24, 2
     328:	88 27       	eor	r24, r24
     32a:	80 f9       	bld	r24, 0
     32c:	80 8b       	std	Z+16, r24	; 0x10
     32e:	89 b1       	in	r24, 0x09	; 9
     330:	86 fb       	bst	r24, 6
     332:	88 27       	eor	r24, r24
     334:	80 f9       	bld	r24, 0
     336:	81 8b       	std	Z+17, r24	; 0x11
     338:	89 b1       	in	r24, 0x09	; 9
     33a:	85 fb       	bst	r24, 5
     33c:	88 27       	eor	r24, r24
     33e:	80 f9       	bld	r24, 0
     340:	82 8b       	std	Z+18, r24	; 0x12
     342:	89 b1       	in	r24, 0x09	; 9
     344:	82 95       	swap	r24
     346:	81 70       	andi	r24, 0x01	; 1
     348:	83 8b       	std	Z+19, r24	; 0x13
     34a:	86 b1       	in	r24, 0x06	; 6
     34c:	83 fb       	bst	r24, 3
     34e:	88 27       	eor	r24, r24
     350:	80 f9       	bld	r24, 0
     352:	84 8b       	std	Z+20, r24	; 0x14
     354:	86 b1       	in	r24, 0x06	; 6
     356:	85 fb       	bst	r24, 5
     358:	88 27       	eor	r24, r24
     35a:	80 f9       	bld	r24, 0
     35c:	86 8b       	std	Z+22, r24	; 0x16
     35e:	86 b1       	in	r24, 0x06	; 6
     360:	82 95       	swap	r24
     362:	81 70       	andi	r24, 0x01	; 1
     364:	87 8b       	std	Z+23, r24	; 0x17
     366:	83 b1       	in	r24, 0x03	; 3
     368:	86 95       	lsr	r24
     36a:	81 70       	andi	r24, 0x01	; 1
     36c:	80 8f       	std	Z+24, r24	; 0x18
     36e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <circuit_update>
     372:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     376:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     37a:	61 8d       	ldd	r22, Z+25	; 0x19
     37c:	83 e1       	ldi	r24, 0x13	; 19
     37e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     382:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     386:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     38a:	62 8d       	ldd	r22, Z+26	; 0x1a
     38c:	82 e1       	ldi	r24, 0x12	; 18
     38e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     392:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     396:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     39a:	63 8d       	ldd	r22, Z+27	; 0x1b
     39c:	81 e1       	ldi	r24, 0x11	; 17
     39e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3a2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     3a6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     3aa:	64 8d       	ldd	r22, Z+28	; 0x1c
     3ac:	84 e1       	ldi	r24, 0x14	; 20
     3ae:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3b2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     3b6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     3ba:	65 8d       	ldd	r22, Z+29	; 0x1d
     3bc:	85 e1       	ldi	r24, 0x15	; 21
     3be:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3c2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     3c6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     3ca:	66 8d       	ldd	r22, Z+30	; 0x1e
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3d2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     3d6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     3da:	67 8d       	ldd	r22, Z+31	; 0x1f
     3dc:	80 e1       	ldi	r24, 0x10	; 16
     3de:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3e2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     3e6:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     3ea:	60 a1       	ldd	r22, Z+32	; 0x20
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     3fa:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     3fe:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     402:	61 a1       	ldd	r22, Z+33	; 0x21
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     40a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     40e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     412:	62 a1       	ldd	r22, Z+34	; 0x22
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     41a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     41e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     422:	63 a1       	ldd	r22, Z+35	; 0x23
     424:	86 e1       	ldi	r24, 0x16	; 22
     426:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     42a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     42e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     432:	64 a1       	ldd	r22, Z+36	; 0x24
     434:	87 e1       	ldi	r24, 0x17	; 23
     436:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     43a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     43e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     442:	65 a1       	ldd	r22, Z+37	; 0x25
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     44a:	08 95       	ret

0000044c <gpio_init>:
     44c:	f8 94       	cli
     44e:	0e 94 ac 05 	call	0xb58	; 0xb58 <circuit_init>
     452:	0e 94 a9 05 	call	0xb52	; 0xb52 <circuit_get_circuit>
     456:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Circ+0x1>
     45a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Circ>
     45e:	8c e2       	ldi	r24, 0x2C	; 44
     460:	84 b9       	out	0x04, r24	; 4
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	85 b9       	out	0x05, r24	; 5
     466:	97 b1       	in	r25, 0x07	; 7
     468:	93 60       	ori	r25, 0x03	; 3
     46a:	97 b9       	out	0x07, r25	; 7
     46c:	88 b9       	out	0x08, r24	; 8
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	9a b9       	out	0x0a, r25	; 10
     472:	8b b9       	out	0x0b, r24	; 11
     474:	0e 94 22 06 	call	0xc44	; 0xc44 <spi_init>
     478:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     47c:	88 e0       	ldi	r24, 0x08	; 8
     47e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     482:	86 e0       	ldi	r24, 0x06	; 6
     484:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     488:	88 e9       	ldi	r24, 0x98	; 152
     48a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     48e:	e8 e6       	ldi	r30, 0x68	; 104
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	87 60       	ori	r24, 0x07	; 7
     496:	80 83       	st	Z, r24
     498:	eb e6       	ldi	r30, 0x6B	; 107
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	83 60       	ori	r24, 0x03	; 3
     4a0:	80 83       	st	Z, r24
     4a2:	ec e6       	ldi	r30, 0x6C	; 108
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8c 63       	ori	r24, 0x3C	; 60
     4aa:	80 83       	st	Z, r24
     4ac:	ed e6       	ldi	r30, 0x6D	; 109
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	80 6f       	ori	r24, 0xF0	; 240
     4b4:	80 83       	st	Z, r24
     4b6:	87 e1       	ldi	r24, 0x17	; 23
     4b8:	9e ef       	ldi	r25, 0xFE	; 254
     4ba:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     4be:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     4c2:	85 e0       	ldi	r24, 0x05	; 5
     4c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     4c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <spi_gpio>
     4da:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     4de:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     4e2:	11 a2       	std	Z+33, r1	; 0x21
     4e4:	12 a2       	std	Z+34, r1	; 0x22
     4e6:	13 a2       	std	Z+35, r1	; 0x23
     4e8:	14 a2       	std	Z+36, r1	; 0x24
     4ea:	e9 e6       	ldi	r30, 0x69	; 105
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	84 60       	ori	r24, 0x04	; 4
     4f2:	80 83       	st	Z, r24
     4f4:	8d b3       	in	r24, 0x1d	; 29
     4f6:	82 60       	ori	r24, 0x02	; 2
     4f8:	8d bb       	out	0x1d, r24	; 29
     4fa:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
     4fe:	78 94       	sei
     500:	08 95       	ret

00000502 <gpio_do_timer>:
     502:	f8 94       	cli
     504:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     508:	8f 5f       	subi	r24, 0xFF	; 255
     50a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
     50e:	81 31       	cpi	r24, 0x11	; 17
     510:	48 f0       	brcs	.+18     	; 0x524 <gpio_do_timer+0x22>
     512:	95 b1       	in	r25, 0x05	; 5
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	89 27       	eor	r24, r25
     518:	85 b9       	out	0x05, r24	; 5
     51a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
     524:	87 e1       	ldi	r24, 0x17	; 23
     526:	9e ef       	ldi	r25, 0xFE	; 254
     528:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     52c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     530:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
     534:	78 94       	sei
     536:	08 95       	ret

00000538 <gpio_trigger_clk>:

void gpio_trigger_clk()
{

	static volatile bool ping_pong = true;
	cli();
     538:	f8 94       	cli
	//spi_gpio(YBI_CLK, ping_pong);
	// trigger clk to turn off after 40uS
	
	if ( Circ->signal_output[DIR_OUT] == REWARD )
     53a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     53e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     542:	85 a1       	ldd	r24, Z+37	; 0x25
     544:	81 11       	cpse	r24, r1
     546:	13 c0       	rjmp	.+38     	; 0x56e <gpio_trigger_clk+0x36>
	{
		if ( ping_pong )
     548:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     54c:	88 23       	and	r24, r24
     54e:	41 f0       	breq	.+16     	; 0x560 <gpio_trigger_clk+0x28>
		{
			Circ->signal_output[M4_1_OUT] = !Circ->signal_output[M4_3_OUT];
     550:	93 a1       	ldd	r25, Z+35	; 0x23
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	98 27       	eor	r25, r24
     556:	91 a3       	std	Z+33, r25	; 0x21
			Circ->signal_output[M4_2_OUT] = !Circ->signal_output[M4_1_OUT];
     558:	91 a1       	ldd	r25, Z+33	; 0x21
     55a:	89 27       	eor	r24, r25
     55c:	82 a3       	std	Z+34, r24	; 0x22
     55e:	19 c0       	rjmp	.+50     	; 0x592 <gpio_trigger_clk+0x5a>
		}
		else
		{
			Circ->signal_output[M4_3_OUT] = Circ->signal_output[M4_1_OUT];
     560:	81 a1       	ldd	r24, Z+33	; 0x21
     562:	83 a3       	std	Z+35, r24	; 0x23
			Circ->signal_output[M4_4_OUT] = !Circ->signal_output[M4_3_OUT];			
     564:	93 a1       	ldd	r25, Z+35	; 0x23
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	89 27       	eor	r24, r25
     56a:	84 a3       	std	Z+36, r24	; 0x24
     56c:	12 c0       	rjmp	.+36     	; 0x592 <gpio_trigger_clk+0x5a>
		}
	}
	else
	{
		if ( ping_pong )
     56e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     572:	88 23       	and	r24, r24
     574:	39 f0       	breq	.+14     	; 0x584 <gpio_trigger_clk+0x4c>
		{
			Circ->signal_output[M4_1_OUT] = Circ->signal_output[M4_3_OUT];
     576:	83 a1       	ldd	r24, Z+35	; 0x23
     578:	81 a3       	std	Z+33, r24	; 0x21
			Circ->signal_output[M4_2_OUT] = !Circ->signal_output[M4_1_OUT];
     57a:	91 a1       	ldd	r25, Z+33	; 0x21
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	89 27       	eor	r24, r25
     580:	82 a3       	std	Z+34, r24	; 0x22
     582:	07 c0       	rjmp	.+14     	; 0x592 <gpio_trigger_clk+0x5a>

		}
		else
		{
			Circ->signal_output[M4_3_OUT] = !Circ->signal_output[M4_1_OUT];
     584:	91 a1       	ldd	r25, Z+33	; 0x21
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	98 27       	eor	r25, r24
     58a:	93 a3       	std	Z+35, r25	; 0x23
			Circ->signal_output[M4_4_OUT] = !Circ->signal_output[M4_3_OUT];
     58c:	93 a1       	ldd	r25, Z+35	; 0x23
     58e:	89 27       	eor	r24, r25
     590:	84 a3       	std	Z+36, r24	; 0x24
		}
	}
	
	gpio_do_update();	
     592:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
	ping_pong = !ping_pong;	
     596:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	89 27       	eor	r24, r25
     59e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	sei();
     5a2:	78 94       	sei
     5a4:	08 95       	ret

000005a6 <__vector_1>:
}

/*INTERRUPTS*/
ISR (INT0_vect)
{
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
}
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <__vector_16>:
	DIR is LOW,  CLK affects M4-1 first follows QPDIR2 (first pulse)
	DIR is HIGH, CLK affects M4-3 first, inverted in respect to QPDIR2 (first pulse)
*/

ISR (TIMER0_OVF_vect)
{
     5ba:	1f 92       	push	r1
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	0f 92       	push	r0
     5c2:	11 24       	eor	r1, r1
	//spi_gpio(YBI_CLK, 0);
}
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <__vector_2>:
ISR (INT1_vect)
{
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	2f 93       	push	r18
     5da:	3f 93       	push	r19
     5dc:	4f 93       	push	r20
     5de:	5f 93       	push	r21
     5e0:	6f 93       	push	r22
     5e2:	7f 93       	push	r23
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	af 93       	push	r26
     5ea:	bf 93       	push	r27
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <__vector_2+0x28>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
	volatile bool qp_dir_1, qp_dir_2;
	
	if ( Circ->signal_input[END_IN] )
     5fa:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     5fe:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     602:	81 89       	ldd	r24, Z+17	; 0x11
     604:	88 23       	and	r24, r24
     606:	59 f1       	breq	.+86     	; 0x65e <__vector_2+0x90>
	{
		qp_dir_1 = _READ_PIN(QP_DIR1_PORT, QP_DIR1_PIN);
     608:	89 b1       	in	r24, 0x09	; 9
     60a:	82 fb       	bst	r24, 2
     60c:	88 27       	eor	r24, r24
     60e:	80 f9       	bld	r24, 0
     610:	89 83       	std	Y+1, r24	; 0x01
		qp_dir_2 = _READ_PIN(QP_DIR2_PORT, QP_DIR2_PIN);
     612:	89 b1       	in	r24, 0x09	; 9
     614:	83 fb       	bst	r24, 3
     616:	88 27       	eor	r24, r24
     618:	80 f9       	bld	r24, 0
     61a:	8a 83       	std	Y+2, r24	; 0x02

		if ( ( qp_dir_1 == qp_dir_2 ) )
     61c:	99 81       	ldd	r25, Y+1	; 0x01
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	98 13       	cpse	r25, r24
     622:	03 c0       	rjmp	.+6      	; 0x62a <__vector_2+0x5c>
			Circ->signal_output[DIR_OUT] = FORWARD;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	85 a3       	std	Z+37, r24	; 0x25
     628:	01 c0       	rjmp	.+2      	; 0x62c <__vector_2+0x5e>
		else
			Circ->signal_output[DIR_OUT] = REWARD;
     62a:	15 a2       	std	Z+37, r1	; 0x25
		
		if ( ! Circ->signal_input[LOW_IN] )
     62c:	80 8d       	ldd	r24, Z+24	; 0x18
     62e:	81 11       	cpse	r24, r1
     630:	03 c0       	rjmp	.+6      	; 0x638 <__vector_2+0x6a>
		{
			gpio_trigger_clk();
     632:	0e 94 9c 02 	call	0x538	; 0x538 <gpio_trigger_clk>
     636:	13 c0       	rjmp	.+38     	; 0x65e <__vector_2+0x90>
		}
		else
		{
			if ( ( Circ->signal_output[DIR_OUT] == FORWARD ) && ( qp_dir_2 ) )
     638:	85 a1       	ldd	r24, Z+37	; 0x25
     63a:	88 23       	and	r24, r24
     63c:	21 f0       	breq	.+8      	; 0x646 <__vector_2+0x78>
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	81 11       	cpse	r24, r1
				gpio_trigger_clk();
     642:	0e 94 9c 02 	call	0x538	; 0x538 <gpio_trigger_clk>
			if ( ( Circ->signal_output[DIR_OUT] == REWARD ) && (!qp_dir_2 ) )
     646:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Circ>
     64a:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Circ+0x1>
     64e:	85 a1       	ldd	r24, Z+37	; 0x25
     650:	81 11       	cpse	r24, r1
     652:	05 c0       	rjmp	.+10     	; 0x65e <__vector_2+0x90>
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	81 11       	cpse	r24, r1
     658:	02 c0       	rjmp	.+4      	; 0x65e <__vector_2+0x90>
				gpio_trigger_clk();
     65a:	0e 94 9c 02 	call	0x538	; 0x538 <gpio_trigger_clk>
		}
	}
	gpio_do_update();
     65e:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
	
}
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	ff 91       	pop	r31
     66c:	ef 91       	pop	r30
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	7f 91       	pop	r23
     678:	6f 91       	pop	r22
     67a:	5f 91       	pop	r21
     67c:	4f 91       	pop	r20
     67e:	3f 91       	pop	r19
     680:	2f 91       	pop	r18
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <__vector_13>:
ISR (TIMER1_OVF_vect)
{
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
	gpio_do_timer();
     6ae:	0e 94 81 02 	call	0x502	; 0x502 <gpio_do_timer>
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_18>:
ISR (USART_RX_vect)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
	cli();
     6f6:	f8 94       	cli
		uint8_t ch = UDR0;		
     6f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		gpio_do_uart_rx(ch);
     6fc:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
	sei();
     700:	78 94       	sei
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <__vector_3>:
#define UART_CMD 0x34
ISR (PCINT0_vect)
{
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	0f 92       	push	r0
     72c:	11 24       	eor	r1, r1
     72e:	2f 93       	push	r18
     730:	3f 93       	push	r19
     732:	4f 93       	push	r20
     734:	5f 93       	push	r21
     736:	6f 93       	push	r22
     738:	7f 93       	push	r23
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	af 93       	push	r26
     740:	bf 93       	push	r27
     742:	ef 93       	push	r30
     744:	ff 93       	push	r31
	gpio_do_update();
     746:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
	gpio_do_uart_rx(UART_CMD);
     74a:	84 e3       	ldi	r24, 0x34	; 52
     74c:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
}
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_4>:
ISR (PCINT1_vect)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
	gpio_do_update();
     794:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
	gpio_do_uart_rx(UART_CMD);
     798:	84 e3       	ldi	r24, 0x34	; 52
     79a:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <__vector_5>:
ISR (PCINT2_vect)
{
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	4f 93       	push	r20
     7d0:	5f 93       	push	r21
     7d2:	6f 93       	push	r22
     7d4:	7f 93       	push	r23
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
	gpio_do_update();
     7e2:	0e 94 89 01 	call	0x312	; 0x312 <gpio_do_update>
	gpio_do_uart_rx(UART_CMD);
     7e6:	84 e3       	ldi	r24, 0x34	; 52
     7e8:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <circuit_do_outputs>:
    }
}

static void circuit_do_outputs()
{
        circuit.signal_output[MOVE2_OUT] = NOT( circuit.signal_input[MOVE_IN] );
     80e:	e9 e3       	ldi	r30, 0x39	; 57
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	95 89       	ldd	r25, Z+21	; 0x15
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	89 27       	eor	r24, r25
     818:	81 8f       	std	Z+25, r24	; 0x19

        circuit.signal_output[FF0_OUT] = NOT( circuit.ffs[FLFP_01_OUT].set_state && circuit.signal_output[FF2_OUT] && circuit.signal_output[FF3_OUT] );
     81a:	82 81       	ldd	r24, Z+2	; 0x02
     81c:	81 11       	cpse	r24, r1
     81e:	09 c0       	rjmp	.+18     	; 0x832 <circuit_do_outputs+0x24>
     820:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <circuit+0x1c>
     824:	88 23       	and	r24, r24
     826:	39 f0       	breq	.+14     	; 0x836 <circuit_do_outputs+0x28>
     828:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <circuit+0x1d>
     82c:	81 11       	cpse	r24, r1
     82e:	05 c0       	rjmp	.+10     	; 0x83a <circuit_do_outputs+0x2c>
     830:	05 c0       	rjmp	.+10     	; 0x83c <circuit_do_outputs+0x2e>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	03 c0       	rjmp	.+6      	; 0x83c <circuit_do_outputs+0x2e>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	01 c0       	rjmp	.+2      	; 0x83c <circuit_do_outputs+0x2e>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	e9 e3       	ldi	r30, 0x39	; 57
     83e:	f1 e0       	ldi	r31, 0x01	; 1
     840:	82 8f       	std	Z+26, r24	; 0x1a

        circuit.signal_output[FF1_OUT] = circuit.ffs[FLFP_02_OUT].set_state;
     842:	85 81       	ldd	r24, Z+5	; 0x05
     844:	83 8f       	std	Z+27, r24	; 0x1b
		
        circuit.signal_output[FF2_OUT] = circuit.ffs[FLFP_03_OUT].set_state;
     846:	80 85       	ldd	r24, Z+8	; 0x08
     848:	84 8f       	std	Z+28, r24	; 0x1c

        circuit.signal_output[FF3_OUT] = circuit.ffs[FLFP_04_OUT].set_state;
     84a:	83 85       	ldd	r24, Z+11	; 0x0b
     84c:	85 8f       	std	Z+29, r24	; 0x1d

        circuit.signal_output[FF4_OUT] = circuit.ffs[FLFP_05_OUT].set_state;
     84e:	86 85       	ldd	r24, Z+14	; 0x0e
     850:	86 8f       	std	Z+30, r24	; 0x1e
		
		circuit.signal_output[CUT_OUT] = circuit.signal_input[CUT_IN];
     852:	92 89       	ldd	r25, Z+18	; 0x12
     854:	97 8f       	std	Z+31, r25	; 0x1f

        circuit.signal_output[REC_OUT] = circuit.ffs[FLFP_05_OUT].set_state;
     856:	80 a3       	std	Z+32, r24	; 0x20
     858:	08 95       	ret

0000085a <circuit_do_flfp>:
        circuit.ffs[i] = tmp_ff;
    }
}

static void circuit_do_flfp()
{
     85a:	cf 93       	push	r28
    for ( FlipFlopsOutput flfp = 0; flfp < NUM_OF_FLIPFLOPS; flfp++)
     85c:	c0 e0       	ldi	r28, 0x00	; 0
     85e:	74 c1       	rjmp	.+744    	; 0xb48 <__stack+0x249>
    {
        if ( flfp == FLFP_01_OUT )
     860:	c1 11       	cpse	r28, r1
     862:	1b c0       	rjmp	.+54     	; 0x89a <circuit_do_flfp+0x40>
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
                            circuit.signal_input[MOVE_IN],
                            ( circuit.signal_output[FF3_OUT] && circuit.signal_output[FF4_OUT] ) );//REVIEW THIS ON FF IS NOT FLFP
     864:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <circuit+0x1d>
     868:	88 23       	and	r24, r24
     86a:	29 f0       	breq	.+10     	; 0x876 <circuit_do_flfp+0x1c>
     86c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <circuit+0x1e>
     870:	81 11       	cpse	r24, r1
     872:	03 c0       	rjmp	.+6      	; 0x87a <circuit_do_flfp+0x20>
     874:	03 c0       	rjmp	.+6      	; 0x87c <circuit_do_flfp+0x22>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	01 c0       	rjmp	.+2      	; 0x87c <circuit_do_flfp+0x22>
     87a:	81 e0       	ldi	r24, 0x01	; 1
{
    for ( FlipFlopsOutput flfp = 0; flfp < NUM_OF_FLIPFLOPS; flfp++)
    {
        if ( flfp == FLFP_01_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     87c:	2c 2f       	mov	r18, r28
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	48 2f       	mov	r20, r24
     882:	41 70       	andi	r20, 0x01	; 1
     884:	c9 01       	movw	r24, r18
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	82 0f       	add	r24, r18
     88c:	93 1f       	adc	r25, r19
     88e:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <circuit+0x15>
     892:	87 5c       	subi	r24, 0xC7	; 199
     894:	9e 4f       	sbci	r25, 0xFE	; 254
     896:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <logic_gates_do_flipflop>
                            circuit.signal_input[MOVE_IN],
                            ( circuit.signal_output[FF3_OUT] && circuit.signal_output[FF4_OUT] ) );//REVIEW THIS ON FF IS NOT FLFP
        }
// 		R (FAD+STOP+END)(CUT+MOVE)
// 		S: (REW.FORW)( (END.FAD) . REPR)
        if ( flfp == FLFP_02_OUT )
     89a:	c1 30       	cpi	r28, 0x01	; 1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <circuit_do_flfp+0x46>
     89e:	4b c0       	rjmp	.+150    	; 0x936 <__stack+0x37>
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
                            ( circuit.signal_input[FAD_IN] || NOT(circuit.signal_input[STOP_IN]) || NOT(circuit.signal_input[END_IN]) ) 
							&& ( circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ),
							( circuit.signal_input[REW_IN] && circuit.signal_input[FORW_IN] ) 
     8a0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <circuit+0x13>
							&& ( ( NOT( circuit.signal_input[END_IN] && circuit.signal_input[FAD_IN] ) ) && circuit.signal_input[REPR_IN] )
     8a4:	88 23       	and	r24, r24
     8a6:	b9 f0       	breq	.+46     	; 0x8d6 <circuit_do_flfp+0x7c>
        if ( flfp == FLFP_02_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
                            ( circuit.signal_input[FAD_IN] || NOT(circuit.signal_input[STOP_IN]) || NOT(circuit.signal_input[END_IN]) ) 
							&& ( circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ),
							( circuit.signal_input[REW_IN] && circuit.signal_input[FORW_IN] ) 
     8a8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <circuit+0x16>
     8ac:	88 23       	and	r24, r24
     8ae:	a9 f0       	breq	.+42     	; 0x8da <circuit_do_flfp+0x80>
							&& ( ( NOT( circuit.signal_input[END_IN] && circuit.signal_input[FAD_IN] ) ) && circuit.signal_input[REPR_IN] )
     8b0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <circuit+0x11>
     8b4:	81 11       	cpse	r24, r1
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <circuit_do_flfp+0x68>
     8b8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <circuit+0xf>
     8bc:	81 11       	cpse	r24, r1
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <circuit_do_flfp+0x6c>
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <circuit_do_flfp+0x6e>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <circuit_do_flfp+0x6e>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 ff       	sbrs	r24, 0
     8ca:	09 c0       	rjmp	.+18     	; 0x8de <circuit_do_flfp+0x84>
     8cc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <circuit+0x17>
     8d0:	81 11       	cpse	r24, r1
     8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <circuit_do_flfp+0x88>
     8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <circuit_do_flfp+0x8a>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <circuit_do_flfp+0x8a>
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <circuit_do_flfp+0x8a>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <circuit_do_flfp+0x8a>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
        }
// 		R (FAD+STOP+END)(CUT+MOVE)
// 		S: (REW.FORW)( (END.FAD) . REPR)
        if ( flfp == FLFP_02_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     8e4:	48 2f       	mov	r20, r24
     8e6:	41 70       	andi	r20, 0x01	; 1
                            ( circuit.signal_input[FAD_IN] || NOT(circuit.signal_input[STOP_IN]) || NOT(circuit.signal_input[END_IN]) ) 
     8e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <circuit+0xf>
							&& ( circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ),
     8ec:	81 11       	cpse	r24, r1
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <__stack+0x1>
// 		R (FAD+STOP+END)(CUT+MOVE)
// 		S: (REW.FORW)( (END.FAD) . REPR)
        if ( flfp == FLFP_02_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
                            ( circuit.signal_input[FAD_IN] || NOT(circuit.signal_input[STOP_IN]) || NOT(circuit.signal_input[END_IN]) ) 
     8f0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <circuit+0x14>
     8f4:	88 23       	and	r24, r24
     8f6:	21 f0       	breq	.+8      	; 0x900 <__stack+0x1>
     8f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <circuit+0x11>
     8fc:	81 11       	cpse	r24, r1
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
							&& ( circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ),
     900:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <circuit+0x12>
     904:	81 11       	cpse	r24, r1
     906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0x17>
     908:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <circuit+0x15>
     90c:	81 11       	cpse	r24, r1
     90e:	05 c0       	rjmp	.+10     	; 0x91a <__stack+0x1b>
     910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0x1d>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	03 c0       	rjmp	.+6      	; 0x91c <__stack+0x1d>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
     91a:	81 e0       	ldi	r24, 0x01	; 1
        }
// 		R (FAD+STOP+END)(CUT+MOVE)
// 		S: (REW.FORW)( (END.FAD) . REPR)
        if ( flfp == FLFP_02_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     91c:	2c 2f       	mov	r18, r28
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	68 2f       	mov	r22, r24
     922:	61 70       	andi	r22, 0x01	; 1
     924:	c9 01       	movw	r24, r18
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	82 0f       	add	r24, r18
     92c:	93 1f       	adc	r25, r19
     92e:	87 5c       	subi	r24, 0xC7	; 199
     930:	9e 4f       	sbci	r25, 0xFE	; 254
     932:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <logic_gates_do_flipflop>

                        );
        }
// 		R (REW.FORW)(CUT + MOVE)(REW)
// 		S: ( (END.FAD) . REPR )(FORW)
        if ( flfp == FLFP_03_OUT )
     936:	c2 30       	cpi	r28, 0x02	; 2
     938:	09 f0       	breq	.+2      	; 0x93c <__stack+0x3d>
     93a:	45 c0       	rjmp	.+138    	; 0x9c6 <__stack+0xc7>
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
                            ( (circuit.signal_input[REW_IN] && circuit.signal_input[FORW_IN]) && (circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ) && circuit.signal_input[REW_IN] ),
							( ( NOT( circuit.signal_input[END_IN] && circuit.signal_input[FAD_IN] ) && circuit.signal_input[REPR_IN] ) && circuit.signal_input[FORW_IN] )
     93c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <circuit+0x11>
     940:	81 11       	cpse	r24, r1
     942:	05 c0       	rjmp	.+10     	; 0x94e <__stack+0x4f>
     944:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <circuit+0xf>
     948:	81 11       	cpse	r24, r1
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__stack+0x53>
     94c:	03 c0       	rjmp	.+6      	; 0x954 <__stack+0x55>
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	01 c0       	rjmp	.+2      	; 0x954 <__stack+0x55>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	80 ff       	sbrs	r24, 0
     956:	09 c0       	rjmp	.+18     	; 0x96a <__stack+0x6b>
     958:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <circuit+0x17>
     95c:	88 23       	and	r24, r24
     95e:	39 f0       	breq	.+14     	; 0x96e <__stack+0x6f>
     960:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <circuit+0x16>
     964:	81 11       	cpse	r24, r1
     966:	05 c0       	rjmp	.+10     	; 0x972 <__stack+0x73>
     968:	05 c0       	rjmp	.+10     	; 0x974 <__stack+0x75>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	03 c0       	rjmp	.+6      	; 0x974 <__stack+0x75>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	01 c0       	rjmp	.+2      	; 0x974 <__stack+0x75>
     972:	81 e0       	ldi	r24, 0x01	; 1
        }
// 		R (REW.FORW)(CUT + MOVE)(REW)
// 		S: ( (END.FAD) . REPR )(FORW)
        if ( flfp == FLFP_03_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     974:	48 2f       	mov	r20, r24
     976:	41 70       	andi	r20, 0x01	; 1
                            ( (circuit.signal_input[REW_IN] && circuit.signal_input[FORW_IN]) && (circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ) && circuit.signal_input[REW_IN] ),
     978:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <circuit+0x13>
     97c:	88 23       	and	r24, r24
     97e:	79 f0       	breq	.+30     	; 0x99e <__stack+0x9f>
     980:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <circuit+0x16>
     984:	99 23       	and	r25, r25
     986:	69 f0       	breq	.+26     	; 0x9a2 <__stack+0xa3>
     988:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <circuit+0x12>
     98c:	91 11       	cpse	r25, r1
     98e:	04 c0       	rjmp	.+8      	; 0x998 <__stack+0x99>
     990:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <circuit+0x15>
     994:	99 23       	and	r25, r25
     996:	39 f0       	breq	.+14     	; 0x9a6 <__stack+0xa7>
     998:	81 11       	cpse	r24, r1
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <__stack+0xab>
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <__stack+0xad>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <__stack+0xad>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__stack+0xad>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
        }
// 		R (REW.FORW)(CUT + MOVE)(REW)
// 		S: ( (END.FAD) . REPR )(FORW)
        if ( flfp == FLFP_03_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     9ac:	2c 2f       	mov	r18, r28
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	68 2f       	mov	r22, r24
     9b2:	61 70       	andi	r22, 0x01	; 1
     9b4:	c9 01       	movw	r24, r18
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	87 5c       	subi	r24, 0xC7	; 199
     9c0:	9e 4f       	sbci	r25, 0xFE	; 254
     9c2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <logic_gates_do_flipflop>
                            ( (circuit.signal_input[REW_IN] && circuit.signal_input[FORW_IN]) && (circuit.signal_input[CUT_IN] || circuit.signal_input[MOVE_IN] ) && circuit.signal_input[REW_IN] ),
							( ( NOT( circuit.signal_input[END_IN] && circuit.signal_input[FAD_IN] ) && circuit.signal_input[REPR_IN] ) && circuit.signal_input[FORW_IN] )
                        );
        }
        if ( flfp == FLFP_04_OUT )
     9c6:	c3 30       	cpi	r28, 0x03	; 3
     9c8:	09 f0       	breq	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	68 c0       	rjmp	.+208    	; 0xa9c <__stack+0x19d>
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
                            AND((AND( circuit.signal_input[REW_IN], circuit.signal_input[FORW_IN])),
                                    AND( circuit.signal_input[FAD_IN], AND ( NOT(circuit.signal_input[STOP_IN]), NOT(circuit.signal_input[END_IN])))),
                            AND((OR( circuit.signal_input[CUT_IN], circuit.signal_input[MOVE_IN])),
     9cc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <circuit+0x12>
     9d0:	81 11       	cpse	r24, r1
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <__stack+0xe1>
     9d4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <circuit+0x15>
     9d8:	88 23       	and	r24, r24
     9da:	21 f0       	breq	.+8      	; 0x9e4 <__stack+0xe5>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <__stack+0xe7>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__stack+0xe7>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	80 ff       	sbrs	r24, 0
     9e8:	1a c0       	rjmp	.+52     	; 0xa1e <__stack+0x11f>
     9ea:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <circuit+0x11>
     9ee:	88 23       	and	r24, r24
     9f0:	29 f0       	breq	.+10     	; 0x9fc <__stack+0xfd>
     9f2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <circuit+0xf>
     9f6:	81 11       	cpse	r24, r1
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <__stack+0x101>
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <__stack+0x103>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__stack+0x103>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 fd       	sbrc	r24, 0
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__stack+0x111>
     a06:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <circuit+0x17>
     a0a:	81 11       	cpse	r24, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x115>
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <__stack+0x117>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <__stack+0x117>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 fd       	sbrc	r24, 0
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x123>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <__stack+0x125>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <__stack+0x125>
     a22:	81 e0       	ldi	r24, 0x01	; 1
							( ( NOT( circuit.signal_input[END_IN] && circuit.signal_input[FAD_IN] ) && circuit.signal_input[REPR_IN] ) && circuit.signal_input[FORW_IN] )
                        );
        }
        if ( flfp == FLFP_04_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     a24:	48 2f       	mov	r20, r24
     a26:	41 70       	andi	r20, 0x01	; 1
                            AND((AND( circuit.signal_input[REW_IN], circuit.signal_input[FORW_IN])),
     a28:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <circuit+0x13>
     a2c:	88 23       	and	r24, r24
     a2e:	29 f0       	breq	.+10     	; 0xa3a <__stack+0x13b>
     a30:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <circuit+0x16>
     a34:	81 11       	cpse	r24, r1
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <__stack+0x13f>
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <__stack+0x141>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <__stack+0x141>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 ff       	sbrs	r24, 0
     a42:	1c c0       	rjmp	.+56     	; 0xa7c <__stack+0x17d>
     a44:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <circuit+0xf>
     a48:	88 23       	and	r24, r24
     a4a:	89 f0       	breq	.+34     	; 0xa6e <__stack+0x16f>
     a4c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <circuit+0x14>
     a50:	81 11       	cpse	r24, r1
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <__stack+0x161>
     a54:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <circuit+0x11>
     a58:	88 23       	and	r24, r24
     a5a:	21 f0       	breq	.+8      	; 0xa64 <__stack+0x165>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <__stack+0x167>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <__stack+0x167>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	80 fd       	sbrc	r24, 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__stack+0x173>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <__stack+0x175>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <__stack+0x175>
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	80 fd       	sbrc	r24, 0
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__stack+0x181>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <__stack+0x183>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <__stack+0x183>
     a80:	81 e0       	ldi	r24, 0x01	; 1
							( ( NOT( circuit.signal_input[END_IN] && circuit.signal_input[FAD_IN] ) && circuit.signal_input[REPR_IN] ) && circuit.signal_input[FORW_IN] )
                        );
        }
        if ( flfp == FLFP_04_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     a82:	2c 2f       	mov	r18, r28
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	68 2f       	mov	r22, r24
     a88:	61 70       	andi	r22, 0x01	; 1
     a8a:	c9 01       	movw	r24, r18
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	87 5c       	subi	r24, 0xC7	; 199
     a96:	9e 4f       	sbci	r25, 0xFE	; 254
     a98:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <logic_gates_do_flipflop>
                                    AND( circuit.signal_input[FAD_IN], AND ( NOT(circuit.signal_input[STOP_IN]), NOT(circuit.signal_input[END_IN])))),
                            AND((OR( circuit.signal_input[CUT_IN], circuit.signal_input[MOVE_IN])),
                                    (AND( NOT( AND( circuit.signal_input[END_IN], circuit.signal_input[FAD_IN] ) ), circuit.signal_input[REPR_IN])))
                        );
        }
        if ( flfp == FLFP_05_OUT )
     a9c:	c4 30       	cpi	r28, 0x04	; 4
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x1a3>
     aa0:	52 c0       	rjmp	.+164    	; 0xb46 <__stack+0x247>
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     aa2:	e9 e3       	ldi	r30, 0x39	; 57
     aa4:	f1 e0       	ldi	r31, 0x01	; 1
     aa6:	40 89       	ldd	r20, Z+16	; 0x10
                            AND((OR( circuit.signal_input[CUT_IN], circuit.signal_input[MOVE_IN])),
     aa8:	82 89       	ldd	r24, Z+18	; 0x12
     aaa:	81 11       	cpse	r24, r1
     aac:	06 c0       	rjmp	.+12     	; 0xaba <__stack+0x1bb>
     aae:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <circuit+0x15>
     ab2:	88 23       	and	r24, r24
     ab4:	21 f0       	breq	.+8      	; 0xabe <__stack+0x1bf>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <__stack+0x1c1>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <__stack+0x1c1>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	80 ff       	sbrs	r24, 0
     ac2:	31 c0       	rjmp	.+98     	; 0xb26 <__stack+0x227>
     ac4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <circuit+0xf>
     ac8:	88 23       	and	r24, r24
     aca:	89 f0       	breq	.+34     	; 0xaee <__stack+0x1ef>
     acc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <circuit+0x14>
     ad0:	81 11       	cpse	r24, r1
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <__stack+0x1e1>
     ad4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <circuit+0x11>
     ad8:	88 23       	and	r24, r24
     ada:	21 f0       	breq	.+8      	; 0xae4 <__stack+0x1e5>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <__stack+0x1e7>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 fd       	sbrc	r24, 0
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <__stack+0x1f3>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <__stack+0x1f5>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <__stack+0x1f5>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 ff       	sbrs	r24, 0
     af6:	10 c0       	rjmp	.+32     	; 0xb18 <__stack+0x219>
     af8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <circuit+0x13>
     afc:	88 23       	and	r24, r24
     afe:	29 f0       	breq	.+10     	; 0xb0a <__stack+0x20b>
     b00:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <circuit+0x16>
     b04:	81 11       	cpse	r24, r1
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <__stack+0x20f>
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <__stack+0x211>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <__stack+0x211>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 fd       	sbrc	r24, 0
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__stack+0x21d>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <__stack+0x21f>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <__stack+0x21f>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 fd       	sbrc	r24, 0
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__stack+0x22b>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x22d>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <__stack+0x22d>
     b2a:	81 e0       	ldi	r24, 0x01	; 1
                                    (AND( NOT( AND( circuit.signal_input[END_IN], circuit.signal_input[FAD_IN] ) ), circuit.signal_input[REPR_IN])))
                        );
        }
        if ( flfp == FLFP_05_OUT )
        {
            logic_gates_do_flipflop((FlipFlop*)&circuit.ffs[flfp],
     b2c:	2c 2f       	mov	r18, r28
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	68 2f       	mov	r22, r24
     b32:	61 70       	andi	r22, 0x01	; 1
     b34:	c9 01       	movw	r24, r18
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	87 5c       	subi	r24, 0xC7	; 199
     b40:	9e 4f       	sbci	r25, 0xFE	; 254
     b42:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <logic_gates_do_flipflop>
    }
}

static void circuit_do_flfp()
{
    for ( FlipFlopsOutput flfp = 0; flfp < NUM_OF_FLIPFLOPS; flfp++)
     b46:	cf 5f       	subi	r28, 0xFF	; 255
     b48:	c5 30       	cpi	r28, 0x05	; 5
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <__stack+0x24f>
     b4c:	89 ce       	rjmp	.-750    	; 0x860 <circuit_do_flfp+0x6>
                                        (AND( circuit.signal_input[REW_IN], circuit.signal_input[FORW_IN])))),
                            circuit.signal_input[REC_IN]
                        );
        }
    }
}
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <circuit_get_circuit>:
Circuit circuit;

Circuit * circuit_get_circuit()
{
    return &circuit;
}
     b52:	89 e3       	ldi	r24, 0x39	; 57
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	08 95       	ret

00000b58 <circuit_init>:

void circuit_init()
{
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	00 d0       	rcall	.+0      	; 0xb62 <circuit_init+0xa>
     b62:	1f 92       	push	r1
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < NUM_OF_FLIPFLOPS; i++)
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <circuit_init+0x3c>
    {
        FlipFlop tmp_ff;
        logic_gates_make_flipflop(&tmp_ff);
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 da 05 	call	0xbb4	; 0xbb4 <logic_gates_make_flipflop>
        circuit.ffs[i] = tmp_ff;
     b76:	f8 01       	movw	r30, r16
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	e0 0f       	add	r30, r16
     b7e:	f1 1f       	adc	r31, r17
     b80:	e7 5c       	subi	r30, 0xC7	; 199
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	ab 81       	ldd	r26, Y+3	; 0x03
     b8a:	80 83       	st	Z, r24
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	a2 83       	std	Z+2, r26	; 0x02
    return &circuit;
}

void circuit_init()
{
    for (int i = 0; i < NUM_OF_FLIPFLOPS; i++)
     b90:	0f 5f       	subi	r16, 0xFF	; 255
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	05 30       	cpi	r16, 0x05	; 5
     b96:	11 05       	cpc	r17, r1
     b98:	54 f3       	brlt	.-44     	; 0xb6e <circuit_init+0x16>
    {
        FlipFlop tmp_ff;
        logic_gates_make_flipflop(&tmp_ff);
        circuit.ffs[i] = tmp_ff;
    }
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <circuit_update>:
// 		
// 		if ( out == CLK_OUT )	circuit.signal_output[out] = 0; 
}
void circuit_update()
{
    circuit_do_flfp();
     baa:	0e 94 2d 04 	call	0x85a	; 0x85a <circuit_do_flfp>

    circuit_do_outputs();
     bae:	0e 94 07 04 	call	0x80e	; 0x80e <circuit_do_outputs>
     bb2:	08 95       	ret

00000bb4 <logic_gates_make_flipflop>:
#include "includes/logic_gates.h"

void logic_gates_make_flipflop(FlipFlop *new_flipflop)
{
     bb4:	fc 01       	movw	r30, r24
	new_flipflop->reset_port	= true;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 83       	st	Z, r24
	new_flipflop->set_port		= true;
     bba:	81 83       	std	Z+1, r24	; 0x01
	new_flipflop->set_state		= true;
     bbc:	82 83       	std	Z+2, r24	; 0x02
     bbe:	08 95       	ret

00000bc0 <logic_gates_do_flipflop>:
}

void logic_gates_do_flipflop(FlipFlop *flipflop, bool new_reset, bool new_set)
{
     bc0:	fc 01       	movw	r30, r24
	// Cannot have SET and RESET both at LOW
	if ( ( new_reset == 0 ) && ( new_set == 0 ) ) return;
     bc2:	61 11       	cpse	r22, r1
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <logic_gates_do_flipflop+0xa>
     bc6:	44 23       	and	r20, r20
     bc8:	49 f0       	breq	.+18     	; 0xbdc <logic_gates_do_flipflop+0x1c>
	
	if ( new_set == 0 ) flipflop->set_state = true;
     bca:	41 11       	cpse	r20, r1
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <logic_gates_do_flipflop+0x12>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	82 83       	std	Z+2, r24	; 0x02
	if ( new_reset== 0 ) flipflop->set_state = false;
     bd2:	61 11       	cpse	r22, r1
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <logic_gates_do_flipflop+0x18>
     bd6:	12 82       	std	Z+2, r1	; 0x02
	// if set = 0 and reset = 0, hold state and update
	
// 	if ( new_reset == false	&&	( flipflop->reset_port == true) ) flipflop->set_state = false;
// 	if ( new_set == false	&&	( flipflop->set_port == true )	) flipflop->set_state = true;

	flipflop->reset_port = new_reset;
     bd8:	60 83       	st	Z, r22
	flipflop->set_port   = new_set;
     bda:	41 83       	std	Z+1, r20	; 0x01
     bdc:	08 95       	ret

00000bde <main>:

#include <util/delay.h>

int main(void)
{
    gpio_init(eeprom_read_byte(0x00));
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 43 09 	call	0x1286	; 0x1286 <eeprom_read_byte>
     be6:	0e 94 26 02 	call	0x44c	; 0x44c <gpio_init>
     bea:	ff cf       	rjmp	.-2      	; 0xbea <main+0xc>

00000bec <spi_xfer>:
}


uint8_t spi_xfer(uint8_t cs_pin, uint8_t data)
{
	SPDR = data;
     bec:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
     bee:	0d b4       	in	r0, 0x2d	; 45
     bf0:	07 fe       	sbrs	r0, 7
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <spi_xfer+0x2>
	
	return SPDR;
     bf4:	8e b5       	in	r24, 0x2e	; 46
}
     bf6:	08 95       	ret

00000bf8 <spi_write>:
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
	}
}

void spi_write(uint8_t cs_pin, uint8_t reg, uint8_t data)
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	06 2f       	mov	r16, r22
     c02:	14 2f       	mov	r17, r20
	SPI_PORT &= ~( 1 << cs_pin );
     c04:	98 b1       	in	r25, 0x08	; 8
     c06:	c1 e0       	ldi	r28, 0x01	; 1
     c08:	d0 e0       	ldi	r29, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <spi_write+0x18>
     c0c:	cc 0f       	add	r28, r28
     c0e:	dd 1f       	adc	r29, r29
     c10:	8a 95       	dec	r24
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <spi_write+0x14>
     c14:	8c 2f       	mov	r24, r28
     c16:	80 95       	com	r24
     c18:	98 23       	and	r25, r24
     c1a:	98 b9       	out	0x08, r25	; 8
	spi_xfer(SPI_CS1, MCP23S08_OPCOD);
     c1c:	60 e4       	ldi	r22, 0x40	; 64
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_xfer>
	spi_xfer(SPI_CS1, reg);
     c24:	60 2f       	mov	r22, r16
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_xfer>
	spi_xfer(SPI_CS1, data);
     c2c:	61 2f       	mov	r22, r17
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
     c34:	88 b1       	in	r24, 0x08	; 8
     c36:	c8 2b       	or	r28, r24
     c38:	c8 b9       	out	0x08, r28	; 8
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <spi_init>:
#include "includes/spi_driver.h"

void spi_init()
{
	// enable SPI, set as master, and clock to fosc/128
	PORTC = 0xff;
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	88 b9       	out	0x08, r24	; 8
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
     c48:	83 e5       	ldi	r24, 0x53	; 83
     c4a:	8c bd       	out	0x2c, r24	; 44
	spi_write(SPI_CS1, MCP23S08_IODIR, 0x00); // configure MCP23S08 01 as output
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <spi_write>
	spi_write(SPI_CS2, MCP23S08_IODIR, 0x00); // configure MCP23S08 02 as output
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <spi_write>
	spi_write(SPI_CS1, MCP23S08_GPIO, 0x00);
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	69 e0       	ldi	r22, 0x09	; 9
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <spi_write>
	spi_write(SPI_CS2, MCP23S08_GPIO, 0x00);
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	69 e0       	ldi	r22, 0x09	; 9
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <spi_write>
     c74:	08 95       	ret

00000c76 <spi_read>:
	spi_xfer(SPI_CS1, data);
	SPI_PORT |= ( 1 << cs_pin );
}

uint8_t spi_read(uint8_t cs_pin, uint8_t reg)
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	18 2f       	mov	r17, r24
     c80:	06 2f       	mov	r16, r22
	uint8_t data;
	SPI_PORT &= ~( 1 << cs_pin );
     c82:	88 b1       	in	r24, 0x08	; 8
     c84:	c1 e0       	ldi	r28, 0x01	; 1
     c86:	d0 e0       	ldi	r29, 0x00	; 0
     c88:	01 2e       	mov	r0, r17
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <spi_read+0x1a>
     c8c:	cc 0f       	add	r28, r28
     c8e:	dd 1f       	adc	r29, r29
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <spi_read+0x16>
     c94:	9c 2f       	mov	r25, r28
     c96:	90 95       	com	r25
     c98:	89 23       	and	r24, r25
     c9a:	88 b9       	out	0x08, r24	; 8
	spi_xfer(cs_pin, MCP23S08_OPCOD + 0x01);
     c9c:	61 e4       	ldi	r22, 0x41	; 65
     c9e:	81 2f       	mov	r24, r17
     ca0:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_xfer>
	spi_xfer(cs_pin, reg);
     ca4:	60 2f       	mov	r22, r16
     ca6:	81 2f       	mov	r24, r17
     ca8:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_xfer>
	data = spi_xfer(cs_pin, 0xff); // dummy byte
     cac:	6f ef       	ldi	r22, 0xFF	; 255
     cae:	81 2f       	mov	r24, r17
     cb0:	0e 94 f6 05 	call	0xbec	; 0xbec <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
     cb4:	98 b1       	in	r25, 0x08	; 8
     cb6:	c9 2b       	or	r28, r25
     cb8:	c8 b9       	out	0x08, r28	; 8
	
	return (uint8_t)data;
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <spi_gpio>:
	spi_write(SPI_CS1, MCP23S08_GPIO, 0x00);
	spi_write(SPI_CS2, MCP23S08_GPIO, 0x00);
	
}
void spi_gpio(uint8_t io_pin, uint8_t val)
{
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	16 2f       	mov	r17, r22
	uint8_t cs_pin = ( io_pin >> 4 ) & 0x01;
     ccc:	84 fb       	bst	r24, 4
     cce:	dd 27       	eor	r29, r29
     cd0:	d0 f9       	bld	r29, 0
	
	if ( cs_pin == 0 ) cs_pin = SPI_CS2; // U2
	if ( cs_pin == 1 ) cs_pin = SPI_CS1; // U1
	
	io_pin &= 0x0f;
     cd2:	c8 2f       	mov	r28, r24
     cd4:	cf 70       	andi	r28, 0x0F	; 15
	
	uint8_t data = spi_read(cs_pin, MCP23S08_GPIO);
     cd6:	69 e0       	ldi	r22, 0x09	; 9
     cd8:	8d 2f       	mov	r24, r29
     cda:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_read>

	if ( val )
     cde:	11 23       	and	r17, r17
     ce0:	69 f0       	breq	.+26     	; 0xcfc <spi_gpio+0x38>
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data | ( 1 << io_pin ) ) );
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <spi_gpio+0x28>
     ce8:	44 0f       	add	r20, r20
     cea:	55 1f       	adc	r21, r21
     cec:	ca 95       	dec	r28
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <spi_gpio+0x24>
     cf0:	48 2b       	or	r20, r24
     cf2:	69 e0       	ldi	r22, 0x09	; 9
     cf4:	8d 2f       	mov	r24, r29
     cf6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <spi_write>
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <spi_gpio+0x54>
	}
	else
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <spi_gpio+0x42>
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	ca 95       	dec	r28
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <spi_gpio+0x3e>
     d0a:	20 95       	com	r18
     d0c:	42 2f       	mov	r20, r18
     d0e:	48 23       	and	r20, r24
     d10:	69 e0       	ldi	r22, 0x09	; 9
     d12:	8d 2f       	mov	r24, r29
     d14:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <spi_write>
	}
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	08 95       	ret

00000d20 <sprintf>:
     d20:	ae e0       	ldi	r26, 0x0E	; 14
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e6 e9       	ldi	r30, 0x96	; 150
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__prologue_saves__+0x1c>
     d2c:	0d 89       	ldd	r16, Y+21	; 0x15
     d2e:	1e 89       	ldd	r17, Y+22	; 0x16
     d30:	86 e0       	ldi	r24, 0x06	; 6
     d32:	8c 83       	std	Y+4, r24	; 0x04
     d34:	1a 83       	std	Y+2, r17	; 0x02
     d36:	09 83       	std	Y+1, r16	; 0x01
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	9f e7       	ldi	r25, 0x7F	; 127
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	ae 01       	movw	r20, r28
     d42:	47 5e       	subi	r20, 0xE7	; 231
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	6f 89       	ldd	r22, Y+23	; 0x17
     d48:	78 8d       	ldd	r23, Y+24	; 0x18
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	0e 94 b2 06 	call	0xd64	; 0xd64 <vfprintf>
     d52:	ef 81       	ldd	r30, Y+7	; 0x07
     d54:	f8 85       	ldd	r31, Y+8	; 0x08
     d56:	e0 0f       	add	r30, r16
     d58:	f1 1f       	adc	r31, r17
     d5a:	10 82       	st	Z, r1
     d5c:	2e 96       	adiw	r28, 0x0e	; 14
     d5e:	e4 e0       	ldi	r30, 0x04	; 4
     d60:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__epilogue_restores__+0x1c>

00000d64 <vfprintf>:
     d64:	ab e0       	ldi	r26, 0x0B	; 11
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e8 eb       	ldi	r30, 0xB8	; 184
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__prologue_saves__>
     d70:	6c 01       	movw	r12, r24
     d72:	7b 01       	movw	r14, r22
     d74:	8a 01       	movw	r16, r20
     d76:	fc 01       	movw	r30, r24
     d78:	17 82       	std	Z+7, r1	; 0x07
     d7a:	16 82       	std	Z+6, r1	; 0x06
     d7c:	83 81       	ldd	r24, Z+3	; 0x03
     d7e:	81 ff       	sbrs	r24, 1
     d80:	cc c1       	rjmp	.+920    	; 0x111a <vfprintf+0x3b6>
     d82:	ce 01       	movw	r24, r28
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	3c 01       	movw	r6, r24
     d88:	f6 01       	movw	r30, r12
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	f7 01       	movw	r30, r14
     d8e:	93 fd       	sbrc	r25, 3
     d90:	85 91       	lpm	r24, Z+
     d92:	93 ff       	sbrs	r25, 3
     d94:	81 91       	ld	r24, Z+
     d96:	7f 01       	movw	r14, r30
     d98:	88 23       	and	r24, r24
     d9a:	09 f4       	brne	.+2      	; 0xd9e <vfprintf+0x3a>
     d9c:	ba c1       	rjmp	.+884    	; 0x1112 <vfprintf+0x3ae>
     d9e:	85 32       	cpi	r24, 0x25	; 37
     da0:	39 f4       	brne	.+14     	; 0xdb0 <vfprintf+0x4c>
     da2:	93 fd       	sbrc	r25, 3
     da4:	85 91       	lpm	r24, Z+
     da6:	93 ff       	sbrs	r25, 3
     da8:	81 91       	ld	r24, Z+
     daa:	7f 01       	movw	r14, r30
     dac:	85 32       	cpi	r24, 0x25	; 37
     dae:	29 f4       	brne	.+10     	; 0xdba <vfprintf+0x56>
     db0:	b6 01       	movw	r22, r12
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
     db8:	e7 cf       	rjmp	.-50     	; 0xd88 <vfprintf+0x24>
     dba:	91 2c       	mov	r9, r1
     dbc:	21 2c       	mov	r2, r1
     dbe:	31 2c       	mov	r3, r1
     dc0:	ff e1       	ldi	r31, 0x1F	; 31
     dc2:	f3 15       	cp	r31, r3
     dc4:	d8 f0       	brcs	.+54     	; 0xdfc <vfprintf+0x98>
     dc6:	8b 32       	cpi	r24, 0x2B	; 43
     dc8:	79 f0       	breq	.+30     	; 0xde8 <vfprintf+0x84>
     dca:	38 f4       	brcc	.+14     	; 0xdda <vfprintf+0x76>
     dcc:	80 32       	cpi	r24, 0x20	; 32
     dce:	79 f0       	breq	.+30     	; 0xdee <vfprintf+0x8a>
     dd0:	83 32       	cpi	r24, 0x23	; 35
     dd2:	a1 f4       	brne	.+40     	; 0xdfc <vfprintf+0x98>
     dd4:	23 2d       	mov	r18, r3
     dd6:	20 61       	ori	r18, 0x10	; 16
     dd8:	1d c0       	rjmp	.+58     	; 0xe14 <vfprintf+0xb0>
     dda:	8d 32       	cpi	r24, 0x2D	; 45
     ddc:	61 f0       	breq	.+24     	; 0xdf6 <vfprintf+0x92>
     dde:	80 33       	cpi	r24, 0x30	; 48
     de0:	69 f4       	brne	.+26     	; 0xdfc <vfprintf+0x98>
     de2:	23 2d       	mov	r18, r3
     de4:	21 60       	ori	r18, 0x01	; 1
     de6:	16 c0       	rjmp	.+44     	; 0xe14 <vfprintf+0xb0>
     de8:	83 2d       	mov	r24, r3
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	38 2e       	mov	r3, r24
     dee:	e3 2d       	mov	r30, r3
     df0:	e4 60       	ori	r30, 0x04	; 4
     df2:	3e 2e       	mov	r3, r30
     df4:	2a c0       	rjmp	.+84     	; 0xe4a <vfprintf+0xe6>
     df6:	f3 2d       	mov	r31, r3
     df8:	f8 60       	ori	r31, 0x08	; 8
     dfa:	1d c0       	rjmp	.+58     	; 0xe36 <vfprintf+0xd2>
     dfc:	37 fc       	sbrc	r3, 7
     dfe:	2d c0       	rjmp	.+90     	; 0xe5a <vfprintf+0xf6>
     e00:	20 ed       	ldi	r18, 0xD0	; 208
     e02:	28 0f       	add	r18, r24
     e04:	2a 30       	cpi	r18, 0x0A	; 10
     e06:	40 f0       	brcs	.+16     	; 0xe18 <vfprintf+0xb4>
     e08:	8e 32       	cpi	r24, 0x2E	; 46
     e0a:	b9 f4       	brne	.+46     	; 0xe3a <vfprintf+0xd6>
     e0c:	36 fc       	sbrc	r3, 6
     e0e:	81 c1       	rjmp	.+770    	; 0x1112 <vfprintf+0x3ae>
     e10:	23 2d       	mov	r18, r3
     e12:	20 64       	ori	r18, 0x40	; 64
     e14:	32 2e       	mov	r3, r18
     e16:	19 c0       	rjmp	.+50     	; 0xe4a <vfprintf+0xe6>
     e18:	36 fe       	sbrs	r3, 6
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <vfprintf+0xc4>
     e1c:	8a e0       	ldi	r24, 0x0A	; 10
     e1e:	98 9e       	mul	r9, r24
     e20:	20 0d       	add	r18, r0
     e22:	11 24       	eor	r1, r1
     e24:	92 2e       	mov	r9, r18
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <vfprintf+0xe6>
     e28:	ea e0       	ldi	r30, 0x0A	; 10
     e2a:	2e 9e       	mul	r2, r30
     e2c:	20 0d       	add	r18, r0
     e2e:	11 24       	eor	r1, r1
     e30:	22 2e       	mov	r2, r18
     e32:	f3 2d       	mov	r31, r3
     e34:	f0 62       	ori	r31, 0x20	; 32
     e36:	3f 2e       	mov	r3, r31
     e38:	08 c0       	rjmp	.+16     	; 0xe4a <vfprintf+0xe6>
     e3a:	8c 36       	cpi	r24, 0x6C	; 108
     e3c:	21 f4       	brne	.+8      	; 0xe46 <vfprintf+0xe2>
     e3e:	83 2d       	mov	r24, r3
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	38 2e       	mov	r3, r24
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0xe6>
     e46:	88 36       	cpi	r24, 0x68	; 104
     e48:	41 f4       	brne	.+16     	; 0xe5a <vfprintf+0xf6>
     e4a:	f7 01       	movw	r30, r14
     e4c:	93 fd       	sbrc	r25, 3
     e4e:	85 91       	lpm	r24, Z+
     e50:	93 ff       	sbrs	r25, 3
     e52:	81 91       	ld	r24, Z+
     e54:	7f 01       	movw	r14, r30
     e56:	81 11       	cpse	r24, r1
     e58:	b3 cf       	rjmp	.-154    	; 0xdc0 <vfprintf+0x5c>
     e5a:	98 2f       	mov	r25, r24
     e5c:	9f 7d       	andi	r25, 0xDF	; 223
     e5e:	95 54       	subi	r25, 0x45	; 69
     e60:	93 30       	cpi	r25, 0x03	; 3
     e62:	28 f4       	brcc	.+10     	; 0xe6e <vfprintf+0x10a>
     e64:	0c 5f       	subi	r16, 0xFC	; 252
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	9f e3       	ldi	r25, 0x3F	; 63
     e6a:	99 83       	std	Y+1, r25	; 0x01
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <vfprintf+0x124>
     e6e:	83 36       	cpi	r24, 0x63	; 99
     e70:	31 f0       	breq	.+12     	; 0xe7e <vfprintf+0x11a>
     e72:	83 37       	cpi	r24, 0x73	; 115
     e74:	71 f0       	breq	.+28     	; 0xe92 <vfprintf+0x12e>
     e76:	83 35       	cpi	r24, 0x53	; 83
     e78:	09 f0       	breq	.+2      	; 0xe7c <vfprintf+0x118>
     e7a:	59 c0       	rjmp	.+178    	; 0xf2e <vfprintf+0x1ca>
     e7c:	21 c0       	rjmp	.+66     	; 0xec0 <vfprintf+0x15c>
     e7e:	f8 01       	movw	r30, r16
     e80:	80 81       	ld	r24, Z
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	0e 5f       	subi	r16, 0xFE	; 254
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	88 24       	eor	r8, r8
     e8a:	83 94       	inc	r8
     e8c:	91 2c       	mov	r9, r1
     e8e:	53 01       	movw	r10, r6
     e90:	13 c0       	rjmp	.+38     	; 0xeb8 <vfprintf+0x154>
     e92:	28 01       	movw	r4, r16
     e94:	f2 e0       	ldi	r31, 0x02	; 2
     e96:	4f 0e       	add	r4, r31
     e98:	51 1c       	adc	r5, r1
     e9a:	f8 01       	movw	r30, r16
     e9c:	a0 80       	ld	r10, Z
     e9e:	b1 80       	ldd	r11, Z+1	; 0x01
     ea0:	36 fe       	sbrs	r3, 6
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <vfprintf+0x146>
     ea4:	69 2d       	mov	r22, r9
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0x14a>
     eaa:	6f ef       	ldi	r22, 0xFF	; 255
     eac:	7f ef       	ldi	r23, 0xFF	; 255
     eae:	c5 01       	movw	r24, r10
     eb0:	0e 94 9e 08 	call	0x113c	; 0x113c <strnlen>
     eb4:	4c 01       	movw	r8, r24
     eb6:	82 01       	movw	r16, r4
     eb8:	f3 2d       	mov	r31, r3
     eba:	ff 77       	andi	r31, 0x7F	; 127
     ebc:	3f 2e       	mov	r3, r31
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <vfprintf+0x188>
     ec0:	28 01       	movw	r4, r16
     ec2:	22 e0       	ldi	r18, 0x02	; 2
     ec4:	42 0e       	add	r4, r18
     ec6:	51 1c       	adc	r5, r1
     ec8:	f8 01       	movw	r30, r16
     eca:	a0 80       	ld	r10, Z
     ecc:	b1 80       	ldd	r11, Z+1	; 0x01
     ece:	36 fe       	sbrs	r3, 6
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <vfprintf+0x174>
     ed2:	69 2d       	mov	r22, r9
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x178>
     ed8:	6f ef       	ldi	r22, 0xFF	; 255
     eda:	7f ef       	ldi	r23, 0xFF	; 255
     edc:	c5 01       	movw	r24, r10
     ede:	0e 94 93 08 	call	0x1126	; 0x1126 <strnlen_P>
     ee2:	4c 01       	movw	r8, r24
     ee4:	f3 2d       	mov	r31, r3
     ee6:	f0 68       	ori	r31, 0x80	; 128
     ee8:	3f 2e       	mov	r3, r31
     eea:	82 01       	movw	r16, r4
     eec:	33 fc       	sbrc	r3, 3
     eee:	1b c0       	rjmp	.+54     	; 0xf26 <vfprintf+0x1c2>
     ef0:	82 2d       	mov	r24, r2
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	88 16       	cp	r8, r24
     ef6:	99 06       	cpc	r9, r25
     ef8:	b0 f4       	brcc	.+44     	; 0xf26 <vfprintf+0x1c2>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e2       	ldi	r24, 0x20	; 32
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
     f04:	2a 94       	dec	r2
     f06:	f4 cf       	rjmp	.-24     	; 0xef0 <vfprintf+0x18c>
     f08:	f5 01       	movw	r30, r10
     f0a:	37 fc       	sbrc	r3, 7
     f0c:	85 91       	lpm	r24, Z+
     f0e:	37 fe       	sbrs	r3, 7
     f10:	81 91       	ld	r24, Z+
     f12:	5f 01       	movw	r10, r30
     f14:	b6 01       	movw	r22, r12
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
     f1c:	21 10       	cpse	r2, r1
     f1e:	2a 94       	dec	r2
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	82 1a       	sub	r8, r18
     f24:	91 08       	sbc	r9, r1
     f26:	81 14       	cp	r8, r1
     f28:	91 04       	cpc	r9, r1
     f2a:	71 f7       	brne	.-36     	; 0xf08 <vfprintf+0x1a4>
     f2c:	e8 c0       	rjmp	.+464    	; 0x10fe <vfprintf+0x39a>
     f2e:	84 36       	cpi	r24, 0x64	; 100
     f30:	11 f0       	breq	.+4      	; 0xf36 <vfprintf+0x1d2>
     f32:	89 36       	cpi	r24, 0x69	; 105
     f34:	41 f5       	brne	.+80     	; 0xf86 <vfprintf+0x222>
     f36:	f8 01       	movw	r30, r16
     f38:	37 fe       	sbrs	r3, 7
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <vfprintf+0x1e6>
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	0c 5f       	subi	r16, 0xFC	; 252
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	08 c0       	rjmp	.+16     	; 0xf5a <vfprintf+0x1f6>
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	07 2e       	mov	r0, r23
     f50:	00 0c       	add	r0, r0
     f52:	88 0b       	sbc	r24, r24
     f54:	99 0b       	sbc	r25, r25
     f56:	0e 5f       	subi	r16, 0xFE	; 254
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	f3 2d       	mov	r31, r3
     f5c:	ff 76       	andi	r31, 0x6F	; 111
     f5e:	3f 2e       	mov	r3, r31
     f60:	97 ff       	sbrs	r25, 7
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <vfprintf+0x212>
     f64:	90 95       	com	r25
     f66:	80 95       	com	r24
     f68:	70 95       	com	r23
     f6a:	61 95       	neg	r22
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	f0 68       	ori	r31, 0x80	; 128
     f74:	3f 2e       	mov	r3, r31
     f76:	2a e0       	ldi	r18, 0x0A	; 10
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	a3 01       	movw	r20, r6
     f7c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__ultoa_invert>
     f80:	88 2e       	mov	r8, r24
     f82:	86 18       	sub	r8, r6
     f84:	45 c0       	rjmp	.+138    	; 0x1010 <vfprintf+0x2ac>
     f86:	85 37       	cpi	r24, 0x75	; 117
     f88:	31 f4       	brne	.+12     	; 0xf96 <vfprintf+0x232>
     f8a:	23 2d       	mov	r18, r3
     f8c:	2f 7e       	andi	r18, 0xEF	; 239
     f8e:	b2 2e       	mov	r11, r18
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	25 c0       	rjmp	.+74     	; 0xfe0 <vfprintf+0x27c>
     f96:	93 2d       	mov	r25, r3
     f98:	99 7f       	andi	r25, 0xF9	; 249
     f9a:	b9 2e       	mov	r11, r25
     f9c:	8f 36       	cpi	r24, 0x6F	; 111
     f9e:	c1 f0       	breq	.+48     	; 0xfd0 <vfprintf+0x26c>
     fa0:	18 f4       	brcc	.+6      	; 0xfa8 <vfprintf+0x244>
     fa2:	88 35       	cpi	r24, 0x58	; 88
     fa4:	79 f0       	breq	.+30     	; 0xfc4 <vfprintf+0x260>
     fa6:	b5 c0       	rjmp	.+362    	; 0x1112 <vfprintf+0x3ae>
     fa8:	80 37       	cpi	r24, 0x70	; 112
     faa:	19 f0       	breq	.+6      	; 0xfb2 <vfprintf+0x24e>
     fac:	88 37       	cpi	r24, 0x78	; 120
     fae:	21 f0       	breq	.+8      	; 0xfb8 <vfprintf+0x254>
     fb0:	b0 c0       	rjmp	.+352    	; 0x1112 <vfprintf+0x3ae>
     fb2:	e9 2f       	mov	r30, r25
     fb4:	e0 61       	ori	r30, 0x10	; 16
     fb6:	be 2e       	mov	r11, r30
     fb8:	b4 fe       	sbrs	r11, 4
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <vfprintf+0x272>
     fbc:	fb 2d       	mov	r31, r11
     fbe:	f4 60       	ori	r31, 0x04	; 4
     fc0:	bf 2e       	mov	r11, r31
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x272>
     fc4:	34 fe       	sbrs	r3, 4
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <vfprintf+0x278>
     fc8:	29 2f       	mov	r18, r25
     fca:	26 60       	ori	r18, 0x06	; 6
     fcc:	b2 2e       	mov	r11, r18
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <vfprintf+0x278>
     fd0:	28 e0       	ldi	r18, 0x08	; 8
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <vfprintf+0x27c>
     fd6:	20 e1       	ldi	r18, 0x10	; 16
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <vfprintf+0x27c>
     fdc:	20 e1       	ldi	r18, 0x10	; 16
     fde:	32 e0       	ldi	r19, 0x02	; 2
     fe0:	f8 01       	movw	r30, r16
     fe2:	b7 fe       	sbrs	r11, 7
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <vfprintf+0x290>
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	0c 5f       	subi	r16, 0xFC	; 252
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x29c>
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 5f       	subi	r16, 0xFE	; 254
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	a3 01       	movw	r20, r6
    1002:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__ultoa_invert>
    1006:	88 2e       	mov	r8, r24
    1008:	86 18       	sub	r8, r6
    100a:	fb 2d       	mov	r31, r11
    100c:	ff 77       	andi	r31, 0x7F	; 127
    100e:	3f 2e       	mov	r3, r31
    1010:	36 fe       	sbrs	r3, 6
    1012:	0d c0       	rjmp	.+26     	; 0x102e <vfprintf+0x2ca>
    1014:	23 2d       	mov	r18, r3
    1016:	2e 7f       	andi	r18, 0xFE	; 254
    1018:	a2 2e       	mov	r10, r18
    101a:	89 14       	cp	r8, r9
    101c:	58 f4       	brcc	.+22     	; 0x1034 <vfprintf+0x2d0>
    101e:	34 fe       	sbrs	r3, 4
    1020:	0b c0       	rjmp	.+22     	; 0x1038 <vfprintf+0x2d4>
    1022:	32 fc       	sbrc	r3, 2
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <vfprintf+0x2d4>
    1026:	83 2d       	mov	r24, r3
    1028:	8e 7e       	andi	r24, 0xEE	; 238
    102a:	a8 2e       	mov	r10, r24
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <vfprintf+0x2d4>
    102e:	b8 2c       	mov	r11, r8
    1030:	a3 2c       	mov	r10, r3
    1032:	03 c0       	rjmp	.+6      	; 0x103a <vfprintf+0x2d6>
    1034:	b8 2c       	mov	r11, r8
    1036:	01 c0       	rjmp	.+2      	; 0x103a <vfprintf+0x2d6>
    1038:	b9 2c       	mov	r11, r9
    103a:	a4 fe       	sbrs	r10, 4
    103c:	0f c0       	rjmp	.+30     	; 0x105c <vfprintf+0x2f8>
    103e:	fe 01       	movw	r30, r28
    1040:	e8 0d       	add	r30, r8
    1042:	f1 1d       	adc	r31, r1
    1044:	80 81       	ld	r24, Z
    1046:	80 33       	cpi	r24, 0x30	; 48
    1048:	21 f4       	brne	.+8      	; 0x1052 <vfprintf+0x2ee>
    104a:	9a 2d       	mov	r25, r10
    104c:	99 7e       	andi	r25, 0xE9	; 233
    104e:	a9 2e       	mov	r10, r25
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <vfprintf+0x300>
    1052:	a2 fe       	sbrs	r10, 2
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <vfprintf+0x2fe>
    1056:	b3 94       	inc	r11
    1058:	b3 94       	inc	r11
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <vfprintf+0x300>
    105c:	8a 2d       	mov	r24, r10
    105e:	86 78       	andi	r24, 0x86	; 134
    1060:	09 f0       	breq	.+2      	; 0x1064 <vfprintf+0x300>
    1062:	b3 94       	inc	r11
    1064:	a3 fc       	sbrc	r10, 3
    1066:	11 c0       	rjmp	.+34     	; 0x108a <vfprintf+0x326>
    1068:	a0 fe       	sbrs	r10, 0
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0x314>
    106c:	b2 14       	cp	r11, r2
    106e:	88 f4       	brcc	.+34     	; 0x1092 <vfprintf+0x32e>
    1070:	28 0c       	add	r2, r8
    1072:	92 2c       	mov	r9, r2
    1074:	9b 18       	sub	r9, r11
    1076:	0e c0       	rjmp	.+28     	; 0x1094 <vfprintf+0x330>
    1078:	b2 14       	cp	r11, r2
    107a:	60 f4       	brcc	.+24     	; 0x1094 <vfprintf+0x330>
    107c:	b6 01       	movw	r22, r12
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
    1086:	b3 94       	inc	r11
    1088:	f7 cf       	rjmp	.-18     	; 0x1078 <vfprintf+0x314>
    108a:	b2 14       	cp	r11, r2
    108c:	18 f4       	brcc	.+6      	; 0x1094 <vfprintf+0x330>
    108e:	2b 18       	sub	r2, r11
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x332>
    1092:	98 2c       	mov	r9, r8
    1094:	21 2c       	mov	r2, r1
    1096:	a4 fe       	sbrs	r10, 4
    1098:	10 c0       	rjmp	.+32     	; 0x10ba <vfprintf+0x356>
    109a:	b6 01       	movw	r22, r12
    109c:	80 e3       	ldi	r24, 0x30	; 48
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
    10a4:	a2 fe       	sbrs	r10, 2
    10a6:	17 c0       	rjmp	.+46     	; 0x10d6 <vfprintf+0x372>
    10a8:	a1 fc       	sbrc	r10, 1
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <vfprintf+0x34e>
    10ac:	88 e7       	ldi	r24, 0x78	; 120
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <vfprintf+0x352>
    10b2:	88 e5       	ldi	r24, 0x58	; 88
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	b6 01       	movw	r22, r12
    10b8:	0c c0       	rjmp	.+24     	; 0x10d2 <vfprintf+0x36e>
    10ba:	8a 2d       	mov	r24, r10
    10bc:	86 78       	andi	r24, 0x86	; 134
    10be:	59 f0       	breq	.+22     	; 0x10d6 <vfprintf+0x372>
    10c0:	a1 fe       	sbrs	r10, 1
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <vfprintf+0x364>
    10c4:	8b e2       	ldi	r24, 0x2B	; 43
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <vfprintf+0x366>
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	a7 fc       	sbrc	r10, 7
    10cc:	8d e2       	ldi	r24, 0x2D	; 45
    10ce:	b6 01       	movw	r22, r12
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
    10d6:	89 14       	cp	r8, r9
    10d8:	38 f4       	brcc	.+14     	; 0x10e8 <vfprintf+0x384>
    10da:	b6 01       	movw	r22, r12
    10dc:	80 e3       	ldi	r24, 0x30	; 48
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
    10e4:	9a 94       	dec	r9
    10e6:	f7 cf       	rjmp	.-18     	; 0x10d6 <vfprintf+0x372>
    10e8:	8a 94       	dec	r8
    10ea:	f3 01       	movw	r30, r6
    10ec:	e8 0d       	add	r30, r8
    10ee:	f1 1d       	adc	r31, r1
    10f0:	80 81       	ld	r24, Z
    10f2:	b6 01       	movw	r22, r12
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
    10fa:	81 10       	cpse	r8, r1
    10fc:	f5 cf       	rjmp	.-22     	; 0x10e8 <vfprintf+0x384>
    10fe:	22 20       	and	r2, r2
    1100:	09 f4       	brne	.+2      	; 0x1104 <vfprintf+0x3a0>
    1102:	42 ce       	rjmp	.-892    	; 0xd88 <vfprintf+0x24>
    1104:	b6 01       	movw	r22, r12
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 a9 08 	call	0x1152	; 0x1152 <fputc>
    110e:	2a 94       	dec	r2
    1110:	f6 cf       	rjmp	.-20     	; 0x10fe <vfprintf+0x39a>
    1112:	f6 01       	movw	r30, r12
    1114:	86 81       	ldd	r24, Z+6	; 0x06
    1116:	97 81       	ldd	r25, Z+7	; 0x07
    1118:	02 c0       	rjmp	.+4      	; 0x111e <vfprintf+0x3ba>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	2b 96       	adiw	r28, 0x0b	; 11
    1120:	e2 e1       	ldi	r30, 0x12	; 18
    1122:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__epilogue_restores__>

00001126 <strnlen_P>:
    1126:	fc 01       	movw	r30, r24
    1128:	05 90       	lpm	r0, Z+
    112a:	61 50       	subi	r22, 0x01	; 1
    112c:	70 40       	sbci	r23, 0x00	; 0
    112e:	01 10       	cpse	r0, r1
    1130:	d8 f7       	brcc	.-10     	; 0x1128 <strnlen_P+0x2>
    1132:	80 95       	com	r24
    1134:	90 95       	com	r25
    1136:	8e 0f       	add	r24, r30
    1138:	9f 1f       	adc	r25, r31
    113a:	08 95       	ret

0000113c <strnlen>:
    113c:	fc 01       	movw	r30, r24
    113e:	61 50       	subi	r22, 0x01	; 1
    1140:	70 40       	sbci	r23, 0x00	; 0
    1142:	01 90       	ld	r0, Z+
    1144:	01 10       	cpse	r0, r1
    1146:	d8 f7       	brcc	.-10     	; 0x113e <strnlen+0x2>
    1148:	80 95       	com	r24
    114a:	90 95       	com	r25
    114c:	8e 0f       	add	r24, r30
    114e:	9f 1f       	adc	r25, r31
    1150:	08 95       	ret

00001152 <fputc>:
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	fb 01       	movw	r30, r22
    115c:	23 81       	ldd	r18, Z+3	; 0x03
    115e:	21 fd       	sbrc	r18, 1
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <fputc+0x16>
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	9f ef       	ldi	r25, 0xFF	; 255
    1166:	2c c0       	rjmp	.+88     	; 0x11c0 <fputc+0x6e>
    1168:	22 ff       	sbrs	r18, 2
    116a:	16 c0       	rjmp	.+44     	; 0x1198 <fputc+0x46>
    116c:	46 81       	ldd	r20, Z+6	; 0x06
    116e:	57 81       	ldd	r21, Z+7	; 0x07
    1170:	24 81       	ldd	r18, Z+4	; 0x04
    1172:	35 81       	ldd	r19, Z+5	; 0x05
    1174:	42 17       	cp	r20, r18
    1176:	53 07       	cpc	r21, r19
    1178:	44 f4       	brge	.+16     	; 0x118a <fputc+0x38>
    117a:	a0 81       	ld	r26, Z
    117c:	b1 81       	ldd	r27, Z+1	; 0x01
    117e:	9d 01       	movw	r18, r26
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	31 83       	std	Z+1, r19	; 0x01
    1186:	20 83       	st	Z, r18
    1188:	8c 93       	st	X, r24
    118a:	26 81       	ldd	r18, Z+6	; 0x06
    118c:	37 81       	ldd	r19, Z+7	; 0x07
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	37 83       	std	Z+7, r19	; 0x07
    1194:	26 83       	std	Z+6, r18	; 0x06
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <fputc+0x6e>
    1198:	8b 01       	movw	r16, r22
    119a:	ec 01       	movw	r28, r24
    119c:	fb 01       	movw	r30, r22
    119e:	00 84       	ldd	r0, Z+8	; 0x08
    11a0:	f1 85       	ldd	r31, Z+9	; 0x09
    11a2:	e0 2d       	mov	r30, r0
    11a4:	09 95       	icall
    11a6:	89 2b       	or	r24, r25
    11a8:	e1 f6       	brne	.-72     	; 0x1162 <fputc+0x10>
    11aa:	d8 01       	movw	r26, r16
    11ac:	16 96       	adiw	r26, 0x06	; 6
    11ae:	8d 91       	ld	r24, X+
    11b0:	9c 91       	ld	r25, X
    11b2:	17 97       	sbiw	r26, 0x07	; 7
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	17 96       	adiw	r26, 0x07	; 7
    11b8:	9c 93       	st	X, r25
    11ba:	8e 93       	st	-X, r24
    11bc:	16 97       	sbiw	r26, 0x06	; 6
    11be:	ce 01       	movw	r24, r28
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <__ultoa_invert>:
    11ca:	fa 01       	movw	r30, r20
    11cc:	aa 27       	eor	r26, r26
    11ce:	28 30       	cpi	r18, 0x08	; 8
    11d0:	51 f1       	breq	.+84     	; 0x1226 <__ultoa_invert+0x5c>
    11d2:	20 31       	cpi	r18, 0x10	; 16
    11d4:	81 f1       	breq	.+96     	; 0x1236 <__ultoa_invert+0x6c>
    11d6:	e8 94       	clt
    11d8:	6f 93       	push	r22
    11da:	6e 7f       	andi	r22, 0xFE	; 254
    11dc:	6e 5f       	subi	r22, 0xFE	; 254
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	af 4f       	sbci	r26, 0xFF	; 255
    11e6:	b1 e0       	ldi	r27, 0x01	; 1
    11e8:	3e d0       	rcall	.+124    	; 0x1266 <__ultoa_invert+0x9c>
    11ea:	b4 e0       	ldi	r27, 0x04	; 4
    11ec:	3c d0       	rcall	.+120    	; 0x1266 <__ultoa_invert+0x9c>
    11ee:	67 0f       	add	r22, r23
    11f0:	78 1f       	adc	r23, r24
    11f2:	89 1f       	adc	r24, r25
    11f4:	9a 1f       	adc	r25, r26
    11f6:	a1 1d       	adc	r26, r1
    11f8:	68 0f       	add	r22, r24
    11fa:	79 1f       	adc	r23, r25
    11fc:	8a 1f       	adc	r24, r26
    11fe:	91 1d       	adc	r25, r1
    1200:	a1 1d       	adc	r26, r1
    1202:	6a 0f       	add	r22, r26
    1204:	71 1d       	adc	r23, r1
    1206:	81 1d       	adc	r24, r1
    1208:	91 1d       	adc	r25, r1
    120a:	a1 1d       	adc	r26, r1
    120c:	20 d0       	rcall	.+64     	; 0x124e <__ultoa_invert+0x84>
    120e:	09 f4       	brne	.+2      	; 0x1212 <__ultoa_invert+0x48>
    1210:	68 94       	set
    1212:	3f 91       	pop	r19
    1214:	2a e0       	ldi	r18, 0x0A	; 10
    1216:	26 9f       	mul	r18, r22
    1218:	11 24       	eor	r1, r1
    121a:	30 19       	sub	r19, r0
    121c:	30 5d       	subi	r19, 0xD0	; 208
    121e:	31 93       	st	Z+, r19
    1220:	de f6       	brtc	.-74     	; 0x11d8 <__ultoa_invert+0xe>
    1222:	cf 01       	movw	r24, r30
    1224:	08 95       	ret
    1226:	46 2f       	mov	r20, r22
    1228:	47 70       	andi	r20, 0x07	; 7
    122a:	40 5d       	subi	r20, 0xD0	; 208
    122c:	41 93       	st	Z+, r20
    122e:	b3 e0       	ldi	r27, 0x03	; 3
    1230:	0f d0       	rcall	.+30     	; 0x1250 <__ultoa_invert+0x86>
    1232:	c9 f7       	brne	.-14     	; 0x1226 <__ultoa_invert+0x5c>
    1234:	f6 cf       	rjmp	.-20     	; 0x1222 <__ultoa_invert+0x58>
    1236:	46 2f       	mov	r20, r22
    1238:	4f 70       	andi	r20, 0x0F	; 15
    123a:	40 5d       	subi	r20, 0xD0	; 208
    123c:	4a 33       	cpi	r20, 0x3A	; 58
    123e:	18 f0       	brcs	.+6      	; 0x1246 <__ultoa_invert+0x7c>
    1240:	49 5d       	subi	r20, 0xD9	; 217
    1242:	31 fd       	sbrc	r19, 1
    1244:	40 52       	subi	r20, 0x20	; 32
    1246:	41 93       	st	Z+, r20
    1248:	02 d0       	rcall	.+4      	; 0x124e <__ultoa_invert+0x84>
    124a:	a9 f7       	brne	.-22     	; 0x1236 <__ultoa_invert+0x6c>
    124c:	ea cf       	rjmp	.-44     	; 0x1222 <__ultoa_invert+0x58>
    124e:	b4 e0       	ldi	r27, 0x04	; 4
    1250:	a6 95       	lsr	r26
    1252:	97 95       	ror	r25
    1254:	87 95       	ror	r24
    1256:	77 95       	ror	r23
    1258:	67 95       	ror	r22
    125a:	ba 95       	dec	r27
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__ultoa_invert+0x86>
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 05       	cpc	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	08 95       	ret
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	0a 2e       	mov	r0, r26
    126c:	06 94       	lsr	r0
    126e:	57 95       	ror	r21
    1270:	47 95       	ror	r20
    1272:	37 95       	ror	r19
    1274:	27 95       	ror	r18
    1276:	ba 95       	dec	r27
    1278:	c9 f7       	brne	.-14     	; 0x126c <__ultoa_invert+0xa2>
    127a:	62 0f       	add	r22, r18
    127c:	73 1f       	adc	r23, r19
    127e:	84 1f       	adc	r24, r20
    1280:	95 1f       	adc	r25, r21
    1282:	a0 1d       	adc	r26, r0
    1284:	08 95       	ret

00001286 <eeprom_read_byte>:
    1286:	f9 99       	sbic	0x1f, 1	; 31
    1288:	fe cf       	rjmp	.-4      	; 0x1286 <eeprom_read_byte>
    128a:	92 bd       	out	0x22, r25	; 34
    128c:	81 bd       	out	0x21, r24	; 33
    128e:	f8 9a       	sbi	0x1f, 0	; 31
    1290:	99 27       	eor	r25, r25
    1292:	80 b5       	in	r24, 0x20	; 32
    1294:	08 95       	ret

00001296 <__prologue_saves__>:
    1296:	2f 92       	push	r2
    1298:	3f 92       	push	r3
    129a:	4f 92       	push	r4
    129c:	5f 92       	push	r5
    129e:	6f 92       	push	r6
    12a0:	7f 92       	push	r7
    12a2:	8f 92       	push	r8
    12a4:	9f 92       	push	r9
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	ca 1b       	sub	r28, r26
    12c0:	db 0b       	sbc	r29, r27
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	09 94       	ijmp

000012ce <__epilogue_restores__>:
    12ce:	2a 88       	ldd	r2, Y+18	; 0x12
    12d0:	39 88       	ldd	r3, Y+17	; 0x11
    12d2:	48 88       	ldd	r4, Y+16	; 0x10
    12d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12da:	8c 84       	ldd	r8, Y+12	; 0x0c
    12dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12de:	aa 84       	ldd	r10, Y+10	; 0x0a
    12e0:	b9 84       	ldd	r11, Y+9	; 0x09
    12e2:	c8 84       	ldd	r12, Y+8	; 0x08
    12e4:	df 80       	ldd	r13, Y+7	; 0x07
    12e6:	ee 80       	ldd	r14, Y+6	; 0x06
    12e8:	fd 80       	ldd	r15, Y+5	; 0x05
    12ea:	0c 81       	ldd	r16, Y+4	; 0x04
    12ec:	1b 81       	ldd	r17, Y+3	; 0x03
    12ee:	aa 81       	ldd	r26, Y+2	; 0x02
    12f0:	b9 81       	ldd	r27, Y+1	; 0x01
    12f2:	ce 0f       	add	r28, r30
    12f4:	d1 1d       	adc	r29, r1
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	ed 01       	movw	r28, r26
    1302:	08 95       	ret

00001304 <_exit>:
    1304:	f8 94       	cli

00001306 <__stop_program>:
    1306:	ff cf       	rjmp	.-2      	; 0x1306 <__stop_program>
