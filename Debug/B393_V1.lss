
B393_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001030  000010c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800132  00800132  000010f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001190  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001506  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab9  00000000  00000000  000027e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1e  00000000  00000000  0000329f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00003ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1c  00000000  00000000  000049b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000053ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_1>
       8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_2>
       c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_3>
      10:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_4>
      14:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 35       	cpi	r26, 0x53	; 83
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 83 04 	call	0x906	; 0x906 <main>
      9e:	0c 94 16 08 	jmp	0x102c	; 0x102c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gpio_send_str>:
// 	spi_gpio(YBI_CLK,	Circ->signal_output[CLK_OUT]);
 	
}

void gpio_do_encoder()
{
      a6:	ac 01       	movw	r20, r24
      a8:	20 e0       	ldi	r18, 0x00	; 0
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	0e c0       	rjmp	.+28     	; 0xca <gpio_send_str+0x24>
      ae:	fa 01       	movw	r30, r20
      b0:	e2 0f       	add	r30, r18
      b2:	f3 1f       	adc	r31, r19
      b4:	90 81       	ld	r25, Z
      b6:	99 23       	and	r25, r25
      b8:	59 f0       	breq	.+22     	; 0xd0 <gpio_send_str+0x2a>
      ba:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      c2:	95 ff       	sbrs	r25, 5
      c4:	fc cf       	rjmp	.-8      	; 0xbe <gpio_send_str+0x18>
      c6:	2f 5f       	subi	r18, 0xFF	; 255
      c8:	3f 4f       	sbci	r19, 0xFF	; 255
      ca:	28 32       	cpi	r18, 0x28	; 40
      cc:	31 05       	cpc	r19, r1
      ce:	7c f3       	brlt	.-34     	; 0xae <gpio_send_str+0x8>
      d0:	08 95       	ret

000000d2 <gpio_do_timer>:
      d2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
      d6:	8f 5f       	subi	r24, 0xFF	; 255
      d8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
      dc:	81 31       	cpi	r24, 0x11	; 17
      de:	30 f0       	brcs	.+12     	; 0xec <gpio_do_timer+0x1a>
      e0:	95 b1       	in	r25, 0x05	; 5
      e2:	84 e0       	ldi	r24, 0x04	; 4
      e4:	89 27       	eor	r24, r25
      e6:	85 b9       	out	0x05, r24	; 5
      e8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
      ec:	87 e1       	ldi	r24, 0x17	; 23
      ee:	9e ef       	ldi	r25, 0xFE	; 254
      f0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      f4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
      f8:	08 95       	ret

000000fa <gpio_do_update>:
      fa:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
      fe:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     102:	83 b1       	in	r24, 0x03	; 3
     104:	81 70       	andi	r24, 0x01	; 1
     106:	80 83       	st	Z, r24
     108:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     10c:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     110:	86 b1       	in	r24, 0x06	; 6
     112:	82 fb       	bst	r24, 2
     114:	88 27       	eor	r24, r24
     116:	80 f9       	bld	r24, 0
     118:	81 83       	std	Z+1, r24	; 0x01
     11a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     11e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     122:	89 b1       	in	r24, 0x09	; 9
     124:	86 fb       	bst	r24, 6
     126:	88 27       	eor	r24, r24
     128:	80 f9       	bld	r24, 0
     12a:	82 83       	std	Z+2, r24	; 0x02
     12c:	89 b1       	in	r24, 0x09	; 9
     12e:	85 fb       	bst	r24, 5
     130:	88 27       	eor	r24, r24
     132:	80 f9       	bld	r24, 0
     134:	83 83       	std	Z+3, r24	; 0x03
     136:	89 b1       	in	r24, 0x09	; 9
     138:	82 95       	swap	r24
     13a:	81 70       	andi	r24, 0x01	; 1
     13c:	84 83       	std	Z+4, r24	; 0x04
     13e:	86 b1       	in	r24, 0x06	; 6
     140:	83 fb       	bst	r24, 3
     142:	88 27       	eor	r24, r24
     144:	80 f9       	bld	r24, 0
     146:	85 83       	std	Z+5, r24	; 0x05
     148:	86 b1       	in	r24, 0x06	; 6
     14a:	85 fb       	bst	r24, 5
     14c:	88 27       	eor	r24, r24
     14e:	80 f9       	bld	r24, 0
     150:	87 83       	std	Z+7, r24	; 0x07
     152:	86 b1       	in	r24, 0x06	; 6
     154:	82 95       	swap	r24
     156:	81 70       	andi	r24, 0x01	; 1
     158:	80 87       	std	Z+8, r24	; 0x08
     15a:	83 b1       	in	r24, 0x03	; 3
     15c:	86 95       	lsr	r24
     15e:	81 70       	andi	r24, 0x01	; 1
     160:	81 87       	std	Z+9, r24	; 0x09
     162:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <circuit_update>
     166:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     16a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     16e:	62 85       	ldd	r22, Z+10	; 0x0a
     170:	83 e1       	ldi	r24, 0x13	; 19
     172:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     176:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     17a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     17e:	63 85       	ldd	r22, Z+11	; 0x0b
     180:	82 e1       	ldi	r24, 0x12	; 18
     182:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     186:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     18a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     18e:	64 85       	ldd	r22, Z+12	; 0x0c
     190:	81 e1       	ldi	r24, 0x11	; 17
     192:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     196:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     19a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     19e:	65 85       	ldd	r22, Z+13	; 0x0d
     1a0:	84 e1       	ldi	r24, 0x14	; 20
     1a2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1a6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     1aa:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     1ae:	66 85       	ldd	r22, Z+14	; 0x0e
     1b0:	85 e1       	ldi	r24, 0x15	; 21
     1b2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1b6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     1ba:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     1be:	67 85       	ldd	r22, Z+15	; 0x0f
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1c6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     1ca:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     1ce:	60 89       	ldd	r22, Z+16	; 0x10
     1d0:	80 e1       	ldi	r24, 0x10	; 16
     1d2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1d6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     1da:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     1de:	61 89       	ldd	r22, Z+17	; 0x11
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1ee:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     1f2:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     1f6:	62 89       	ldd	r22, Z+18	; 0x12
     1f8:	84 e0       	ldi	r24, 0x04	; 4
     1fa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     1fe:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     202:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     206:	63 89       	ldd	r22, Z+19	; 0x13
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     20e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     212:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     216:	64 89       	ldd	r22, Z+20	; 0x14
     218:	86 e1       	ldi	r24, 0x16	; 22
     21a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     21e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     222:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     226:	65 89       	ldd	r22, Z+21	; 0x15
     228:	87 e1       	ldi	r24, 0x17	; 23
     22a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     22e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     232:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     236:	66 89       	ldd	r22, Z+22	; 0x16
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     23e:	08 95       	ret

00000240 <gpio_do_uart_rx>:
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	a8 97       	sbiw	r28, 0x28	; 40
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	08 2f       	mov	r16, r24
     25e:	f8 94       	cli
     260:	fe 01       	movw	r30, r28
     262:	31 96       	adiw	r30, 0x01	; 1
     264:	88 e2       	ldi	r24, 0x28	; 40
     266:	df 01       	movw	r26, r30
     268:	1d 92       	st	X+, r1
     26a:	8a 95       	dec	r24
     26c:	e9 f7       	brne	.-6      	; 0x268 <gpio_do_uart_rx+0x28>
     26e:	80 ed       	ldi	r24, 0xD0	; 208
     270:	80 0f       	add	r24, r16
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	30 f5       	brcc	.+76     	; 0x2c2 <gpio_do_uart_rx+0x82>
     276:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     27a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	00 33       	cpi	r16, 0x30	; 48
     282:	09 f4       	brne	.+2      	; 0x286 <gpio_do_uart_rx+0x46>
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	86 83       	std	Z+6, r24	; 0x06
     288:	0e 94 7d 00 	call	0xfa	; 0xfa <gpio_do_update>
     28c:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     290:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     294:	86 81       	ldd	r24, Z+6	; 0x06
     296:	1f 92       	push	r1
     298:	8f 93       	push	r24
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	9f 93       	push	r25
     2a0:	8f 93       	push	r24
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	7c 01       	movw	r14, r24
     2a8:	9f 93       	push	r25
     2aa:	8f 93       	push	r24
     2ac:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
     2b0:	c7 01       	movw	r24, r14
     2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	02 33       	cpi	r16, 0x32	; 50
     2c4:	b9 f5       	brne	.+110    	; 0x334 <gpio_do_uart_rx+0xf4>
     2c6:	8a e0       	ldi	r24, 0x0A	; 10
     2c8:	e7 e1       	ldi	r30, 0x17	; 23
     2ca:	f1 e0       	ldi	r31, 0x01	; 1
     2cc:	de 01       	movw	r26, r28
     2ce:	11 96       	adiw	r26, 0x01	; 1
     2d0:	01 90       	ld	r0, Z+
     2d2:	0d 92       	st	X+, r0
     2d4:	8a 95       	dec	r24
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <gpio_do_uart_rx+0x90>
     2d8:	ce 01       	movw	r24, r28
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     2e0:	11 e0       	ldi	r17, 0x01	; 1
     2e2:	1e c0       	rjmp	.+60     	; 0x320 <gpio_do_uart_rx+0xe0>
     2e4:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     2e8:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     2ec:	e1 0f       	add	r30, r17
     2ee:	f1 1d       	adc	r31, r1
     2f0:	82 85       	ldd	r24, Z+10	; 0x0a
     2f2:	1f 92       	push	r1
     2f4:	8f 93       	push	r24
     2f6:	81 e2       	ldi	r24, 0x21	; 33
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	9f 93       	push	r25
     2fc:	8f 93       	push	r24
     2fe:	de 01       	movw	r26, r28
     300:	11 96       	adiw	r26, 0x01	; 1
     302:	7d 01       	movw	r14, r26
     304:	bf 93       	push	r27
     306:	af 93       	push	r26
     308:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
     30c:	c7 01       	movw	r24, r14
     30e:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     312:	1f 5f       	subi	r17, 0xFF	; 255
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	16 30       	cpi	r17, 0x06	; 6
     322:	00 f3       	brcs	.-64     	; 0x2e4 <gpio_do_uart_rx+0xa4>
     324:	8a e0       	ldi	r24, 0x0A	; 10
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	9a 83       	std	Y+2, r25	; 0x02
     32a:	89 83       	std	Y+1, r24	; 0x01
     32c:	ce 01       	movw	r24, r28
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     334:	03 33       	cpi	r16, 0x33	; 51
     336:	59 f5       	brne	.+86     	; 0x38e <gpio_do_uart_rx+0x14e>
     338:	1f c0       	rjmp	.+62     	; 0x378 <gpio_do_uart_rx+0x138>
     33a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     33e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     342:	e1 0f       	add	r30, r17
     344:	f1 1d       	adc	r31, r1
     346:	80 81       	ld	r24, Z
     348:	1f 92       	push	r1
     34a:	8f 93       	push	r24
     34c:	81 e2       	ldi	r24, 0x21	; 33
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	9f 93       	push	r25
     352:	8f 93       	push	r24
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	7c 01       	movw	r14, r24
     35a:	9f 93       	push	r25
     35c:	8f 93       	push	r24
     35e:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
     362:	c7 01       	movw	r24, r14
     364:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     368:	1f 5f       	subi	r17, 0xFF	; 255
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	01 c0       	rjmp	.+2      	; 0x37a <gpio_do_uart_rx+0x13a>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	1a 30       	cpi	r17, 0x0A	; 10
     37c:	f0 f2       	brcs	.-68     	; 0x33a <gpio_do_uart_rx+0xfa>
     37e:	8a e0       	ldi	r24, 0x0A	; 10
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	89 83       	std	Y+1, r24	; 0x01
     386:	ce 01       	movw	r24, r28
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     38e:	04 33       	cpi	r16, 0x34	; 52
     390:	d9 f4       	brne	.+54     	; 0x3c8 <gpio_do_uart_rx+0x188>
     392:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     396:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     39a:	83 8d       	ldd	r24, Z+27	; 0x1b
     39c:	1f 92       	push	r1
     39e:	8f 93       	push	r24
     3a0:	85 e2       	ldi	r24, 0x25	; 37
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	8e 01       	movw	r16, r28
     3aa:	0f 5f       	subi	r16, 0xFF	; 255
     3ac:	1f 4f       	sbci	r17, 0xFF	; 255
     3ae:	1f 93       	push	r17
     3b0:	0f 93       	push	r16
     3b2:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
     3b6:	c8 01       	movw	r24, r16
     3b8:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	78 94       	sei
     3ca:	a8 96       	adiw	r28, 0x28	; 40
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	08 95       	ret

000003e4 <gpio_init>:
     3e4:	f8 94       	cli
     3e6:	0e 94 c5 03 	call	0x78a	; 0x78a <circuit_init>
     3ea:	0e 94 c2 03 	call	0x784	; 0x784 <circuit_get_circuit>
     3ee:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <Circ+0x1>
     3f2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Circ>
     3f6:	8c e2       	ldi	r24, 0x2C	; 44
     3f8:	84 b9       	out	0x04, r24	; 4
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	85 b9       	out	0x05, r24	; 5
     3fe:	97 b1       	in	r25, 0x07	; 7
     400:	93 60       	ori	r25, 0x03	; 3
     402:	97 b9       	out	0x07, r25	; 7
     404:	88 b9       	out	0x08, r24	; 8
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	9a b9       	out	0x0a, r25	; 10
     40a:	8b b9       	out	0x0b, r24	; 11
     40c:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_init>
     410:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     414:	88 e0       	ldi	r24, 0x08	; 8
     416:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     41a:	86 e0       	ldi	r24, 0x06	; 6
     41c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     420:	88 e9       	ldi	r24, 0x98	; 152
     422:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     426:	e8 e6       	ldi	r30, 0x68	; 104
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	87 60       	ori	r24, 0x07	; 7
     42e:	80 83       	st	Z, r24
     430:	eb e6       	ldi	r30, 0x6B	; 107
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	83 60       	ori	r24, 0x03	; 3
     438:	80 83       	st	Z, r24
     43a:	ec e6       	ldi	r30, 0x6C	; 108
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	8c 63       	ori	r24, 0x3C	; 60
     442:	80 83       	st	Z, r24
     444:	ed e6       	ldi	r30, 0x6D	; 109
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	80 6f       	ori	r24, 0xF0	; 240
     44c:	80 83       	st	Z, r24
     44e:	87 e1       	ldi	r24, 0x17	; 23
     450:	9e ef       	ldi	r25, 0xFE	; 254
     452:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     456:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     45a:	85 e0       	ldi	r24, 0x05	; 5
     45c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     460:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_gpio>
     472:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     476:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     47a:	12 8a       	std	Z+18, r1	; 0x12
     47c:	13 8a       	std	Z+19, r1	; 0x13
     47e:	14 8a       	std	Z+20, r1	; 0x14
     480:	15 8a       	std	Z+21, r1	; 0x15
     482:	e9 e6       	ldi	r30, 0x69	; 105
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	84 60       	ori	r24, 0x04	; 4
     48a:	80 83       	st	Z, r24
     48c:	8d b3       	in	r24, 0x1d	; 29
     48e:	82 60       	ori	r24, 0x02	; 2
     490:	8d bb       	out	0x1d, r24	; 29
     492:	81 e3       	ldi	r24, 0x31	; 49
     494:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
     498:	82 e3       	ldi	r24, 0x32	; 50
     49a:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
     49e:	83 e3       	ldi	r24, 0x33	; 51
     4a0:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
     4a4:	84 e3       	ldi	r24, 0x34	; 52
     4a6:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
     4aa:	0e 94 7d 00 	call	0xfa	; 0xfa <gpio_do_update>
     4ae:	84 e3       	ldi	r24, 0x34	; 52
     4b0:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
     4b4:	78 94       	sei
     4b6:	08 95       	ret

000004b8 <gpio_trigger_clk>:

void gpio_trigger_clk()
{

	static volatile bool ping_pong = true;
	cli();
     4b8:	f8 94       	cli
	//spi_gpio(YBI_CLK, ping_pong);
	// trigger clk to turn off after 40uS
	
	if ( Circ->signal_output[DIR_OUT] == REWARD )
     4ba:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     4be:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     4c2:	86 89       	ldd	r24, Z+22	; 0x16
     4c4:	81 11       	cpse	r24, r1
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <gpio_trigger_clk+0x36>
	{
		if ( ping_pong )
     4c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4cc:	88 23       	and	r24, r24
     4ce:	41 f0       	breq	.+16     	; 0x4e0 <gpio_trigger_clk+0x28>
		{
			Circ->signal_output[M4_1_OUT] = !Circ->signal_output[M4_3_OUT];
     4d0:	94 89       	ldd	r25, Z+20	; 0x14
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	98 27       	eor	r25, r24
     4d6:	92 8b       	std	Z+18, r25	; 0x12
			Circ->signal_output[M4_2_OUT] = !Circ->signal_output[M4_1_OUT];
     4d8:	92 89       	ldd	r25, Z+18	; 0x12
     4da:	89 27       	eor	r24, r25
     4dc:	83 8b       	std	Z+19, r24	; 0x13
     4de:	19 c0       	rjmp	.+50     	; 0x512 <gpio_trigger_clk+0x5a>
		}
		else
		{
			Circ->signal_output[M4_3_OUT] = Circ->signal_output[M4_1_OUT];
     4e0:	82 89       	ldd	r24, Z+18	; 0x12
     4e2:	84 8b       	std	Z+20, r24	; 0x14
			Circ->signal_output[M4_4_OUT] = !Circ->signal_output[M4_3_OUT];			
     4e4:	94 89       	ldd	r25, Z+20	; 0x14
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	89 27       	eor	r24, r25
     4ea:	85 8b       	std	Z+21, r24	; 0x15
     4ec:	12 c0       	rjmp	.+36     	; 0x512 <gpio_trigger_clk+0x5a>
		}
	}
	else
	{
		if ( ping_pong )
     4ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f2:	88 23       	and	r24, r24
     4f4:	39 f0       	breq	.+14     	; 0x504 <gpio_trigger_clk+0x4c>
		{
			Circ->signal_output[M4_1_OUT] = Circ->signal_output[M4_3_OUT];
     4f6:	84 89       	ldd	r24, Z+20	; 0x14
     4f8:	82 8b       	std	Z+18, r24	; 0x12
			Circ->signal_output[M4_2_OUT] = !Circ->signal_output[M4_1_OUT];
     4fa:	92 89       	ldd	r25, Z+18	; 0x12
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	89 27       	eor	r24, r25
     500:	83 8b       	std	Z+19, r24	; 0x13
     502:	07 c0       	rjmp	.+14     	; 0x512 <gpio_trigger_clk+0x5a>

		}
		else
		{
			Circ->signal_output[M4_3_OUT] = !Circ->signal_output[M4_1_OUT];
     504:	92 89       	ldd	r25, Z+18	; 0x12
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	98 27       	eor	r25, r24
     50a:	94 8b       	std	Z+20, r25	; 0x14
			Circ->signal_output[M4_4_OUT] = !Circ->signal_output[M4_3_OUT];
     50c:	94 89       	ldd	r25, Z+20	; 0x14
     50e:	89 27       	eor	r24, r25
     510:	85 8b       	std	Z+21, r24	; 0x15
		}
	}
	
	gpio_do_update();	
     512:	0e 94 7d 00 	call	0xfa	; 0xfa <gpio_do_update>
	ping_pong = !ping_pong;	
     516:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	89 27       	eor	r24, r25
     51e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	sei();
     522:	78 94       	sei
     524:	08 95       	ret

00000526 <__vector_1>:
}

/*INTERRUPTS*/
ISR (INT0_vect)
{
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
}
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_16>:
	DIR is LOW,  CLK affects M4-1 first follows QPDIR2 (first pulse)
	DIR is HIGH, CLK affects M4-3 first, inverted in respect to QPDIR2 (first pulse)
*/

ISR (TIMER0_OVF_vect)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
	//spi_gpio(YBI_CLK, 0);
}
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <__vector_2>:
ISR (INT1_vect)
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <__vector_2+0x28>
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	volatile bool qp_dir_1, qp_dir_2;
	
	if ( Circ->signal_input[END_IN] )
     57a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     57e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     582:	82 81       	ldd	r24, Z+2	; 0x02
     584:	88 23       	and	r24, r24
     586:	59 f1       	breq	.+86     	; 0x5de <__vector_2+0x90>
	{
		qp_dir_1 = _READ_PIN(QP_DIR1_PORT, QP_DIR1_PIN);
     588:	89 b1       	in	r24, 0x09	; 9
     58a:	82 fb       	bst	r24, 2
     58c:	88 27       	eor	r24, r24
     58e:	80 f9       	bld	r24, 0
     590:	89 83       	std	Y+1, r24	; 0x01
		qp_dir_2 = _READ_PIN(QP_DIR2_PORT, QP_DIR2_PIN);
     592:	89 b1       	in	r24, 0x09	; 9
     594:	83 fb       	bst	r24, 3
     596:	88 27       	eor	r24, r24
     598:	80 f9       	bld	r24, 0
     59a:	8a 83       	std	Y+2, r24	; 0x02

		if ( ( qp_dir_1 == qp_dir_2 ) )
     59c:	99 81       	ldd	r25, Y+1	; 0x01
     59e:	8a 81       	ldd	r24, Y+2	; 0x02
     5a0:	98 13       	cpse	r25, r24
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <__vector_2+0x5c>
			Circ->signal_output[DIR_OUT] = FORWARD;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	86 8b       	std	Z+22, r24	; 0x16
     5a8:	01 c0       	rjmp	.+2      	; 0x5ac <__vector_2+0x5e>
		else
			Circ->signal_output[DIR_OUT] = REWARD;
     5aa:	16 8a       	std	Z+22, r1	; 0x16
		
		if ( ! Circ->signal_input[LOW_IN] )
     5ac:	81 85       	ldd	r24, Z+9	; 0x09
     5ae:	81 11       	cpse	r24, r1
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <__vector_2+0x6a>
		{
			gpio_trigger_clk();
     5b2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <gpio_trigger_clk>
     5b6:	13 c0       	rjmp	.+38     	; 0x5de <__vector_2+0x90>
		}
		else
		{
			if ( ( Circ->signal_output[DIR_OUT] == FORWARD ) && ( qp_dir_2 ) )
     5b8:	86 89       	ldd	r24, Z+22	; 0x16
     5ba:	88 23       	and	r24, r24
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <__vector_2+0x78>
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	81 11       	cpse	r24, r1
				gpio_trigger_clk();
     5c2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <gpio_trigger_clk>
			if ( ( Circ->signal_output[DIR_OUT] == REWARD ) && (!qp_dir_2 ) )
     5c6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Circ>
     5ca:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Circ+0x1>
     5ce:	86 89       	ldd	r24, Z+22	; 0x16
     5d0:	81 11       	cpse	r24, r1
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <__vector_2+0x90>
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	81 11       	cpse	r24, r1
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_2+0x90>
				gpio_trigger_clk();
     5da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <gpio_trigger_clk>
		}
	}
	gpio_do_update();
     5de:	0e 94 7d 00 	call	0xfa	; 0xfa <gpio_do_update>
	
}
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_13>:
ISR (TIMER1_OVF_vect)
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
	gpio_do_timer();
     62e:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_timer>
}
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	bf 91       	pop	r27
     638:	af 91       	pop	r26
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	7f 91       	pop	r23
     640:	6f 91       	pop	r22
     642:	5f 91       	pop	r21
     644:	4f 91       	pop	r20
     646:	3f 91       	pop	r19
     648:	2f 91       	pop	r18
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_18>:
ISR (USART_RX_vect)
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
	uint8_t ch = UDR0;		
     676:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	gpio_do_uart_rx(ch);
     67a:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <gpio_signal_state_change>:

#define UART_CMD 0x34
void gpio_signal_state_change()
{
	gpio_do_update();
     6a0:	0e 94 7d 00 	call	0xfa	; 0xfa <gpio_do_update>
	gpio_do_uart_rx(UART_CMD);
     6a4:	84 e3       	ldi	r24, 0x34	; 52
     6a6:	0e 94 20 01 	call	0x240	; 0x240 <gpio_do_uart_rx>
     6aa:	08 95       	ret

000006ac <__vector_3>:
}
ISR (PCINT0_vect)
{
     6ac:	1f 92       	push	r1
     6ae:	0f 92       	push	r0
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	0f 92       	push	r0
     6b4:	11 24       	eor	r1, r1
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	6f 93       	push	r22
     6c0:	7f 93       	push	r23
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
	gpio_signal_state_change();
     6ce:	0e 94 50 03 	call	0x6a0	; 0x6a0 <gpio_signal_state_change>
}
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	bf 91       	pop	r27
     6d8:	af 91       	pop	r26
     6da:	9f 91       	pop	r25
     6dc:	8f 91       	pop	r24
     6de:	7f 91       	pop	r23
     6e0:	6f 91       	pop	r22
     6e2:	5f 91       	pop	r21
     6e4:	4f 91       	pop	r20
     6e6:	3f 91       	pop	r19
     6e8:	2f 91       	pop	r18
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_4>:
ISR (PCINT1_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
	gpio_signal_state_change();
     716:	0e 94 50 03 	call	0x6a0	; 0x6a0 <gpio_signal_state_change>
}
     71a:	ff 91       	pop	r31
     71c:	ef 91       	pop	r30
     71e:	bf 91       	pop	r27
     720:	af 91       	pop	r26
     722:	9f 91       	pop	r25
     724:	8f 91       	pop	r24
     726:	7f 91       	pop	r23
     728:	6f 91       	pop	r22
     72a:	5f 91       	pop	r21
     72c:	4f 91       	pop	r20
     72e:	3f 91       	pop	r19
     730:	2f 91       	pop	r18
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <__vector_5>:
ISR (PCINT2_vect)
{
     73c:	1f 92       	push	r1
     73e:	0f 92       	push	r0
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	0f 92       	push	r0
     744:	11 24       	eor	r1, r1
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	gpio_signal_state_change();
     75e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <gpio_signal_state_change>
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <circuit_get_circuit>:
#define PRESSED		0

Circuit * circuit_get_circuit()
{
    return &circuit;
}
     784:	87 e3       	ldi	r24, 0x37	; 55
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	08 95       	ret

0000078a <circuit_init>:

void circuit_init()
{
	circuit.move = NOT_MOVING;
     78a:	e7 e3       	ldi	r30, 0x37	; 55
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	82 8f       	std	Z+26, r24	; 0x1a
	circuit.state = cstates[st_INIT];
     792:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cstates>
     796:	83 8f       	std	Z+27, r24	; 0x1b
     798:	08 95       	ret

0000079a <circuit_do_outputs>:
}

void circuit_do_outputs()
{
        circuit.signal_output[MOVE2_OUT] = circuit.signal_input[MOVE_IN];
     79a:	e7 e3       	ldi	r30, 0x37	; 55
     79c:	f1 e0       	ldi	r31, 0x01	; 1
     79e:	86 81       	ldd	r24, Z+6	; 0x06
     7a0:	82 87       	std	Z+10, r24	; 0x0a
        circuit.signal_output[FF0_OUT] = circuit.state & 0x01;
     7a2:	83 8d       	ldd	r24, Z+27	; 0x1b
     7a4:	98 2f       	mov	r25, r24
     7a6:	91 70       	andi	r25, 0x01	; 1
     7a8:	93 87       	std	Z+11, r25	; 0x0b
        circuit.signal_output[FF1_OUT] = circuit.state & 0x02;
     7aa:	81 fb       	bst	r24, 1
     7ac:	99 27       	eor	r25, r25
     7ae:	90 f9       	bld	r25, 0
     7b0:	94 87       	std	Z+12, r25	; 0x0c
        circuit.signal_output[FF2_OUT] = circuit.state & 0x04;
     7b2:	82 fb       	bst	r24, 2
     7b4:	99 27       	eor	r25, r25
     7b6:	90 f9       	bld	r25, 0
     7b8:	95 87       	std	Z+13, r25	; 0x0d
        circuit.signal_output[FF3_OUT] = circuit.state & 0x08;
     7ba:	83 fb       	bst	r24, 3
     7bc:	99 27       	eor	r25, r25
     7be:	90 f9       	bld	r25, 0
     7c0:	96 87       	std	Z+14, r25	; 0x0e
        circuit.signal_output[FF4_OUT] = circuit.state & 0x10;
     7c2:	82 95       	swap	r24
     7c4:	81 70       	andi	r24, 0x01	; 1
     7c6:	87 87       	std	Z+15, r24	; 0x0f
		circuit.signal_output[CUT_OUT] = circuit.signal_input[CUT_IN];
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	90 8b       	std	Z+16, r25	; 0x10
        circuit.signal_output[REC_OUT] = circuit.signal_output[FF4_OUT];
     7cc:	81 8b       	std	Z+17, r24	; 0x11
     7ce:	08 95       	ret

000007d0 <circuit_update>:
void circuit_update()
{
	bool static isRepr = false;
	bool static isRec  = false;
	
	bool ReprBtPressed = circuit.signal_input[REPR_IN] == PRESSED;
     7d0:	e7 e3       	ldi	r30, 0x37	; 55
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
     7d4:	90 85       	ldd	r25, Z+8	; 0x08
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	59 2f       	mov	r21, r25
     7da:	58 27       	eor	r21, r24
	bool recBtPressed  = circuit.signal_input[REC_IN]  == PRESSED;
     7dc:	21 81       	ldd	r18, Z+1	; 0x01
     7de:	82 27       	eor	r24, r18
	
	bool fadin_active  = circuit.signal_input[FAD_IN]  == true;
     7e0:	40 81       	ld	r20, Z
	
	if ( circuit.signal_input[END_IN] == TAPE_IN )
     7e2:	32 81       	ldd	r19, Z+2	; 0x02
     7e4:	31 11       	cpse	r19, r1
     7e6:	84 c0       	rjmp	.+264    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
	{
		if (!fadin_active)
     7e8:	41 11       	cpse	r20, r1
     7ea:	3e c0       	rjmp	.+124    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
		{
			if ( ( isRepr && isRec ) && ( ReprBtPressed || recBtPressed ) ) return;
     7ec:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <isRepr.1652>
     7f0:	33 23       	and	r19, r19
     7f2:	41 f0       	breq	.+16     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7f4:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <isRec.1653>
     7f8:	66 23       	and	r22, r22
     7fa:	21 f0       	breq	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fc:	51 11       	cpse	r21, r1
     7fe:	82 c0       	rjmp	.+260    	; 0x904 <__stack+0x5>
     800:	81 11       	cpse	r24, r1
     802:	80 c0       	rjmp	.+256    	; 0x904 <__stack+0x5>
					
			if ( ( ( isRepr || ( isRepr && isRec ) ) && ( circuit.signal_input[MOVE_IN] == IS_MOVING ) && ( !( circuit.state & 0x01 ) ) ) )
     804:	31 11       	cpse	r19, r1
     806:	06 c0       	rjmp	.+12     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     808:	33 23       	and	r19, r19
     80a:	91 f0       	breq	.+36     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     80c:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <isRec.1653>
     810:	66 23       	and	r22, r22
     812:	71 f0       	breq	.+28     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     814:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <circuit+0x6>
     818:	61 11       	cpse	r22, r1
     81a:	0a c0       	rjmp	.+20     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     81c:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <circuit+0x1b>
     820:	60 fd       	sbrc	r22, 0
     822:	06 c0       	rjmp	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			{
				circuit.state |= 0x01;
     824:	61 60       	ori	r22, 0x01	; 1
     826:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <circuit+0x1b>
				circuit_do_outputs();
     82a:	0e 94 cd 03 	call	0x79a	; 0x79a <circuit_do_outputs>
				return;
     82e:	08 95       	ret
			}
			
			if ( ( isRec && ReprBtPressed ) || ( isRepr &&  recBtPressed ) )
     830:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <isRec.1653>
     834:	66 23       	and	r22, r22
     836:	11 f0       	breq	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     838:	51 11       	cpse	r21, r1
     83a:	04 c0       	rjmp	.+8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     83c:	33 23       	and	r19, r19
     83e:	a1 f0       	breq	.+40     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     840:	88 23       	and	r24, r24
     842:	91 f0       	breq	.+36     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			{
				isRepr = true;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <isRepr.1652>
				isRec  = true;
     84a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <isRec.1653>
				circuit.state |= cstates[st_REPR] | cstates[st_REC];
     84e:	e1 e0       	ldi	r30, 0x01	; 1
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	93 81       	ldd	r25, Z+3	; 0x03
     854:	84 81       	ldd	r24, Z+4	; 0x04
     856:	e7 e3       	ldi	r30, 0x37	; 55
     858:	f1 e0       	ldi	r31, 0x01	; 1
     85a:	89 2b       	or	r24, r25
     85c:	93 8d       	ldd	r25, Z+27	; 0x1b
     85e:	89 2b       	or	r24, r25
     860:	83 8f       	std	Z+27, r24	; 0x1b
				circuit_do_outputs();
     862:	0e 94 cd 03 	call	0x79a	; 0x79a <circuit_do_outputs>
				return;
     866:	08 95       	ret
			}
		}
		
		if		( circuit.signal_input[STOP_IN] == PRESSED )					{ circuit.state = cstates[st_INIT]; isRec = false; isRepr = false; }
     868:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <circuit+0x5>
     86c:	81 11       	cpse	r24, r1
     86e:	09 c0       	rjmp	.+18     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     870:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cstates>
     874:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
     878:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <isRec.1653>
     87c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <isRepr.1652>
     880:	3f c0       	rjmp	.+126    	; 0x900 <__stack+0x1>
		else if ( circuit.signal_input[FORW_IN] == PRESSED && !fadin_active )	  circuit.state = cstates[st_FORW];
     882:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <circuit+0x7>
     886:	81 11       	cpse	r24, r1
     888:	07 c0       	rjmp	.+14     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     88a:	41 11       	cpse	r20, r1
     88c:	05 c0       	rjmp	.+10     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     88e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cstates+0x1>
     892:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
     896:	34 c0       	rjmp	.+104    	; 0x900 <__stack+0x1>
		else if ( circuit.signal_input[REW_IN]	== PRESSED && !fadin_active )	  circuit.state = cstates[st_REW];	
     898:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <circuit+0x4>
     89c:	81 11       	cpse	r24, r1
     89e:	07 c0       	rjmp	.+14     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     8a0:	41 11       	cpse	r20, r1
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     8a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <cstates+0x2>
     8a8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
     8ac:	29 c0       	rjmp	.+82     	; 0x900 <__stack+0x1>
		else if ( circuit.signal_input[REPR_IN] == PRESSED )					{ circuit.state = cstates[st_REPR]; isRepr = true; }
     8ae:	91 11       	cpse	r25, r1
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
     8b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cstates+0x3>
     8b6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <isRepr.1652>
     8c0:	1f c0       	rjmp	.+62     	; 0x900 <__stack+0x1>
		else if ( circuit.signal_input[REC_IN]	== PRESSED && !fadin_active )	{ circuit.state = cstates[st_REC];	isRec  = true;  }
     8c2:	21 11       	cpse	r18, r1
     8c4:	0a c0       	rjmp	.+20     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8c6:	41 11       	cpse	r20, r1
     8c8:	08 c0       	rjmp	.+16     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cstates+0x4>
     8ce:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <isRec.1653>
     8d8:	13 c0       	rjmp	.+38     	; 0x900 <__stack+0x1>
		else if ( circuit.signal_input[CUT_IN]	== PRESSED && !fadin_active )	  circuit.state = cstates[st_CUT];
     8da:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <circuit+0x3>
     8de:	81 11       	cpse	r24, r1
     8e0:	0f c0       	rjmp	.+30     	; 0x900 <__stack+0x1>
     8e2:	41 11       	cpse	r20, r1
     8e4:	0d c0       	rjmp	.+26     	; 0x900 <__stack+0x1>
     8e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <cstates+0x5>
     8ea:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <__stack+0x1>
	}
	else
	{
		circuit.state = cstates[st_INIT];
     8f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cstates>
     8f4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <circuit+0x1b>
		isRepr = false;
     8f8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <isRepr.1652>
		isRec  = false;
     8fc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <isRec.1653>
	}
	
	circuit_do_outputs();
     900:	0e 94 cd 03 	call	0x79a	; 0x79a <circuit_do_outputs>
     904:	08 95       	ret

00000906 <main>:

#include <util/delay.h>

int main(void)
{
    gpio_init(eeprom_read_byte(0x00));
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 d7 07 	call	0xfae	; 0xfae <eeprom_read_byte>
     90e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <gpio_init>
     912:	ff cf       	rjmp	.-2      	; 0x912 <main+0xc>

00000914 <spi_xfer>:
}


uint8_t spi_xfer(uint8_t cs_pin, uint8_t data)
{
	SPDR = data;
     914:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
     916:	0d b4       	in	r0, 0x2d	; 45
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <spi_xfer+0x2>
	
	return SPDR;
     91c:	8e b5       	in	r24, 0x2e	; 46
}
     91e:	08 95       	ret

00000920 <spi_write>:
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
	}
}

void spi_write(uint8_t cs_pin, uint8_t reg, uint8_t data)
{
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	06 2f       	mov	r16, r22
     92a:	14 2f       	mov	r17, r20
	SPI_PORT &= ~( 1 << cs_pin );
     92c:	98 b1       	in	r25, 0x08	; 8
     92e:	c1 e0       	ldi	r28, 0x01	; 1
     930:	d0 e0       	ldi	r29, 0x00	; 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <spi_write+0x18>
     934:	cc 0f       	add	r28, r28
     936:	dd 1f       	adc	r29, r29
     938:	8a 95       	dec	r24
     93a:	e2 f7       	brpl	.-8      	; 0x934 <spi_write+0x14>
     93c:	8c 2f       	mov	r24, r28
     93e:	80 95       	com	r24
     940:	98 23       	and	r25, r24
     942:	98 b9       	out	0x08, r25	; 8
	spi_xfer(SPI_CS1, MCP23S08_OPCOD);
     944:	60 e4       	ldi	r22, 0x40	; 64
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 8a 04 	call	0x914	; 0x914 <spi_xfer>
	spi_xfer(SPI_CS1, reg);
     94c:	60 2f       	mov	r22, r16
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 8a 04 	call	0x914	; 0x914 <spi_xfer>
	spi_xfer(SPI_CS1, data);
     954:	61 2f       	mov	r22, r17
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 8a 04 	call	0x914	; 0x914 <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
     95c:	88 b1       	in	r24, 0x08	; 8
     95e:	c8 2b       	or	r28, r24
     960:	c8 b9       	out	0x08, r28	; 8
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	08 95       	ret

0000096c <spi_init>:
#include "includes/spi_driver.h"

void spi_init()
{
	// enable SPI, set as master, and clock to fosc/128
	PORTC = 0xff;
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	88 b9       	out	0x08, r24	; 8
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
     970:	83 e5       	ldi	r24, 0x53	; 83
     972:	8c bd       	out	0x2c, r24	; 44
	spi_write(SPI_CS1, MCP23S08_IODIR, 0x00); // configure MCP23S08 01 as output
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	0e 94 90 04 	call	0x920	; 0x920 <spi_write>
	spi_write(SPI_CS2, MCP23S08_IODIR, 0x00); // configure MCP23S08 02 as output
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 90 04 	call	0x920	; 0x920 <spi_write>
	spi_write(SPI_CS1, MCP23S08_GPIO, 0x00);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	69 e0       	ldi	r22, 0x09	; 9
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 90 04 	call	0x920	; 0x920 <spi_write>
	spi_write(SPI_CS2, MCP23S08_GPIO, 0x00);
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	69 e0       	ldi	r22, 0x09	; 9
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0e 94 90 04 	call	0x920	; 0x920 <spi_write>
     99c:	08 95       	ret

0000099e <spi_read>:
	spi_xfer(SPI_CS1, data);
	SPI_PORT |= ( 1 << cs_pin );
}

uint8_t spi_read(uint8_t cs_pin, uint8_t reg)
{
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	18 2f       	mov	r17, r24
     9a8:	06 2f       	mov	r16, r22
	uint8_t data;
	SPI_PORT &= ~( 1 << cs_pin );
     9aa:	88 b1       	in	r24, 0x08	; 8
     9ac:	c1 e0       	ldi	r28, 0x01	; 1
     9ae:	d0 e0       	ldi	r29, 0x00	; 0
     9b0:	01 2e       	mov	r0, r17
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <spi_read+0x1a>
     9b4:	cc 0f       	add	r28, r28
     9b6:	dd 1f       	adc	r29, r29
     9b8:	0a 94       	dec	r0
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <spi_read+0x16>
     9bc:	9c 2f       	mov	r25, r28
     9be:	90 95       	com	r25
     9c0:	89 23       	and	r24, r25
     9c2:	88 b9       	out	0x08, r24	; 8
	spi_xfer(cs_pin, MCP23S08_OPCOD + 0x01);
     9c4:	61 e4       	ldi	r22, 0x41	; 65
     9c6:	81 2f       	mov	r24, r17
     9c8:	0e 94 8a 04 	call	0x914	; 0x914 <spi_xfer>
	spi_xfer(cs_pin, reg);
     9cc:	60 2f       	mov	r22, r16
     9ce:	81 2f       	mov	r24, r17
     9d0:	0e 94 8a 04 	call	0x914	; 0x914 <spi_xfer>
	data = spi_xfer(cs_pin, 0xff); // dummy byte
     9d4:	6f ef       	ldi	r22, 0xFF	; 255
     9d6:	81 2f       	mov	r24, r17
     9d8:	0e 94 8a 04 	call	0x914	; 0x914 <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
     9dc:	98 b1       	in	r25, 0x08	; 8
     9de:	c9 2b       	or	r28, r25
     9e0:	c8 b9       	out	0x08, r28	; 8
	
	return (uint8_t)data;
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <spi_gpio>:
	spi_write(SPI_CS1, MCP23S08_GPIO, 0x00);
	spi_write(SPI_CS2, MCP23S08_GPIO, 0x00);
	
}
void spi_gpio(uint8_t io_pin, uint8_t val)
{
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	16 2f       	mov	r17, r22
	uint8_t cs_pin = ( io_pin >> 4 ) & 0x01;
     9f4:	84 fb       	bst	r24, 4
     9f6:	dd 27       	eor	r29, r29
     9f8:	d0 f9       	bld	r29, 0
	
	if ( cs_pin == 0 ) cs_pin = SPI_CS2; // U2
	if ( cs_pin == 1 ) cs_pin = SPI_CS1; // U1
	
	io_pin &= 0x0f;
     9fa:	c8 2f       	mov	r28, r24
     9fc:	cf 70       	andi	r28, 0x0F	; 15
	
	uint8_t data = spi_read(cs_pin, MCP23S08_GPIO);
     9fe:	69 e0       	ldi	r22, 0x09	; 9
     a00:	8d 2f       	mov	r24, r29
     a02:	0e 94 cf 04 	call	0x99e	; 0x99e <spi_read>

	if ( val )
     a06:	11 23       	and	r17, r17
     a08:	69 f0       	breq	.+26     	; 0xa24 <spi_gpio+0x38>
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data | ( 1 << io_pin ) ) );
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <spi_gpio+0x28>
     a10:	44 0f       	add	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	ca 95       	dec	r28
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <spi_gpio+0x24>
     a18:	48 2b       	or	r20, r24
     a1a:	69 e0       	ldi	r22, 0x09	; 9
     a1c:	8d 2f       	mov	r24, r29
     a1e:	0e 94 90 04 	call	0x920	; 0x920 <spi_write>
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <spi_gpio+0x54>
	}
	else
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <spi_gpio+0x42>
     a2a:	22 0f       	add	r18, r18
     a2c:	33 1f       	adc	r19, r19
     a2e:	ca 95       	dec	r28
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <spi_gpio+0x3e>
     a32:	20 95       	com	r18
     a34:	42 2f       	mov	r20, r18
     a36:	48 23       	and	r20, r24
     a38:	69 e0       	ldi	r22, 0x09	; 9
     a3a:	8d 2f       	mov	r24, r29
     a3c:	0e 94 90 04 	call	0x920	; 0x920 <spi_write>
	}
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	08 95       	ret

00000a48 <sprintf>:
     a48:	ae e0       	ldi	r26, 0x0E	; 14
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	ea e2       	ldi	r30, 0x2A	; 42
     a4e:	f5 e0       	ldi	r31, 0x05	; 5
     a50:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__prologue_saves__+0x1c>
     a54:	0d 89       	ldd	r16, Y+21	; 0x15
     a56:	1e 89       	ldd	r17, Y+22	; 0x16
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	8c 83       	std	Y+4, r24	; 0x04
     a5c:	1a 83       	std	Y+2, r17	; 0x02
     a5e:	09 83       	std	Y+1, r16	; 0x01
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f e7       	ldi	r25, 0x7F	; 127
     a64:	9e 83       	std	Y+6, r25	; 0x06
     a66:	8d 83       	std	Y+5, r24	; 0x05
     a68:	ae 01       	movw	r20, r28
     a6a:	47 5e       	subi	r20, 0xE7	; 231
     a6c:	5f 4f       	sbci	r21, 0xFF	; 255
     a6e:	6f 89       	ldd	r22, Y+23	; 0x17
     a70:	78 8d       	ldd	r23, Y+24	; 0x18
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 46 05 	call	0xa8c	; 0xa8c <vfprintf>
     a7a:	ef 81       	ldd	r30, Y+7	; 0x07
     a7c:	f8 85       	ldd	r31, Y+8	; 0x08
     a7e:	e0 0f       	add	r30, r16
     a80:	f1 1f       	adc	r31, r17
     a82:	10 82       	st	Z, r1
     a84:	2e 96       	adiw	r28, 0x0e	; 14
     a86:	e4 e0       	ldi	r30, 0x04	; 4
     a88:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__epilogue_restores__+0x1c>

00000a8c <vfprintf>:
     a8c:	ab e0       	ldi	r26, 0x0B	; 11
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	ec e4       	ldi	r30, 0x4C	; 76
     a92:	f5 e0       	ldi	r31, 0x05	; 5
     a94:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__prologue_saves__>
     a98:	6c 01       	movw	r12, r24
     a9a:	7b 01       	movw	r14, r22
     a9c:	8a 01       	movw	r16, r20
     a9e:	fc 01       	movw	r30, r24
     aa0:	17 82       	std	Z+7, r1	; 0x07
     aa2:	16 82       	std	Z+6, r1	; 0x06
     aa4:	83 81       	ldd	r24, Z+3	; 0x03
     aa6:	81 ff       	sbrs	r24, 1
     aa8:	cc c1       	rjmp	.+920    	; 0xe42 <vfprintf+0x3b6>
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	3c 01       	movw	r6, r24
     ab0:	f6 01       	movw	r30, r12
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	f7 01       	movw	r30, r14
     ab6:	93 fd       	sbrc	r25, 3
     ab8:	85 91       	lpm	r24, Z+
     aba:	93 ff       	sbrs	r25, 3
     abc:	81 91       	ld	r24, Z+
     abe:	7f 01       	movw	r14, r30
     ac0:	88 23       	and	r24, r24
     ac2:	09 f4       	brne	.+2      	; 0xac6 <vfprintf+0x3a>
     ac4:	ba c1       	rjmp	.+884    	; 0xe3a <vfprintf+0x3ae>
     ac6:	85 32       	cpi	r24, 0x25	; 37
     ac8:	39 f4       	brne	.+14     	; 0xad8 <vfprintf+0x4c>
     aca:	93 fd       	sbrc	r25, 3
     acc:	85 91       	lpm	r24, Z+
     ace:	93 ff       	sbrs	r25, 3
     ad0:	81 91       	ld	r24, Z+
     ad2:	7f 01       	movw	r14, r30
     ad4:	85 32       	cpi	r24, 0x25	; 37
     ad6:	29 f4       	brne	.+10     	; 0xae2 <vfprintf+0x56>
     ad8:	b6 01       	movw	r22, r12
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     ae0:	e7 cf       	rjmp	.-50     	; 0xab0 <vfprintf+0x24>
     ae2:	91 2c       	mov	r9, r1
     ae4:	21 2c       	mov	r2, r1
     ae6:	31 2c       	mov	r3, r1
     ae8:	ff e1       	ldi	r31, 0x1F	; 31
     aea:	f3 15       	cp	r31, r3
     aec:	d8 f0       	brcs	.+54     	; 0xb24 <vfprintf+0x98>
     aee:	8b 32       	cpi	r24, 0x2B	; 43
     af0:	79 f0       	breq	.+30     	; 0xb10 <vfprintf+0x84>
     af2:	38 f4       	brcc	.+14     	; 0xb02 <vfprintf+0x76>
     af4:	80 32       	cpi	r24, 0x20	; 32
     af6:	79 f0       	breq	.+30     	; 0xb16 <vfprintf+0x8a>
     af8:	83 32       	cpi	r24, 0x23	; 35
     afa:	a1 f4       	brne	.+40     	; 0xb24 <vfprintf+0x98>
     afc:	23 2d       	mov	r18, r3
     afe:	20 61       	ori	r18, 0x10	; 16
     b00:	1d c0       	rjmp	.+58     	; 0xb3c <vfprintf+0xb0>
     b02:	8d 32       	cpi	r24, 0x2D	; 45
     b04:	61 f0       	breq	.+24     	; 0xb1e <vfprintf+0x92>
     b06:	80 33       	cpi	r24, 0x30	; 48
     b08:	69 f4       	brne	.+26     	; 0xb24 <vfprintf+0x98>
     b0a:	23 2d       	mov	r18, r3
     b0c:	21 60       	ori	r18, 0x01	; 1
     b0e:	16 c0       	rjmp	.+44     	; 0xb3c <vfprintf+0xb0>
     b10:	83 2d       	mov	r24, r3
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	38 2e       	mov	r3, r24
     b16:	e3 2d       	mov	r30, r3
     b18:	e4 60       	ori	r30, 0x04	; 4
     b1a:	3e 2e       	mov	r3, r30
     b1c:	2a c0       	rjmp	.+84     	; 0xb72 <vfprintf+0xe6>
     b1e:	f3 2d       	mov	r31, r3
     b20:	f8 60       	ori	r31, 0x08	; 8
     b22:	1d c0       	rjmp	.+58     	; 0xb5e <vfprintf+0xd2>
     b24:	37 fc       	sbrc	r3, 7
     b26:	2d c0       	rjmp	.+90     	; 0xb82 <vfprintf+0xf6>
     b28:	20 ed       	ldi	r18, 0xD0	; 208
     b2a:	28 0f       	add	r18, r24
     b2c:	2a 30       	cpi	r18, 0x0A	; 10
     b2e:	40 f0       	brcs	.+16     	; 0xb40 <vfprintf+0xb4>
     b30:	8e 32       	cpi	r24, 0x2E	; 46
     b32:	b9 f4       	brne	.+46     	; 0xb62 <vfprintf+0xd6>
     b34:	36 fc       	sbrc	r3, 6
     b36:	81 c1       	rjmp	.+770    	; 0xe3a <vfprintf+0x3ae>
     b38:	23 2d       	mov	r18, r3
     b3a:	20 64       	ori	r18, 0x40	; 64
     b3c:	32 2e       	mov	r3, r18
     b3e:	19 c0       	rjmp	.+50     	; 0xb72 <vfprintf+0xe6>
     b40:	36 fe       	sbrs	r3, 6
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <vfprintf+0xc4>
     b44:	8a e0       	ldi	r24, 0x0A	; 10
     b46:	98 9e       	mul	r9, r24
     b48:	20 0d       	add	r18, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	92 2e       	mov	r9, r18
     b4e:	11 c0       	rjmp	.+34     	; 0xb72 <vfprintf+0xe6>
     b50:	ea e0       	ldi	r30, 0x0A	; 10
     b52:	2e 9e       	mul	r2, r30
     b54:	20 0d       	add	r18, r0
     b56:	11 24       	eor	r1, r1
     b58:	22 2e       	mov	r2, r18
     b5a:	f3 2d       	mov	r31, r3
     b5c:	f0 62       	ori	r31, 0x20	; 32
     b5e:	3f 2e       	mov	r3, r31
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <vfprintf+0xe6>
     b62:	8c 36       	cpi	r24, 0x6C	; 108
     b64:	21 f4       	brne	.+8      	; 0xb6e <vfprintf+0xe2>
     b66:	83 2d       	mov	r24, r3
     b68:	80 68       	ori	r24, 0x80	; 128
     b6a:	38 2e       	mov	r3, r24
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <vfprintf+0xe6>
     b6e:	88 36       	cpi	r24, 0x68	; 104
     b70:	41 f4       	brne	.+16     	; 0xb82 <vfprintf+0xf6>
     b72:	f7 01       	movw	r30, r14
     b74:	93 fd       	sbrc	r25, 3
     b76:	85 91       	lpm	r24, Z+
     b78:	93 ff       	sbrs	r25, 3
     b7a:	81 91       	ld	r24, Z+
     b7c:	7f 01       	movw	r14, r30
     b7e:	81 11       	cpse	r24, r1
     b80:	b3 cf       	rjmp	.-154    	; 0xae8 <vfprintf+0x5c>
     b82:	98 2f       	mov	r25, r24
     b84:	9f 7d       	andi	r25, 0xDF	; 223
     b86:	95 54       	subi	r25, 0x45	; 69
     b88:	93 30       	cpi	r25, 0x03	; 3
     b8a:	28 f4       	brcc	.+10     	; 0xb96 <vfprintf+0x10a>
     b8c:	0c 5f       	subi	r16, 0xFC	; 252
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	9f e3       	ldi	r25, 0x3F	; 63
     b92:	99 83       	std	Y+1, r25	; 0x01
     b94:	0d c0       	rjmp	.+26     	; 0xbb0 <vfprintf+0x124>
     b96:	83 36       	cpi	r24, 0x63	; 99
     b98:	31 f0       	breq	.+12     	; 0xba6 <vfprintf+0x11a>
     b9a:	83 37       	cpi	r24, 0x73	; 115
     b9c:	71 f0       	breq	.+28     	; 0xbba <vfprintf+0x12e>
     b9e:	83 35       	cpi	r24, 0x53	; 83
     ba0:	09 f0       	breq	.+2      	; 0xba4 <vfprintf+0x118>
     ba2:	59 c0       	rjmp	.+178    	; 0xc56 <vfprintf+0x1ca>
     ba4:	21 c0       	rjmp	.+66     	; 0xbe8 <vfprintf+0x15c>
     ba6:	f8 01       	movw	r30, r16
     ba8:	80 81       	ld	r24, Z
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	0e 5f       	subi	r16, 0xFE	; 254
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	88 24       	eor	r8, r8
     bb2:	83 94       	inc	r8
     bb4:	91 2c       	mov	r9, r1
     bb6:	53 01       	movw	r10, r6
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <vfprintf+0x154>
     bba:	28 01       	movw	r4, r16
     bbc:	f2 e0       	ldi	r31, 0x02	; 2
     bbe:	4f 0e       	add	r4, r31
     bc0:	51 1c       	adc	r5, r1
     bc2:	f8 01       	movw	r30, r16
     bc4:	a0 80       	ld	r10, Z
     bc6:	b1 80       	ldd	r11, Z+1	; 0x01
     bc8:	36 fe       	sbrs	r3, 6
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <vfprintf+0x146>
     bcc:	69 2d       	mov	r22, r9
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x14a>
     bd2:	6f ef       	ldi	r22, 0xFF	; 255
     bd4:	7f ef       	ldi	r23, 0xFF	; 255
     bd6:	c5 01       	movw	r24, r10
     bd8:	0e 94 32 07 	call	0xe64	; 0xe64 <strnlen>
     bdc:	4c 01       	movw	r8, r24
     bde:	82 01       	movw	r16, r4
     be0:	f3 2d       	mov	r31, r3
     be2:	ff 77       	andi	r31, 0x7F	; 127
     be4:	3f 2e       	mov	r3, r31
     be6:	16 c0       	rjmp	.+44     	; 0xc14 <vfprintf+0x188>
     be8:	28 01       	movw	r4, r16
     bea:	22 e0       	ldi	r18, 0x02	; 2
     bec:	42 0e       	add	r4, r18
     bee:	51 1c       	adc	r5, r1
     bf0:	f8 01       	movw	r30, r16
     bf2:	a0 80       	ld	r10, Z
     bf4:	b1 80       	ldd	r11, Z+1	; 0x01
     bf6:	36 fe       	sbrs	r3, 6
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <vfprintf+0x174>
     bfa:	69 2d       	mov	r22, r9
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x178>
     c00:	6f ef       	ldi	r22, 0xFF	; 255
     c02:	7f ef       	ldi	r23, 0xFF	; 255
     c04:	c5 01       	movw	r24, r10
     c06:	0e 94 27 07 	call	0xe4e	; 0xe4e <strnlen_P>
     c0a:	4c 01       	movw	r8, r24
     c0c:	f3 2d       	mov	r31, r3
     c0e:	f0 68       	ori	r31, 0x80	; 128
     c10:	3f 2e       	mov	r3, r31
     c12:	82 01       	movw	r16, r4
     c14:	33 fc       	sbrc	r3, 3
     c16:	1b c0       	rjmp	.+54     	; 0xc4e <vfprintf+0x1c2>
     c18:	82 2d       	mov	r24, r2
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	88 16       	cp	r8, r24
     c1e:	99 06       	cpc	r9, r25
     c20:	b0 f4       	brcc	.+44     	; 0xc4e <vfprintf+0x1c2>
     c22:	b6 01       	movw	r22, r12
     c24:	80 e2       	ldi	r24, 0x20	; 32
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     c2c:	2a 94       	dec	r2
     c2e:	f4 cf       	rjmp	.-24     	; 0xc18 <vfprintf+0x18c>
     c30:	f5 01       	movw	r30, r10
     c32:	37 fc       	sbrc	r3, 7
     c34:	85 91       	lpm	r24, Z+
     c36:	37 fe       	sbrs	r3, 7
     c38:	81 91       	ld	r24, Z+
     c3a:	5f 01       	movw	r10, r30
     c3c:	b6 01       	movw	r22, r12
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     c44:	21 10       	cpse	r2, r1
     c46:	2a 94       	dec	r2
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	82 1a       	sub	r8, r18
     c4c:	91 08       	sbc	r9, r1
     c4e:	81 14       	cp	r8, r1
     c50:	91 04       	cpc	r9, r1
     c52:	71 f7       	brne	.-36     	; 0xc30 <vfprintf+0x1a4>
     c54:	e8 c0       	rjmp	.+464    	; 0xe26 <vfprintf+0x39a>
     c56:	84 36       	cpi	r24, 0x64	; 100
     c58:	11 f0       	breq	.+4      	; 0xc5e <vfprintf+0x1d2>
     c5a:	89 36       	cpi	r24, 0x69	; 105
     c5c:	41 f5       	brne	.+80     	; 0xcae <vfprintf+0x222>
     c5e:	f8 01       	movw	r30, r16
     c60:	37 fe       	sbrs	r3, 7
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <vfprintf+0x1e6>
     c64:	60 81       	ld	r22, Z
     c66:	71 81       	ldd	r23, Z+1	; 0x01
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	0c 5f       	subi	r16, 0xFC	; 252
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <vfprintf+0x1f6>
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	07 2e       	mov	r0, r23
     c78:	00 0c       	add	r0, r0
     c7a:	88 0b       	sbc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	0e 5f       	subi	r16, 0xFE	; 254
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	f3 2d       	mov	r31, r3
     c84:	ff 76       	andi	r31, 0x6F	; 111
     c86:	3f 2e       	mov	r3, r31
     c88:	97 ff       	sbrs	r25, 7
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <vfprintf+0x212>
     c8c:	90 95       	com	r25
     c8e:	80 95       	com	r24
     c90:	70 95       	com	r23
     c92:	61 95       	neg	r22
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	8f 4f       	sbci	r24, 0xFF	; 255
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	f0 68       	ori	r31, 0x80	; 128
     c9c:	3f 2e       	mov	r3, r31
     c9e:	2a e0       	ldi	r18, 0x0A	; 10
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	a3 01       	movw	r20, r6
     ca4:	0e 94 79 07 	call	0xef2	; 0xef2 <__ultoa_invert>
     ca8:	88 2e       	mov	r8, r24
     caa:	86 18       	sub	r8, r6
     cac:	45 c0       	rjmp	.+138    	; 0xd38 <vfprintf+0x2ac>
     cae:	85 37       	cpi	r24, 0x75	; 117
     cb0:	31 f4       	brne	.+12     	; 0xcbe <vfprintf+0x232>
     cb2:	23 2d       	mov	r18, r3
     cb4:	2f 7e       	andi	r18, 0xEF	; 239
     cb6:	b2 2e       	mov	r11, r18
     cb8:	2a e0       	ldi	r18, 0x0A	; 10
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	25 c0       	rjmp	.+74     	; 0xd08 <vfprintf+0x27c>
     cbe:	93 2d       	mov	r25, r3
     cc0:	99 7f       	andi	r25, 0xF9	; 249
     cc2:	b9 2e       	mov	r11, r25
     cc4:	8f 36       	cpi	r24, 0x6F	; 111
     cc6:	c1 f0       	breq	.+48     	; 0xcf8 <vfprintf+0x26c>
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <vfprintf+0x244>
     cca:	88 35       	cpi	r24, 0x58	; 88
     ccc:	79 f0       	breq	.+30     	; 0xcec <vfprintf+0x260>
     cce:	b5 c0       	rjmp	.+362    	; 0xe3a <vfprintf+0x3ae>
     cd0:	80 37       	cpi	r24, 0x70	; 112
     cd2:	19 f0       	breq	.+6      	; 0xcda <vfprintf+0x24e>
     cd4:	88 37       	cpi	r24, 0x78	; 120
     cd6:	21 f0       	breq	.+8      	; 0xce0 <vfprintf+0x254>
     cd8:	b0 c0       	rjmp	.+352    	; 0xe3a <vfprintf+0x3ae>
     cda:	e9 2f       	mov	r30, r25
     cdc:	e0 61       	ori	r30, 0x10	; 16
     cde:	be 2e       	mov	r11, r30
     ce0:	b4 fe       	sbrs	r11, 4
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <vfprintf+0x272>
     ce4:	fb 2d       	mov	r31, r11
     ce6:	f4 60       	ori	r31, 0x04	; 4
     ce8:	bf 2e       	mov	r11, r31
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <vfprintf+0x272>
     cec:	34 fe       	sbrs	r3, 4
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <vfprintf+0x278>
     cf0:	29 2f       	mov	r18, r25
     cf2:	26 60       	ori	r18, 0x06	; 6
     cf4:	b2 2e       	mov	r11, r18
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x278>
     cf8:	28 e0       	ldi	r18, 0x08	; 8
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <vfprintf+0x27c>
     cfe:	20 e1       	ldi	r18, 0x10	; 16
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <vfprintf+0x27c>
     d04:	20 e1       	ldi	r18, 0x10	; 16
     d06:	32 e0       	ldi	r19, 0x02	; 2
     d08:	f8 01       	movw	r30, r16
     d0a:	b7 fe       	sbrs	r11, 7
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <vfprintf+0x290>
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	0c 5f       	subi	r16, 0xFC	; 252
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <vfprintf+0x29c>
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 5f       	subi	r16, 0xFE	; 254
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	a3 01       	movw	r20, r6
     d2a:	0e 94 79 07 	call	0xef2	; 0xef2 <__ultoa_invert>
     d2e:	88 2e       	mov	r8, r24
     d30:	86 18       	sub	r8, r6
     d32:	fb 2d       	mov	r31, r11
     d34:	ff 77       	andi	r31, 0x7F	; 127
     d36:	3f 2e       	mov	r3, r31
     d38:	36 fe       	sbrs	r3, 6
     d3a:	0d c0       	rjmp	.+26     	; 0xd56 <vfprintf+0x2ca>
     d3c:	23 2d       	mov	r18, r3
     d3e:	2e 7f       	andi	r18, 0xFE	; 254
     d40:	a2 2e       	mov	r10, r18
     d42:	89 14       	cp	r8, r9
     d44:	58 f4       	brcc	.+22     	; 0xd5c <vfprintf+0x2d0>
     d46:	34 fe       	sbrs	r3, 4
     d48:	0b c0       	rjmp	.+22     	; 0xd60 <vfprintf+0x2d4>
     d4a:	32 fc       	sbrc	r3, 2
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <vfprintf+0x2d4>
     d4e:	83 2d       	mov	r24, r3
     d50:	8e 7e       	andi	r24, 0xEE	; 238
     d52:	a8 2e       	mov	r10, r24
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <vfprintf+0x2d4>
     d56:	b8 2c       	mov	r11, r8
     d58:	a3 2c       	mov	r10, r3
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <vfprintf+0x2d6>
     d5c:	b8 2c       	mov	r11, r8
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <vfprintf+0x2d6>
     d60:	b9 2c       	mov	r11, r9
     d62:	a4 fe       	sbrs	r10, 4
     d64:	0f c0       	rjmp	.+30     	; 0xd84 <vfprintf+0x2f8>
     d66:	fe 01       	movw	r30, r28
     d68:	e8 0d       	add	r30, r8
     d6a:	f1 1d       	adc	r31, r1
     d6c:	80 81       	ld	r24, Z
     d6e:	80 33       	cpi	r24, 0x30	; 48
     d70:	21 f4       	brne	.+8      	; 0xd7a <vfprintf+0x2ee>
     d72:	9a 2d       	mov	r25, r10
     d74:	99 7e       	andi	r25, 0xE9	; 233
     d76:	a9 2e       	mov	r10, r25
     d78:	09 c0       	rjmp	.+18     	; 0xd8c <vfprintf+0x300>
     d7a:	a2 fe       	sbrs	r10, 2
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <vfprintf+0x2fe>
     d7e:	b3 94       	inc	r11
     d80:	b3 94       	inc	r11
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <vfprintf+0x300>
     d84:	8a 2d       	mov	r24, r10
     d86:	86 78       	andi	r24, 0x86	; 134
     d88:	09 f0       	breq	.+2      	; 0xd8c <vfprintf+0x300>
     d8a:	b3 94       	inc	r11
     d8c:	a3 fc       	sbrc	r10, 3
     d8e:	11 c0       	rjmp	.+34     	; 0xdb2 <vfprintf+0x326>
     d90:	a0 fe       	sbrs	r10, 0
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <vfprintf+0x314>
     d94:	b2 14       	cp	r11, r2
     d96:	88 f4       	brcc	.+34     	; 0xdba <vfprintf+0x32e>
     d98:	28 0c       	add	r2, r8
     d9a:	92 2c       	mov	r9, r2
     d9c:	9b 18       	sub	r9, r11
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <vfprintf+0x330>
     da0:	b2 14       	cp	r11, r2
     da2:	60 f4       	brcc	.+24     	; 0xdbc <vfprintf+0x330>
     da4:	b6 01       	movw	r22, r12
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     dae:	b3 94       	inc	r11
     db0:	f7 cf       	rjmp	.-18     	; 0xda0 <vfprintf+0x314>
     db2:	b2 14       	cp	r11, r2
     db4:	18 f4       	brcc	.+6      	; 0xdbc <vfprintf+0x330>
     db6:	2b 18       	sub	r2, r11
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x332>
     dba:	98 2c       	mov	r9, r8
     dbc:	21 2c       	mov	r2, r1
     dbe:	a4 fe       	sbrs	r10, 4
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <vfprintf+0x356>
     dc2:	b6 01       	movw	r22, r12
     dc4:	80 e3       	ldi	r24, 0x30	; 48
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     dcc:	a2 fe       	sbrs	r10, 2
     dce:	17 c0       	rjmp	.+46     	; 0xdfe <vfprintf+0x372>
     dd0:	a1 fc       	sbrc	r10, 1
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <vfprintf+0x34e>
     dd4:	88 e7       	ldi	r24, 0x78	; 120
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x352>
     dda:	88 e5       	ldi	r24, 0x58	; 88
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	b6 01       	movw	r22, r12
     de0:	0c c0       	rjmp	.+24     	; 0xdfa <vfprintf+0x36e>
     de2:	8a 2d       	mov	r24, r10
     de4:	86 78       	andi	r24, 0x86	; 134
     de6:	59 f0       	breq	.+22     	; 0xdfe <vfprintf+0x372>
     de8:	a1 fe       	sbrs	r10, 1
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x364>
     dec:	8b e2       	ldi	r24, 0x2B	; 43
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <vfprintf+0x366>
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	a7 fc       	sbrc	r10, 7
     df4:	8d e2       	ldi	r24, 0x2D	; 45
     df6:	b6 01       	movw	r22, r12
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     dfe:	89 14       	cp	r8, r9
     e00:	38 f4       	brcc	.+14     	; 0xe10 <vfprintf+0x384>
     e02:	b6 01       	movw	r22, r12
     e04:	80 e3       	ldi	r24, 0x30	; 48
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     e0c:	9a 94       	dec	r9
     e0e:	f7 cf       	rjmp	.-18     	; 0xdfe <vfprintf+0x372>
     e10:	8a 94       	dec	r8
     e12:	f3 01       	movw	r30, r6
     e14:	e8 0d       	add	r30, r8
     e16:	f1 1d       	adc	r31, r1
     e18:	80 81       	ld	r24, Z
     e1a:	b6 01       	movw	r22, r12
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     e22:	81 10       	cpse	r8, r1
     e24:	f5 cf       	rjmp	.-22     	; 0xe10 <vfprintf+0x384>
     e26:	22 20       	and	r2, r2
     e28:	09 f4       	brne	.+2      	; 0xe2c <vfprintf+0x3a0>
     e2a:	42 ce       	rjmp	.-892    	; 0xab0 <vfprintf+0x24>
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 3d 07 	call	0xe7a	; 0xe7a <fputc>
     e36:	2a 94       	dec	r2
     e38:	f6 cf       	rjmp	.-20     	; 0xe26 <vfprintf+0x39a>
     e3a:	f6 01       	movw	r30, r12
     e3c:	86 81       	ldd	r24, Z+6	; 0x06
     e3e:	97 81       	ldd	r25, Z+7	; 0x07
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <vfprintf+0x3ba>
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	9f ef       	ldi	r25, 0xFF	; 255
     e46:	2b 96       	adiw	r28, 0x0b	; 11
     e48:	e2 e1       	ldi	r30, 0x12	; 18
     e4a:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__epilogue_restores__>

00000e4e <strnlen_P>:
     e4e:	fc 01       	movw	r30, r24
     e50:	05 90       	lpm	r0, Z+
     e52:	61 50       	subi	r22, 0x01	; 1
     e54:	70 40       	sbci	r23, 0x00	; 0
     e56:	01 10       	cpse	r0, r1
     e58:	d8 f7       	brcc	.-10     	; 0xe50 <strnlen_P+0x2>
     e5a:	80 95       	com	r24
     e5c:	90 95       	com	r25
     e5e:	8e 0f       	add	r24, r30
     e60:	9f 1f       	adc	r25, r31
     e62:	08 95       	ret

00000e64 <strnlen>:
     e64:	fc 01       	movw	r30, r24
     e66:	61 50       	subi	r22, 0x01	; 1
     e68:	70 40       	sbci	r23, 0x00	; 0
     e6a:	01 90       	ld	r0, Z+
     e6c:	01 10       	cpse	r0, r1
     e6e:	d8 f7       	brcc	.-10     	; 0xe66 <strnlen+0x2>
     e70:	80 95       	com	r24
     e72:	90 95       	com	r25
     e74:	8e 0f       	add	r24, r30
     e76:	9f 1f       	adc	r25, r31
     e78:	08 95       	ret

00000e7a <fputc>:
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	fb 01       	movw	r30, r22
     e84:	23 81       	ldd	r18, Z+3	; 0x03
     e86:	21 fd       	sbrc	r18, 1
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <fputc+0x16>
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
     e8e:	2c c0       	rjmp	.+88     	; 0xee8 <fputc+0x6e>
     e90:	22 ff       	sbrs	r18, 2
     e92:	16 c0       	rjmp	.+44     	; 0xec0 <fputc+0x46>
     e94:	46 81       	ldd	r20, Z+6	; 0x06
     e96:	57 81       	ldd	r21, Z+7	; 0x07
     e98:	24 81       	ldd	r18, Z+4	; 0x04
     e9a:	35 81       	ldd	r19, Z+5	; 0x05
     e9c:	42 17       	cp	r20, r18
     e9e:	53 07       	cpc	r21, r19
     ea0:	44 f4       	brge	.+16     	; 0xeb2 <fputc+0x38>
     ea2:	a0 81       	ld	r26, Z
     ea4:	b1 81       	ldd	r27, Z+1	; 0x01
     ea6:	9d 01       	movw	r18, r26
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	31 83       	std	Z+1, r19	; 0x01
     eae:	20 83       	st	Z, r18
     eb0:	8c 93       	st	X, r24
     eb2:	26 81       	ldd	r18, Z+6	; 0x06
     eb4:	37 81       	ldd	r19, Z+7	; 0x07
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	37 83       	std	Z+7, r19	; 0x07
     ebc:	26 83       	std	Z+6, r18	; 0x06
     ebe:	14 c0       	rjmp	.+40     	; 0xee8 <fputc+0x6e>
     ec0:	8b 01       	movw	r16, r22
     ec2:	ec 01       	movw	r28, r24
     ec4:	fb 01       	movw	r30, r22
     ec6:	00 84       	ldd	r0, Z+8	; 0x08
     ec8:	f1 85       	ldd	r31, Z+9	; 0x09
     eca:	e0 2d       	mov	r30, r0
     ecc:	09 95       	icall
     ece:	89 2b       	or	r24, r25
     ed0:	e1 f6       	brne	.-72     	; 0xe8a <fputc+0x10>
     ed2:	d8 01       	movw	r26, r16
     ed4:	16 96       	adiw	r26, 0x06	; 6
     ed6:	8d 91       	ld	r24, X+
     ed8:	9c 91       	ld	r25, X
     eda:	17 97       	sbiw	r26, 0x07	; 7
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	17 96       	adiw	r26, 0x07	; 7
     ee0:	9c 93       	st	X, r25
     ee2:	8e 93       	st	-X, r24
     ee4:	16 97       	sbiw	r26, 0x06	; 6
     ee6:	ce 01       	movw	r24, r28
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <__ultoa_invert>:
     ef2:	fa 01       	movw	r30, r20
     ef4:	aa 27       	eor	r26, r26
     ef6:	28 30       	cpi	r18, 0x08	; 8
     ef8:	51 f1       	breq	.+84     	; 0xf4e <__ultoa_invert+0x5c>
     efa:	20 31       	cpi	r18, 0x10	; 16
     efc:	81 f1       	breq	.+96     	; 0xf5e <__ultoa_invert+0x6c>
     efe:	e8 94       	clt
     f00:	6f 93       	push	r22
     f02:	6e 7f       	andi	r22, 0xFE	; 254
     f04:	6e 5f       	subi	r22, 0xFE	; 254
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	af 4f       	sbci	r26, 0xFF	; 255
     f0e:	b1 e0       	ldi	r27, 0x01	; 1
     f10:	3e d0       	rcall	.+124    	; 0xf8e <__ultoa_invert+0x9c>
     f12:	b4 e0       	ldi	r27, 0x04	; 4
     f14:	3c d0       	rcall	.+120    	; 0xf8e <__ultoa_invert+0x9c>
     f16:	67 0f       	add	r22, r23
     f18:	78 1f       	adc	r23, r24
     f1a:	89 1f       	adc	r24, r25
     f1c:	9a 1f       	adc	r25, r26
     f1e:	a1 1d       	adc	r26, r1
     f20:	68 0f       	add	r22, r24
     f22:	79 1f       	adc	r23, r25
     f24:	8a 1f       	adc	r24, r26
     f26:	91 1d       	adc	r25, r1
     f28:	a1 1d       	adc	r26, r1
     f2a:	6a 0f       	add	r22, r26
     f2c:	71 1d       	adc	r23, r1
     f2e:	81 1d       	adc	r24, r1
     f30:	91 1d       	adc	r25, r1
     f32:	a1 1d       	adc	r26, r1
     f34:	20 d0       	rcall	.+64     	; 0xf76 <__ultoa_invert+0x84>
     f36:	09 f4       	brne	.+2      	; 0xf3a <__ultoa_invert+0x48>
     f38:	68 94       	set
     f3a:	3f 91       	pop	r19
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	26 9f       	mul	r18, r22
     f40:	11 24       	eor	r1, r1
     f42:	30 19       	sub	r19, r0
     f44:	30 5d       	subi	r19, 0xD0	; 208
     f46:	31 93       	st	Z+, r19
     f48:	de f6       	brtc	.-74     	; 0xf00 <__ultoa_invert+0xe>
     f4a:	cf 01       	movw	r24, r30
     f4c:	08 95       	ret
     f4e:	46 2f       	mov	r20, r22
     f50:	47 70       	andi	r20, 0x07	; 7
     f52:	40 5d       	subi	r20, 0xD0	; 208
     f54:	41 93       	st	Z+, r20
     f56:	b3 e0       	ldi	r27, 0x03	; 3
     f58:	0f d0       	rcall	.+30     	; 0xf78 <__ultoa_invert+0x86>
     f5a:	c9 f7       	brne	.-14     	; 0xf4e <__ultoa_invert+0x5c>
     f5c:	f6 cf       	rjmp	.-20     	; 0xf4a <__ultoa_invert+0x58>
     f5e:	46 2f       	mov	r20, r22
     f60:	4f 70       	andi	r20, 0x0F	; 15
     f62:	40 5d       	subi	r20, 0xD0	; 208
     f64:	4a 33       	cpi	r20, 0x3A	; 58
     f66:	18 f0       	brcs	.+6      	; 0xf6e <__ultoa_invert+0x7c>
     f68:	49 5d       	subi	r20, 0xD9	; 217
     f6a:	31 fd       	sbrc	r19, 1
     f6c:	40 52       	subi	r20, 0x20	; 32
     f6e:	41 93       	st	Z+, r20
     f70:	02 d0       	rcall	.+4      	; 0xf76 <__ultoa_invert+0x84>
     f72:	a9 f7       	brne	.-22     	; 0xf5e <__ultoa_invert+0x6c>
     f74:	ea cf       	rjmp	.-44     	; 0xf4a <__ultoa_invert+0x58>
     f76:	b4 e0       	ldi	r27, 0x04	; 4
     f78:	a6 95       	lsr	r26
     f7a:	97 95       	ror	r25
     f7c:	87 95       	ror	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	ba 95       	dec	r27
     f84:	c9 f7       	brne	.-14     	; 0xf78 <__ultoa_invert+0x86>
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	61 05       	cpc	r22, r1
     f8a:	71 05       	cpc	r23, r1
     f8c:	08 95       	ret
     f8e:	9b 01       	movw	r18, r22
     f90:	ac 01       	movw	r20, r24
     f92:	0a 2e       	mov	r0, r26
     f94:	06 94       	lsr	r0
     f96:	57 95       	ror	r21
     f98:	47 95       	ror	r20
     f9a:	37 95       	ror	r19
     f9c:	27 95       	ror	r18
     f9e:	ba 95       	dec	r27
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__ultoa_invert+0xa2>
     fa2:	62 0f       	add	r22, r18
     fa4:	73 1f       	adc	r23, r19
     fa6:	84 1f       	adc	r24, r20
     fa8:	95 1f       	adc	r25, r21
     faa:	a0 1d       	adc	r26, r0
     fac:	08 95       	ret

00000fae <eeprom_read_byte>:
     fae:	f9 99       	sbic	0x1f, 1	; 31
     fb0:	fe cf       	rjmp	.-4      	; 0xfae <eeprom_read_byte>
     fb2:	92 bd       	out	0x22, r25	; 34
     fb4:	81 bd       	out	0x21, r24	; 33
     fb6:	f8 9a       	sbi	0x1f, 0	; 31
     fb8:	99 27       	eor	r25, r25
     fba:	80 b5       	in	r24, 0x20	; 32
     fbc:	08 95       	ret

00000fbe <__prologue_saves__>:
     fbe:	2f 92       	push	r2
     fc0:	3f 92       	push	r3
     fc2:	4f 92       	push	r4
     fc4:	5f 92       	push	r5
     fc6:	6f 92       	push	r6
     fc8:	7f 92       	push	r7
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	ca 1b       	sub	r28, r26
     fe8:	db 0b       	sbc	r29, r27
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	09 94       	ijmp

00000ff6 <__epilogue_restores__>:
     ff6:	2a 88       	ldd	r2, Y+18	; 0x12
     ff8:	39 88       	ldd	r3, Y+17	; 0x11
     ffa:	48 88       	ldd	r4, Y+16	; 0x10
     ffc:	5f 84       	ldd	r5, Y+15	; 0x0f
     ffe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1000:	7d 84       	ldd	r7, Y+13	; 0x0d
    1002:	8c 84       	ldd	r8, Y+12	; 0x0c
    1004:	9b 84       	ldd	r9, Y+11	; 0x0b
    1006:	aa 84       	ldd	r10, Y+10	; 0x0a
    1008:	b9 84       	ldd	r11, Y+9	; 0x09
    100a:	c8 84       	ldd	r12, Y+8	; 0x08
    100c:	df 80       	ldd	r13, Y+7	; 0x07
    100e:	ee 80       	ldd	r14, Y+6	; 0x06
    1010:	fd 80       	ldd	r15, Y+5	; 0x05
    1012:	0c 81       	ldd	r16, Y+4	; 0x04
    1014:	1b 81       	ldd	r17, Y+3	; 0x03
    1016:	aa 81       	ldd	r26, Y+2	; 0x02
    1018:	b9 81       	ldd	r27, Y+1	; 0x01
    101a:	ce 0f       	add	r28, r30
    101c:	d1 1d       	adc	r29, r1
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	ed 01       	movw	r28, r26
    102a:	08 95       	ret

0000102c <_exit>:
    102c:	f8 94       	cli

0000102e <__stop_program>:
    102e:	ff cf       	rjmp	.-2      	; 0x102e <__stop_program>
