
B393_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  00000336  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001255  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd7  00000000  00000000  0000225d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063a  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043b  00000000  00000000  0000363e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 32       	cpi	r26, 0x29	; 41
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 29 01 	call	0x252	; 0x252 <main>
  88:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <board_init>:

volatile Circuit *Circ;

void board_init()
{
    circuit_init();
  90:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <circuit_init>
    Circ = get_circuit();
  94:	0e 94 f7 00 	call	0x1ee	; 0x1ee <get_circuit>
  98:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  9c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	gpio_init();
  a0:	0e 94 8a 00 	call	0x114	; 0x114 <gpio_init>
  a4:	08 95       	ret

000000a6 <uart_setup>:

void uart_setup()
{
	 /* Set Baudrate  */
	 unsigned int ubrr = BAUD_RATE_115200_BPS;
	 UBRR0H = (ubrr>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	 UBRR0L = (ubrr);
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 
	 UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
  b0:	96 e0       	ldi	r25, 0x06	; 6
  b2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	 UCSR0B = ( 1 << TXEN0 ); /* Enable  transmitter                 */
  b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ba:	08 95       	ret

000000bc <spi_xfer>:
}


uint8_t spi_xfer(uint8_t cs_pin, uint8_t data)
{
	SPDR = data;	
  bc:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
  be:	0d b4       	in	r0, 0x2d	; 45
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <spi_xfer+0x2>
	
	return SPDR;
  c4:	8e b5       	in	r24, 0x2e	; 46
}
  c6:	08 95       	ret

000000c8 <spi_write>:
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
	}
}

void spi_write(uint8_t cs_pin, uint8_t reg, uint8_t data)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	06 2f       	mov	r16, r22
  d2:	14 2f       	mov	r17, r20
	SPI_PORT &= ~( 1 << cs_pin );
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	c1 e0       	ldi	r28, 0x01	; 1
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_write+0x18>
  dc:	cc 0f       	add	r28, r28
  de:	dd 1f       	adc	r29, r29
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_write+0x14>
  e4:	8c 2f       	mov	r24, r28
  e6:	80 95       	com	r24
  e8:	98 23       	and	r25, r24
  ea:	98 b9       	out	0x08, r25	; 8
		spi_xfer(SPI_CS1, MCP23S08_OPCOD);
  ec:	60 e4       	ldi	r22, 0x40	; 64
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_xfer>
		spi_xfer(SPI_CS1, reg);
  f4:	60 2f       	mov	r22, r16
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_xfer>
		spi_xfer(SPI_CS1, data);
  fc:	61 2f       	mov	r22, r17
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
 104:	88 b1       	in	r24, 0x08	; 8
 106:	c8 2b       	or	r28, r24
 108:	c8 b9       	out	0x08, r28	; 8
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <gpio_init>:
#include "includes/gpio_driver.h"

void gpio_init()
{

	cli();
 114:	f8 94       	cli
	// PB4 pin 18 IN	SPI_MISO
	// PB5 pin 19 OUT	SPI_SCK
	// PB6 pin 09 XTAL
	// PB7 pin 10 XTAL
	// X X 1 0 1 1 0 0
	DDRB = 0x2C;
 116:	8c e2       	ldi	r24, 0x2C	; 44
 118:	84 b9       	out	0x04, r24	; 4
	// PC4 pin 27 IN	YPS_REPR
	// PC5 pin 28 IN	YSP_FORW
	// PC6 pin 01		RESET
	// PC7 N/C
	// X X 0 0 0 0 1 1
	DDRC |= 0x03;
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	87 b9       	out	0x07, r24	; 7
	// PD4 pin 06 IN	YPS_REW
	// PD5 pin 11 IN	YPS_CUT
	// PD6 pin 12 IN	YBI_END
	// PD7 pin 13 IN	YBI_MOVE
	// 0 0 0 0 0 0 1 0
	DDRD = 0x02;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	8a b9       	out	0x0a, r24	; 10
	
	uart_setup();
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_setup>
	
	// enable SPI, set as master, and clock to fosc/128
	PORTC = 0xff;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	88 b9       	out	0x08, r24	; 8
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
 12c:	83 e5       	ldi	r24, 0x53	; 83
 12e:	8c bd       	out	0x2c, r24	; 44
	spi_write(SPI_CS1, MCP23S08_IODIR, 0x00); // configure MCP23S08 01 as output
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 64 00 	call	0xc8	; 0xc8 <spi_write>
	spi_write(SPI_CS2, MCP23S08_IODIR, 0x00); // configure MCP23S08 02 as output
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 64 00 	call	0xc8	; 0xc8 <spi_write>
 144:	08 95       	ret

00000146 <spi_read>:
		spi_xfer(SPI_CS1, data);
	SPI_PORT |= ( 1 << cs_pin );
}

uint8_t spi_read(uint8_t cs_pin, uint8_t reg)
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	06 2f       	mov	r16, r22
	uint8_t data;
	SPI_PORT &= ~( 1 << cs_pin );
 152:	88 b1       	in	r24, 0x08	; 8
 154:	c1 e0       	ldi	r28, 0x01	; 1
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	01 2e       	mov	r0, r17
 15a:	02 c0       	rjmp	.+4      	; 0x160 <spi_read+0x1a>
 15c:	cc 0f       	add	r28, r28
 15e:	dd 1f       	adc	r29, r29
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <spi_read+0x16>
 164:	9c 2f       	mov	r25, r28
 166:	90 95       	com	r25
 168:	89 23       	and	r24, r25
 16a:	88 b9       	out	0x08, r24	; 8
		spi_xfer(cs_pin, MCP23S08_OPCOD + 0x01);
 16c:	61 e4       	ldi	r22, 0x41	; 65
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_xfer>
		spi_xfer(cs_pin, reg);
 174:	60 2f       	mov	r22, r16
 176:	81 2f       	mov	r24, r17
 178:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_xfer>
		data = spi_xfer(cs_pin, 0xff); // dummy byte
 17c:	6f ef       	ldi	r22, 0xFF	; 255
 17e:	81 2f       	mov	r24, r17
 180:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
 184:	98 b1       	in	r25, 0x08	; 8
 186:	c9 2b       	or	r28, r25
 188:	c8 b9       	out	0x08, r28	; 8
	
	return (uint8_t)data;
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	08 95       	ret

00000194 <spi_gpio>:
	 UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
	 UCSR0B = ( 1 << TXEN0 ); /* Enable  transmitter                 */
}

void spi_gpio(uint8_t io_pin, uint8_t val)
{
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d8 2f       	mov	r29, r24
 19c:	16 2f       	mov	r17, r22
	uint8_t cs_pin = ( io_pin >> 4 ) & 0x01;
 19e:	84 fb       	bst	r24, 4
 1a0:	cc 27       	eor	r28, r28
 1a2:	c0 f9       	bld	r28, 0
	
	uint8_t data = spi_read(cs_pin, MCP23S08_GPIO);
 1a4:	69 e0       	ldi	r22, 0x09	; 9
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 a3 00 	call	0x146	; 0x146 <spi_read>
	
	if ( val )
 1ac:	11 23       	and	r17, r17
 1ae:	69 f0       	breq	.+26     	; 0x1ca <spi_gpio+0x36>
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data | ( 1 << io_pin ) ) );
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <spi_gpio+0x26>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	da 95       	dec	r29
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <spi_gpio+0x22>
 1be:	48 2b       	or	r20, r24
 1c0:	69 e0       	ldi	r22, 0x09	; 9
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 64 00 	call	0xc8	; 0xc8 <spi_write>
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <spi_gpio+0x52>
	}
	else
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <spi_gpio+0x40>
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	da 95       	dec	r29
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <spi_gpio+0x3c>
 1d8:	20 95       	com	r18
 1da:	42 2f       	mov	r20, r18
 1dc:	48 23       	and	r20, r24
 1de:	69 e0       	ldi	r22, 0x09	; 9
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <spi_write>
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <get_circuit>:
Circuit circuit;

Circuit * get_circuit()
{
    return &circuit;
}
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	08 95       	ret

000001f4 <circuit_init>:

void circuit_init()
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <circuit_init+0xa>
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < NUM_OF_FLIPFLOPS; i++)
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	13 c0       	rjmp	.+38     	; 0x230 <circuit_init+0x3c>
    {
        FlipFlop tmp_ff;
        make_flipflop(&tmp_ff);
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 23 01 	call	0x246	; 0x246 <make_flipflop>
        circuit.ffs[i] = tmp_ff;
 212:	f8 01       	movw	r30, r16
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e0 0f       	add	r30, r16
 21a:	f1 1f       	adc	r31, r17
 21c:	ee 5f       	subi	r30, 0xFE	; 254
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	ab 81       	ldd	r26, Y+3	; 0x03
 226:	80 83       	st	Z, r24
 228:	91 83       	std	Z+1, r25	; 0x01
 22a:	a2 83       	std	Z+2, r26	; 0x02
    return &circuit;
}

void circuit_init()
{
    for (int i = 0; i < NUM_OF_FLIPFLOPS; i++)
 22c:	0f 5f       	subi	r16, 0xFF	; 255
 22e:	1f 4f       	sbci	r17, 0xFF	; 255
 230:	05 30       	cpi	r16, 0x05	; 5
 232:	11 05       	cpc	r17, r1
 234:	54 f3       	brlt	.-44     	; 0x20a <circuit_init+0x16>
    {
        FlipFlop tmp_ff;
        make_flipflop(&tmp_ff);
        circuit.ffs[i] = tmp_ff;
    }
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <make_flipflop>:
#include "includes/logic_gates.h"

void make_flipflop(FlipFlop *new_flipflop)
{
 246:	fc 01       	movw	r30, r24
	new_flipflop->reset_port	= true;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 83       	st	Z, r24
	new_flipflop->set_port		= true;
 24c:	81 83       	std	Z+1, r24	; 0x01
	new_flipflop->set_state		= true;
 24e:	82 83       	std	Z+2, r24	; 0x02
 250:	08 95       	ret

00000252 <main>:

#include <util/delay.h>

int main(void)
{
    board_init();
 252:	0e 94 48 00 	call	0x90	; 0x90 <board_init>
	PORTC &= ~(1<<YPS_REC_PIN);
 256:	88 b1       	in	r24, 0x08	; 8
 258:	8b 7f       	andi	r24, 0xFB	; 251
 25a:	88 b9       	out	0x08, r24	; 8
 
while(1)
	{
		if ( _READ_PIN(YPS_REC_PORT, YPS_REC_PIN) )
 25c:	32 9b       	sbis	0x06, 2	; 6
 25e:	17 c0       	rjmp	.+46     	; 0x28e <main+0x3c>
		{ 
			spi_gpio(YBI_FF3, 1); 	
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	0e 94 ca 00 	call	0x194	; 0x194 <spi_gpio>
			UDR0 = spi_read(0,9);
 268:	69 e0       	ldi	r22, 0x09	; 9
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 a3 00 	call	0x146	; 0x146 <spi_read>
 270:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			while (!( UCSR0A & (1<<UDRE0)));
 274:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 278:	85 ff       	sbrs	r24, 5
 27a:	fc cf       	rjmp	.-8      	; 0x274 <main+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	81 ee       	ldi	r24, 0xE1	; 225
 280:	94 e0       	ldi	r25, 0x04	; 4
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x30>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x3a>
 28c:	00 00       	nop
		}

		//spi_gpio(YBI_DIR, 1);


		spi_gpio(YBI_FF3, 0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	0e 94 ca 00 	call	0x194	; 0x194 <spi_gpio>
		//spi_gpio(YBI_DIR, 0);
		UDR0 = spi_read(0,9);
 296:	69 e0       	ldi	r22, 0x09	; 9
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 a3 00 	call	0x146	; 0x146 <spi_read>
 29e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while (!( UCSR0A & (1<<UDRE0)));
 2a2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2a6:	85 ff       	sbrs	r24, 5
 2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <main+0x50>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	81 ee       	ldi	r24, 0xE1	; 225
 2ae:	94 e0       	ldi	r25, 0x04	; 4
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x5e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x68>
 2ba:	00 00       	nop
 2bc:	cf cf       	rjmp	.-98     	; 0x25c <main+0xa>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
