
B393_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001032  000010c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001032  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800122  00800122  000010e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f7  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8b  00000000  00000000  000027bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c19  00000000  00000000  0000324a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00003e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab8  00000000  00000000  00004972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000542a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_1>
       8:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_2>
       c:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_3>
      10:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_4>
      14:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e3       	ldi	r30, 0x32	; 50
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 32       	cpi	r26, 0x22	; 34
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e2       	ldi	r26, 0x22	; 34
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 34       	cpi	r26, 0x43	; 67
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 84 04 	call	0x908	; 0x908 <main>
      9e:	0c 94 17 08 	jmp	0x102e	; 0x102e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <gpio_send_str>:
	
	sei();
}

void gpio_send_str(char * str)
{
      a6:	ac 01       	movw	r20, r24
	for (int i = 0; i < UART_TX_BUFFER; i++)
      a8:	20 e0       	ldi	r18, 0x00	; 0
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	0e c0       	rjmp	.+28     	; 0xca <gpio_send_str+0x24>
	{
		if ( str[i] == 0 ) break;
      ae:	fa 01       	movw	r30, r20
      b0:	e2 0f       	add	r30, r18
      b2:	f3 1f       	adc	r31, r19
      b4:	90 81       	ld	r25, Z
      b6:	99 23       	and	r25, r25
      b8:	59 f0       	breq	.+22     	; 0xd0 <gpio_send_str+0x2a>
		UDR0 = (char)str[i];
      ba:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while (!( UCSR0A & (1<<UDRE0)));
      be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      c2:	95 ff       	sbrs	r25, 5
      c4:	fc cf       	rjmp	.-8      	; 0xbe <gpio_send_str+0x18>
	sei();
}

void gpio_send_str(char * str)
{
	for (int i = 0; i < UART_TX_BUFFER; i++)
      c6:	2f 5f       	subi	r18, 0xFF	; 255
      c8:	3f 4f       	sbci	r19, 0xFF	; 255
      ca:	28 32       	cpi	r18, 0x28	; 40
      cc:	31 05       	cpc	r19, r1
      ce:	7c f3       	brlt	.-34     	; 0xae <gpio_send_str+0x8>
      d0:	08 95       	ret

000000d2 <gpio_do_uart_rx>:
	
	sei();
}

void gpio_do_uart_rx(uint8_t ch)
{
      d2:	ef 92       	push	r14
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	a8 97       	sbiw	r28, 0x28	; 40
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	08 2f       	mov	r16, r24
	cli();
      f0:	f8 94       	cli
	
	char str[UART_TX_BUFFER] = {0};
      f2:	fe 01       	movw	r30, r28
      f4:	31 96       	adiw	r30, 0x01	; 1
      f6:	88 e2       	ldi	r24, 0x28	; 40
      f8:	df 01       	movw	r26, r30
      fa:	1d 92       	st	X+, r1
      fc:	8a 95       	dec	r24
      fe:	e9 f7       	brne	.-6      	; 0xfa <gpio_do_uart_rx+0x28>
// 		sprintf(str, "Direction = %d\n", Circ->signal_input[MOVE_IN]);
// 		gpio_send_str(str);
		
	}
	
	if ( ch == 0x32 )
     100:	02 33       	cpi	r16, 0x32	; 50
     102:	b9 f5       	brne	.+110    	; 0x172 <gpio_do_uart_rx+0xa0>
	{
		sprintf(str, "Output = ");
     104:	8a e0       	ldi	r24, 0x0A	; 10
     106:	e7 e0       	ldi	r30, 0x07	; 7
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	de 01       	movw	r26, r28
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	01 90       	ld	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	8a 95       	dec	r24
     114:	e1 f7       	brne	.-8      	; 0x10e <gpio_do_uart_rx+0x3c>
		gpio_send_str(str);
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
		
		for ( SignalOutputs i = 1; i < 6; i++)
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	1e c0       	rjmp	.+60     	; 0x15e <gpio_do_uart_rx+0x8c>
		{		
			sprintf(str, "%d ", Circ->signal_output[i]);
     122:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     126:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     12a:	e1 0f       	add	r30, r17
     12c:	f1 1d       	adc	r31, r1
     12e:	82 85       	ldd	r24, Z+10	; 0x0a
     130:	1f 92       	push	r1
     132:	8f 93       	push	r24
     134:	81 e1       	ldi	r24, 0x11	; 17
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	9f 93       	push	r25
     13a:	8f 93       	push	r24
     13c:	ce 01       	movw	r24, r28
     13e:	01 96       	adiw	r24, 0x01	; 1
     140:	7c 01       	movw	r14, r24
     142:	9f 93       	push	r25
     144:	8f 93       	push	r24
     146:	0e 94 25 05 	call	0xa4a	; 0xa4a <sprintf>
			gpio_send_str(str);
     14a:	c7 01       	movw	r24, r14
     14c:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
	if ( ch == 0x32 )
	{
		sprintf(str, "Output = ");
		gpio_send_str(str);
		
		for ( SignalOutputs i = 1; i < 6; i++)
     150:	1f 5f       	subi	r17, 0xFF	; 255
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	16 30       	cpi	r17, 0x06	; 6
     160:	00 f3       	brcs	.-64     	; 0x122 <gpio_do_uart_rx+0x50>
		{		
			sprintf(str, "%d ", Circ->signal_output[i]);
			gpio_send_str(str);
		}
		
		sprintf(str, "\n");
     162:	8a e0       	ldi	r24, 0x0A	; 10
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	9a 83       	std	Y+2, r25	; 0x02
     168:	89 83       	std	Y+1, r24	; 0x01
		gpio_send_str(str);
     16a:	ce 01       	movw	r24, r28
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
		
	}
	
	if ( ch == 0x33 )
     172:	03 33       	cpi	r16, 0x33	; 51
     174:	59 f5       	brne	.+86     	; 0x1cc <gpio_do_uart_rx+0xfa>
     176:	1f c0       	rjmp	.+62     	; 0x1b6 <gpio_do_uart_rx+0xe4>
	{
		for ( SignalInputs i = 0; i < NUM_OF_INPUTS; i++)
		{
			//char *inp[] = { "FAD_IN", "REC_IN", "END_IN", "CUT_IN", "REW_IN", "STOP_IN", "MOVE_IN", "FORW_IN", "REPR_IN", "LOW_IN" };
			sprintf(str, "%d ", Circ->signal_input[i]);
     178:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     17c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     180:	e1 0f       	add	r30, r17
     182:	f1 1d       	adc	r31, r1
     184:	80 81       	ld	r24, Z
     186:	1f 92       	push	r1
     188:	8f 93       	push	r24
     18a:	81 e1       	ldi	r24, 0x11	; 17
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	9f 93       	push	r25
     190:	8f 93       	push	r24
     192:	de 01       	movw	r26, r28
     194:	11 96       	adiw	r26, 0x01	; 1
     196:	7d 01       	movw	r14, r26
     198:	bf 93       	push	r27
     19a:	af 93       	push	r26
     19c:	0e 94 25 05 	call	0xa4a	; 0xa4a <sprintf>
			gpio_send_str(str);
     1a0:	c7 01       	movw	r24, r14
     1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
		
	}
	
	if ( ch == 0x33 )
	{
		for ( SignalInputs i = 0; i < NUM_OF_INPUTS; i++)
     1a6:	1f 5f       	subi	r17, 0xFF	; 255
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <gpio_do_uart_rx+0xe6>
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	1a 30       	cpi	r17, 0x0A	; 10
     1ba:	f0 f2       	brcs	.-68     	; 0x178 <gpio_do_uart_rx+0xa6>
			//char *inp[] = { "FAD_IN", "REC_IN", "END_IN", "CUT_IN", "REW_IN", "STOP_IN", "MOVE_IN", "FORW_IN", "REPR_IN", "LOW_IN" };
			sprintf(str, "%d ", Circ->signal_input[i]);
			gpio_send_str(str);
		}
		
		sprintf(str, "\n");
     1bc:	8a e0       	ldi	r24, 0x0A	; 10
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	9a 83       	std	Y+2, r25	; 0x02
     1c2:	89 83       	std	Y+1, r24	; 0x01
		gpio_send_str(str);
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
	}
	
	if ( ch == 0x34 )
     1cc:	04 33       	cpi	r16, 0x34	; 52
     1ce:	d9 f4       	brne	.+54     	; 0x206 <gpio_do_uart_rx+0x134>
	{
		sprintf(str, "State = %x\n", Circ->state);
     1d0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     1d4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     1d8:	83 8d       	ldd	r24, Z+27	; 0x1b
     1da:	1f 92       	push	r1
     1dc:	8f 93       	push	r24
     1de:	85 e1       	ldi	r24, 0x15	; 21
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	9f 93       	push	r25
     1e4:	8f 93       	push	r24
     1e6:	8e 01       	movw	r16, r28
     1e8:	0f 5f       	subi	r16, 0xFF	; 255
     1ea:	1f 4f       	sbci	r17, 0xFF	; 255
     1ec:	1f 93       	push	r17
     1ee:	0f 93       	push	r16
     1f0:	0e 94 25 05 	call	0xa4a	; 0xa4a <sprintf>
		gpio_send_str(str);
     1f4:	c8 01       	movw	r24, r16
     1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <gpio_send_str>
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
	}
	
	sei();
     206:	78 94       	sei
}
     208:	a8 96       	adiw	r28, 0x28	; 40
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret

00000222 <gpio_do_timer>:

void gpio_do_timer()
{
	static uint8_t mcu_led_period = 0;

	if ( ++mcu_led_period > 16)
     222:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     226:	8f 5f       	subi	r24, 0xFF	; 255
     228:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
     22c:	81 31       	cpi	r24, 0x11	; 17
     22e:	30 f0       	brcs	.+12     	; 0x23c <gpio_do_timer+0x1a>
	{
		PORTB ^= ( 1 << AUX_LED_PIN );
     230:	95 b1       	in	r25, 0x05	; 5
     232:	84 e0       	ldi	r24, 0x04	; 4
     234:	89 27       	eor	r24, r25
     236:	85 b9       	out	0x05, r24	; 5
		mcu_led_period = 0;
     238:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
	}
	TCNT1 = TIMER_1S;
     23c:	87 e1       	ldi	r24, 0x17	; 23
     23e:	9e ef       	ldi	r25, 0xFE	; 254
     240:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     244:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     248:	08 95       	ret

0000024a <gpio_do_update>:

}

void gpio_do_update()
{	
	Circ->signal_input[FAD_IN]	= _READ_PIN(YBI_FAD_PORT,	YBI_FAD_PIN);
     24a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     24e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     252:	83 b1       	in	r24, 0x03	; 3
     254:	81 70       	andi	r24, 0x01	; 1
     256:	80 83       	st	Z, r24
	Circ->signal_input[REC_IN]	= _READ_PIN(YPS_REC_PORT,	YPS_REC_PIN);
     258:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     25c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     260:	86 b1       	in	r24, 0x06	; 6
     262:	82 fb       	bst	r24, 2
     264:	88 27       	eor	r24, r24
     266:	80 f9       	bld	r24, 0
     268:	81 83       	std	Z+1, r24	; 0x01
	Circ->signal_input[END_IN]	= _READ_PIN(YBI_END_PORT,	YBI_END_PIN);
     26a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     26e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     272:	89 b1       	in	r24, 0x09	; 9
     274:	86 fb       	bst	r24, 6
     276:	88 27       	eor	r24, r24
     278:	80 f9       	bld	r24, 0
     27a:	82 83       	std	Z+2, r24	; 0x02
	Circ->signal_input[CUT_IN]	= _READ_PIN(YPS_CUT_PORT,	YPS_CUT_PIN);
     27c:	89 b1       	in	r24, 0x09	; 9
     27e:	85 fb       	bst	r24, 5
     280:	88 27       	eor	r24, r24
     282:	80 f9       	bld	r24, 0
     284:	83 83       	std	Z+3, r24	; 0x03
	Circ->signal_input[REW_IN]	= _READ_PIN(YPS_REW_PORT,	YPS_REW_PIN);
     286:	89 b1       	in	r24, 0x09	; 9
     288:	82 95       	swap	r24
     28a:	81 70       	andi	r24, 0x01	; 1
     28c:	84 83       	std	Z+4, r24	; 0x04
	Circ->signal_input[STOP_IN]	= _READ_PIN(YPS_STOP_PORT,	YPS_STOP_PIN);
     28e:	86 b1       	in	r24, 0x06	; 6
     290:	83 fb       	bst	r24, 3
     292:	88 27       	eor	r24, r24
     294:	80 f9       	bld	r24, 0
     296:	85 83       	std	Z+5, r24	; 0x05
	Circ->signal_input[MOVE_IN]	= _READ_PIN(YBI_MOVE_PORT,	YBI_MOVE_PIN);
     298:	89 b1       	in	r24, 0x09	; 9
     29a:	88 1f       	adc	r24, r24
     29c:	88 27       	eor	r24, r24
     29e:	88 1f       	adc	r24, r24
     2a0:	86 83       	std	Z+6, r24	; 0x06
	Circ->signal_input[FORW_IN]	= _READ_PIN(YPS_FORW_PORT,	YPS_FORW_PIN);
     2a2:	86 b1       	in	r24, 0x06	; 6
     2a4:	85 fb       	bst	r24, 5
     2a6:	88 27       	eor	r24, r24
     2a8:	80 f9       	bld	r24, 0
     2aa:	87 83       	std	Z+7, r24	; 0x07
	Circ->signal_input[REPR_IN]	= _READ_PIN(YPS_REPR_PORT,	YPS_REPR_PIN);
     2ac:	86 b1       	in	r24, 0x06	; 6
     2ae:	82 95       	swap	r24
     2b0:	81 70       	andi	r24, 0x01	; 1
     2b2:	80 87       	std	Z+8, r24	; 0x08
	Circ->signal_input[LOW_IN]	= _READ_PIN(YBI_LOW_PORT,	YBI_LOW_PIN);
     2b4:	83 b1       	in	r24, 0x03	; 3
     2b6:	86 95       	lsr	r24
     2b8:	81 70       	andi	r24, 0x01	; 1
     2ba:	81 87       	std	Z+9, r24	; 0x09

	circuit_update();
     2bc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <circuit_update>

	// values setup by logic circuit
	spi_gpio(YBI_MOV2,	Circ->signal_output[MOVE2_OUT]);
     2c0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     2c4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     2c8:	62 85       	ldd	r22, Z+10	; 0x0a
     2ca:	83 e1       	ldi	r24, 0x13	; 19
     2cc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_FF0,	Circ->signal_output[FF0_OUT]);
     2d0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     2d4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     2d8:	63 85       	ldd	r22, Z+11	; 0x0b
     2da:	82 e1       	ldi	r24, 0x12	; 18
     2dc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_FF1,	Circ->signal_output[FF1_OUT]);
     2e0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     2e4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     2e8:	64 85       	ldd	r22, Z+12	; 0x0c
     2ea:	81 e1       	ldi	r24, 0x11	; 17
     2ec:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_FF2,	Circ->signal_output[FF2_OUT]);
     2f0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     2f4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     2f8:	65 85       	ldd	r22, Z+13	; 0x0d
     2fa:	84 e1       	ldi	r24, 0x14	; 20
     2fc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_FF3,	Circ->signal_output[FF3_OUT]);
     300:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     304:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     308:	66 85       	ldd	r22, Z+14	; 0x0e
     30a:	85 e1       	ldi	r24, 0x15	; 21
     30c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_FF4,	Circ->signal_output[FF4_OUT]);
     310:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     314:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     318:	67 85       	ldd	r22, Z+15	; 0x0f
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_CUT,	Circ->signal_output[CUT_OUT]);
     320:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     324:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     328:	60 89       	ldd	r22, Z+16	; 0x10
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(B_REC,		Circ->signal_output[REC_OUT]);
     330:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     334:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     338:	61 89       	ldd	r22, Z+17	; 0x11
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_STOP,	0);
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	86 e0       	ldi	r24, 0x06	; 6
     344:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	
	spi_gpio(M4_1,		Circ->signal_output[M4_1_OUT]);
     348:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     34c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     350:	62 89       	ldd	r22, Z+18	; 0x12
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(M4_2,		Circ->signal_output[M4_2_OUT]);
     358:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     35c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     360:	63 89       	ldd	r22, Z+19	; 0x13
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(M4_3,		Circ->signal_output[M4_3_OUT]);
     368:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     36c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     370:	64 89       	ldd	r22, Z+20	; 0x14
     372:	86 e1       	ldi	r24, 0x16	; 22
     374:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(M4_4,		Circ->signal_output[M4_4_OUT]);
     378:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     37c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     380:	65 89       	ldd	r22, Z+21	; 0x15
     382:	87 e1       	ldi	r24, 0x17	; 23
     384:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	spi_gpio(YBI_DIR,	Circ->signal_output[DIR_OUT]);
     388:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     38c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     390:	66 89       	ldd	r22, Z+22	; 0x16
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
     398:	08 95       	ret

0000039a <gpio_init>:

volatile Circuit *Circ;

void gpio_init(uint8_t eeprom_register)
{
	cli();
     39a:	f8 94       	cli
	
	circuit_init();
     39c:	0e 94 c6 03 	call	0x78c	; 0x78c <circuit_init>
	Circ = circuit_get_circuit();
     3a0:	0e 94 c3 03 	call	0x786	; 0x786 <circuit_get_circuit>
     3a4:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <Circ+0x1>
     3a8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Circ>
	
	// 7 6 5 4 3 2 1 0
	// X X 1 0 1 1 0 0
	DDRB = 0x2C;	PORTB = 0xff;
     3ac:	8c e2       	ldi	r24, 0x2C	; 44
     3ae:	84 b9       	out	0x04, r24	; 4
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	85 b9       	out	0x05, r24	; 5
	// 7 6 5 4 3 2 1 0
	// X X 0 0 0 0 1 1
	DDRC |= 0x03;	PORTC = 0xff;
     3b4:	97 b1       	in	r25, 0x07	; 7
     3b6:	93 60       	ori	r25, 0x03	; 3
     3b8:	97 b9       	out	0x07, r25	; 7
     3ba:	88 b9       	out	0x08, r24	; 8
	// 7 6 5 4 3 2 1 0
	// 0 0 0 0 0 0 1 0
	DDRD = 0x02;	PORTD = 0xff;
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	9a b9       	out	0x0a, r25	; 10
     3c0:	8b b9       	out	0x0b, r24	; 11

	spi_init();
     3c2:	0e 94 b7 04 	call	0x96e	; 0x96e <spi_init>
	
	// UART SETUP
	unsigned int ubrr = BAUD_RATE_115200_BPS;
	UBRR0H = ( ubrr >> 8 );
     3c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = ( ubrr );
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = ( 1 << TXEN0 ) | ( 1 << RXEN0 ) | ( 1 << RXCIE0 ); // TX, RX and RX INT
     3d6:	88 e9       	ldi	r24, 0x98	; 152
     3d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	

	PCICR  |= (1 << PCIE0) | (1 << PCIE1)  | (1 << PCIE2);		
     3dc:	e8 e6       	ldi	r30, 0x68	; 104
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	87 60       	ori	r24, 0x07	; 7
     3e4:	80 83       	st	Z, r24
	PCMSK0 |= ( 1 << YBI_FAD_PIN ) | ( 1 << YBI_LOW_PIN );		
     3e6:	eb e6       	ldi	r30, 0x6B	; 107
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	83 60       	ori	r24, 0x03	; 3
     3ee:	80 83       	st	Z, r24
	PCMSK1 |= ( 1 << YPS_REC_PIN ) | ( 1 << YPS_STOP_PIN ) | ( 1 << YPS_REPR_PIN ) | ( 1 << YPS_FORW_PIN );
     3f0:	ec e6       	ldi	r30, 0x6C	; 108
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	8c 63       	ori	r24, 0x3C	; 60
     3f8:	80 83       	st	Z, r24
	PCMSK2 |= ( 1 << YPS_REW_PIN ) | ( 1 << YPS_CUT_PIN )  | ( 1 << YBI_END_PIN )  | ( 1 << YBI_MOVE_PIN );	
     3fa:	ed e6       	ldi	r30, 0x6D	; 109
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	80 6f       	ori	r24, 0xF0	; 240
     402:	80 83       	st	Z, r24

	// Main TIMER SETUP
	TCNT1 = TIMER_1S;
     404:	87 e1       	ldi	r24, 0x17	; 23
     406:	9e ef       	ldi	r25, 0xFE	; 254
     408:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     40c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = ( 1 << CS10 ) | ( 1 << CS12 ); // 16M / 1024 = 15625Hz
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCCR1A = 0x00; // overflow
     416:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TIMSK1 = ( 1 << TOIE1 ); // overflow int
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	// Clock Timer Setup
	TCCR0A = 0x00;
     420:	14 bc       	out	0x24, r1	; 36
	CLK_TMR_OFF; // 16M / 1024 = 15625Hz;
     422:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = ( 1 << TOIE0 );
     424:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 0x01;
     428:	86 bd       	out	0x26, r24	; 38
	
	// set the CLK pin to LOW
	spi_gpio(YBI_CLK, 0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	
	Circ->signal_output[M4_1_OUT] = 0;
     432:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     436:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     43a:	12 8a       	std	Z+18, r1	; 0x12
	Circ->signal_output[M4_2_OUT] = 0;
     43c:	13 8a       	std	Z+19, r1	; 0x13
	Circ->signal_output[M4_3_OUT] = 0;
     43e:	14 8a       	std	Z+20, r1	; 0x14
	Circ->signal_output[M4_4_OUT] = 0;
     440:	15 8a       	std	Z+21, r1	; 0x15
	
		// ENC B interrupt
	EICRA |= ( 1 << ISC10 );	// INT1 LEVEL CHANGE
     442:	e9 e6       	ldi	r30, 0x69	; 105
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	84 60       	ori	r24, 0x04	; 4
     44a:	80 83       	st	Z, r24
		
	EIMSK |= ( 1 << INT1 );
     44c:	8d b3       	in	r24, 0x1d	; 29
     44e:	82 60       	ori	r24, 0x02	; 2
     450:	8d bb       	out	0x1d, r24	; 29
	
	gpio_do_uart_rx(0x31);
     452:	81 e3       	ldi	r24, 0x31	; 49
     454:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
	gpio_do_uart_rx(0x32);
     458:	82 e3       	ldi	r24, 0x32	; 50
     45a:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
	gpio_do_uart_rx(0x33);
     45e:	83 e3       	ldi	r24, 0x33	; 51
     460:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
	gpio_do_uart_rx(0x34);
     464:	84 e3       	ldi	r24, 0x34	; 52
     466:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
	gpio_do_update();
     46a:	0e 94 25 01 	call	0x24a	; 0x24a <gpio_do_update>
	gpio_do_uart_rx(0x34);
     46e:	84 e3       	ldi	r24, 0x34	; 52
     470:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
	
	sei();
     474:	78 94       	sei
     476:	08 95       	ret

00000478 <gpio_trigger_clk>:
void gpio_trigger_clk()
{

	static volatile bool ping_pong = true;

	spi_gpio(YBI_CLK, true);
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	CLK_TMR_ON;
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	85 bd       	out	0x25, r24	; 37
	
	if ( Circ->signal_output[DIR_OUT] == REWARD )
     484:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     488:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     48c:	86 89       	ldd	r24, Z+22	; 0x16
     48e:	81 11       	cpse	r24, r1
     490:	13 c0       	rjmp	.+38     	; 0x4b8 <gpio_trigger_clk+0x40>
	{
		if ( ping_pong )
     492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     496:	88 23       	and	r24, r24
     498:	41 f0       	breq	.+16     	; 0x4aa <gpio_trigger_clk+0x32>
		{
			Circ->signal_output[M4_1_OUT] = !Circ->signal_output[M4_3_OUT];
     49a:	94 89       	ldd	r25, Z+20	; 0x14
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	98 27       	eor	r25, r24
     4a0:	92 8b       	std	Z+18, r25	; 0x12
			Circ->signal_output[M4_2_OUT] = !Circ->signal_output[M4_1_OUT];
     4a2:	92 89       	ldd	r25, Z+18	; 0x12
     4a4:	89 27       	eor	r24, r25
     4a6:	83 8b       	std	Z+19, r24	; 0x13
     4a8:	19 c0       	rjmp	.+50     	; 0x4dc <gpio_trigger_clk+0x64>
		}
		else
		{
			Circ->signal_output[M4_3_OUT] = Circ->signal_output[M4_1_OUT];
     4aa:	82 89       	ldd	r24, Z+18	; 0x12
     4ac:	84 8b       	std	Z+20, r24	; 0x14
			Circ->signal_output[M4_4_OUT] = !Circ->signal_output[M4_3_OUT];			
     4ae:	94 89       	ldd	r25, Z+20	; 0x14
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	89 27       	eor	r24, r25
     4b4:	85 8b       	std	Z+21, r24	; 0x15
     4b6:	12 c0       	rjmp	.+36     	; 0x4dc <gpio_trigger_clk+0x64>
		}
	}
	else
	{
		if ( ping_pong )
     4b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4bc:	88 23       	and	r24, r24
     4be:	39 f0       	breq	.+14     	; 0x4ce <gpio_trigger_clk+0x56>
		{
			Circ->signal_output[M4_1_OUT] = Circ->signal_output[M4_3_OUT];
     4c0:	84 89       	ldd	r24, Z+20	; 0x14
     4c2:	82 8b       	std	Z+18, r24	; 0x12
			Circ->signal_output[M4_2_OUT] = !Circ->signal_output[M4_1_OUT];
     4c4:	92 89       	ldd	r25, Z+18	; 0x12
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	89 27       	eor	r24, r25
     4ca:	83 8b       	std	Z+19, r24	; 0x13
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <gpio_trigger_clk+0x64>

		}
		else
		{
			Circ->signal_output[M4_3_OUT] = !Circ->signal_output[M4_1_OUT];
     4ce:	92 89       	ldd	r25, Z+18	; 0x12
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	98 27       	eor	r25, r24
     4d4:	94 8b       	std	Z+20, r25	; 0x14
			Circ->signal_output[M4_4_OUT] = !Circ->signal_output[M4_3_OUT];
     4d6:	94 89       	ldd	r25, Z+20	; 0x14
     4d8:	89 27       	eor	r24, r25
     4da:	85 8b       	std	Z+21, r24	; 0x15
		}
	}
	
	gpio_do_update();	
     4dc:	0e 94 25 01 	call	0x24a	; 0x24a <gpio_do_update>
	ping_pong = !ping_pong;	
     4e0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	89 27       	eor	r24, r25
     4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4ec:	08 95       	ret

000004ee <__vector_1>:

}

/*INTERRUPTS*/
ISR (INT0_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
}
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_16>:
	DIR is LOW,  CLK affects M4-1 first follows QPDIR2 (first pulse)
	DIR is HIGH, CLK affects M4-3 first, inverted in respect to QPDIR2 (first pulse)
*/

ISR (TIMER0_OVF_vect)
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
	spi_gpio(YBI_CLK, 0);
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	0e 94 f7 04 	call	0x9ee	; 0x9ee <spi_gpio>
	CLK_TMR_OFF;
     52c:	15 bc       	out	0x25, r1	; 37
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_2>:

ISR (INT1_vect)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <__vector_2+0x28>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	volatile bool qp_dir_1, qp_dir_2;
	
	if ( Circ->signal_input[END_IN] ==  0)
     57c:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     580:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	81 11       	cpse	r24, r1
     588:	2b c0       	rjmp	.+86     	; 0x5e0 <__vector_2+0x90>
	{
		qp_dir_1 = _READ_PIN(QP_DIR1_PORT, QP_DIR1_PIN);
     58a:	89 b1       	in	r24, 0x09	; 9
     58c:	82 fb       	bst	r24, 2
     58e:	88 27       	eor	r24, r24
     590:	80 f9       	bld	r24, 0
     592:	89 83       	std	Y+1, r24	; 0x01
		qp_dir_2 = _READ_PIN(QP_DIR2_PORT, QP_DIR2_PIN);
     594:	89 b1       	in	r24, 0x09	; 9
     596:	83 fb       	bst	r24, 3
     598:	88 27       	eor	r24, r24
     59a:	80 f9       	bld	r24, 0
     59c:	8a 83       	std	Y+2, r24	; 0x02

		if ( ( qp_dir_1 == qp_dir_2 ) )
     59e:	99 81       	ldd	r25, Y+1	; 0x01
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	98 13       	cpse	r25, r24
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <__vector_2+0x5c>
			Circ->signal_output[DIR_OUT] = FORWARD;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	86 8b       	std	Z+22, r24	; 0x16
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <__vector_2+0x5e>
		else
			Circ->signal_output[DIR_OUT] = REWARD;
     5ac:	16 8a       	std	Z+22, r1	; 0x16
		
		if ( ! Circ->signal_input[LOW_IN] )
     5ae:	81 85       	ldd	r24, Z+9	; 0x09
     5b0:	81 11       	cpse	r24, r1
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <__vector_2+0x6a>
		{
			gpio_trigger_clk();
     5b4:	0e 94 3c 02 	call	0x478	; 0x478 <gpio_trigger_clk>
     5b8:	13 c0       	rjmp	.+38     	; 0x5e0 <__vector_2+0x90>
		}
		else
		{
			if ( ( Circ->signal_output[DIR_OUT] == FORWARD ) && ( qp_dir_2 ) )
     5ba:	86 89       	ldd	r24, Z+22	; 0x16
     5bc:	88 23       	and	r24, r24
     5be:	21 f0       	breq	.+8      	; 0x5c8 <__vector_2+0x78>
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	81 11       	cpse	r24, r1
				gpio_trigger_clk();
     5c4:	0e 94 3c 02 	call	0x478	; 0x478 <gpio_trigger_clk>
			if ( ( Circ->signal_output[DIR_OUT] == REWARD ) && (!qp_dir_2 ) )
     5c8:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <Circ>
     5cc:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <Circ+0x1>
     5d0:	86 89       	ldd	r24, Z+22	; 0x16
     5d2:	81 11       	cpse	r24, r1
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__vector_2+0x90>
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	81 11       	cpse	r24, r1
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__vector_2+0x90>
				gpio_trigger_clk();
     5dc:	0e 94 3c 02 	call	0x478	; 0x478 <gpio_trigger_clk>
		}
	}
	gpio_do_update();
     5e0:	0e 94 25 01 	call	0x24a	; 0x24a <gpio_do_update>
	
}
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <__vector_13>:
ISR (TIMER1_OVF_vect)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
	gpio_do_timer();
     630:	0e 94 11 01 	call	0x222	; 0x222 <gpio_do_timer>
}
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <__vector_18>:
ISR (USART_RX_vect)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
	uint8_t ch = UDR0;		
     678:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	gpio_do_uart_rx(ch);
     67c:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <gpio_signal_state_change>:

#define UART_CMD 0x34
void gpio_signal_state_change()
{
	gpio_do_update();
     6a2:	0e 94 25 01 	call	0x24a	; 0x24a <gpio_do_update>
	gpio_do_uart_rx(UART_CMD);
     6a6:	84 e3       	ldi	r24, 0x34	; 52
     6a8:	0e 94 69 00 	call	0xd2	; 0xd2 <gpio_do_uart_rx>
     6ac:	08 95       	ret

000006ae <__vector_3>:
}
ISR (PCINT0_vect)
{
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	6f 93       	push	r22
     6c2:	7f 93       	push	r23
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
	gpio_signal_state_change();
     6d0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <gpio_signal_state_change>
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_4>:
ISR (PCINT1_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
	gpio_signal_state_change();
     718:	0e 94 51 03 	call	0x6a2	; 0x6a2 <gpio_signal_state_change>
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_5>:
ISR (PCINT2_vect)
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	gpio_signal_state_change();
     760:	0e 94 51 03 	call	0x6a2	; 0x6a2 <gpio_signal_state_change>
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	bf 91       	pop	r27
     76a:	af 91       	pop	r26
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	7f 91       	pop	r23
     772:	6f 91       	pop	r22
     774:	5f 91       	pop	r21
     776:	4f 91       	pop	r20
     778:	3f 91       	pop	r19
     77a:	2f 91       	pop	r18
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <circuit_get_circuit>:
#define PRESSED		0

Circuit * circuit_get_circuit()
{
    return &circuit;
}
     786:	87 e2       	ldi	r24, 0x27	; 39
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	08 95       	ret

0000078c <circuit_init>:

void circuit_init()
{
	circuit.move = NOT_MOVING;
     78c:	e7 e2       	ldi	r30, 0x27	; 39
     78e:	f1 e0       	ldi	r31, 0x01	; 1
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	82 8f       	std	Z+26, r24	; 0x1a
	circuit.state = cstates[st_INIT];
     794:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cstates>
     798:	83 8f       	std	Z+27, r24	; 0x1b
     79a:	08 95       	ret

0000079c <circuit_do_outputs>:
}

void circuit_do_outputs()
{
        circuit.signal_output[MOVE2_OUT] = circuit.signal_input[MOVE_IN];
     79c:	e7 e2       	ldi	r30, 0x27	; 39
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	82 87       	std	Z+10, r24	; 0x0a
        circuit.signal_output[FF0_OUT] = circuit.state & 0x01;
     7a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     7a6:	98 2f       	mov	r25, r24
     7a8:	91 70       	andi	r25, 0x01	; 1
     7aa:	93 87       	std	Z+11, r25	; 0x0b
        circuit.signal_output[FF1_OUT] = circuit.state & 0x02;
     7ac:	81 fb       	bst	r24, 1
     7ae:	99 27       	eor	r25, r25
     7b0:	90 f9       	bld	r25, 0
     7b2:	94 87       	std	Z+12, r25	; 0x0c
        circuit.signal_output[FF2_OUT] = circuit.state & 0x04;
     7b4:	82 fb       	bst	r24, 2
     7b6:	99 27       	eor	r25, r25
     7b8:	90 f9       	bld	r25, 0
     7ba:	95 87       	std	Z+13, r25	; 0x0d
        circuit.signal_output[FF3_OUT] = circuit.state & 0x08;
     7bc:	83 fb       	bst	r24, 3
     7be:	99 27       	eor	r25, r25
     7c0:	90 f9       	bld	r25, 0
     7c2:	96 87       	std	Z+14, r25	; 0x0e
        circuit.signal_output[FF4_OUT] = circuit.state & 0x10;
     7c4:	82 95       	swap	r24
     7c6:	81 70       	andi	r24, 0x01	; 1
     7c8:	87 87       	std	Z+15, r24	; 0x0f
		circuit.signal_output[CUT_OUT] = circuit.signal_input[CUT_IN];
     7ca:	93 81       	ldd	r25, Z+3	; 0x03
     7cc:	90 8b       	std	Z+16, r25	; 0x10
        circuit.signal_output[REC_OUT] = circuit.signal_output[FF4_OUT];
     7ce:	81 8b       	std	Z+17, r24	; 0x11
     7d0:	08 95       	ret

000007d2 <circuit_update>:
void circuit_update()
{
	bool static isRepr = false;
	bool static isRec  = false;
	
	bool ReprBtPressed = circuit.signal_input[REPR_IN] == PRESSED;
     7d2:	e7 e2       	ldi	r30, 0x27	; 39
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	90 85       	ldd	r25, Z+8	; 0x08
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	59 2f       	mov	r21, r25
     7dc:	58 27       	eor	r21, r24
	bool recBtPressed  = circuit.signal_input[REC_IN]  == PRESSED;
     7de:	21 81       	ldd	r18, Z+1	; 0x01
     7e0:	82 27       	eor	r24, r18
	
	bool fadin_active  = circuit.signal_input[FAD_IN]  == true;
     7e2:	40 81       	ld	r20, Z
	
	if ( circuit.signal_input[END_IN] == TAPE_IN )
     7e4:	32 81       	ldd	r19, Z+2	; 0x02
     7e6:	31 11       	cpse	r19, r1
     7e8:	84 c0       	rjmp	.+264    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
	{
		if (!fadin_active)
     7ea:	41 11       	cpse	r20, r1
     7ec:	3e c0       	rjmp	.+124    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
		{
			if ( ( isRepr && isRec ) && ( ReprBtPressed || recBtPressed ) ) return;
     7ee:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <isRepr.1652>
     7f2:	33 23       	and	r19, r19
     7f4:	41 f0       	breq	.+16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7f6:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <isRec.1653>
     7fa:	66 23       	and	r22, r22
     7fc:	21 f0       	breq	.+8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fe:	51 11       	cpse	r21, r1
     800:	82 c0       	rjmp	.+260    	; 0x906 <__stack+0x7>
     802:	81 11       	cpse	r24, r1
     804:	80 c0       	rjmp	.+256    	; 0x906 <__stack+0x7>
					
			if ( ( ( isRepr || ( isRepr && isRec ) ) && ( circuit.signal_input[MOVE_IN] == IS_MOVING ) && ( !( circuit.state & 0x01 ) ) ) )
     806:	31 11       	cpse	r19, r1
     808:	06 c0       	rjmp	.+12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     80a:	33 23       	and	r19, r19
     80c:	91 f0       	breq	.+36     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     80e:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <isRec.1653>
     812:	66 23       	and	r22, r22
     814:	71 f0       	breq	.+28     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     816:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <circuit+0x6>
     81a:	61 11       	cpse	r22, r1
     81c:	0a c0       	rjmp	.+20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     81e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <circuit+0x1b>
     822:	60 fd       	sbrc	r22, 0
     824:	06 c0       	rjmp	.+12     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
			{
				circuit.state |= 0x01;
     826:	61 60       	ori	r22, 0x01	; 1
     828:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <circuit+0x1b>
				circuit_do_outputs();
     82c:	0e 94 ce 03 	call	0x79c	; 0x79c <circuit_do_outputs>
				return;
     830:	08 95       	ret
			}
			
			if ( ( isRec && ReprBtPressed ) || ( isRepr &&  recBtPressed ) )
     832:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <isRec.1653>
     836:	66 23       	and	r22, r22
     838:	11 f0       	breq	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     83a:	51 11       	cpse	r21, r1
     83c:	04 c0       	rjmp	.+8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     83e:	33 23       	and	r19, r19
     840:	a1 f0       	breq	.+40     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     842:	88 23       	and	r24, r24
     844:	91 f0       	breq	.+36     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
			{
				isRepr = true;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <isRepr.1652>
				isRec  = true;
     84c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isRec.1653>
				circuit.state |= cstates[st_REPR] | cstates[st_REC];
     850:	e1 e0       	ldi	r30, 0x01	; 1
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	93 81       	ldd	r25, Z+3	; 0x03
     856:	84 81       	ldd	r24, Z+4	; 0x04
     858:	e7 e2       	ldi	r30, 0x27	; 39
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	89 2b       	or	r24, r25
     85e:	93 8d       	ldd	r25, Z+27	; 0x1b
     860:	89 2b       	or	r24, r25
     862:	83 8f       	std	Z+27, r24	; 0x1b
				circuit_do_outputs();
     864:	0e 94 ce 03 	call	0x79c	; 0x79c <circuit_do_outputs>
				return;
     868:	08 95       	ret
			}
		}
		
		if		( circuit.signal_input[STOP_IN] == PRESSED )					{ circuit.state = cstates[st_INIT]; isRec = false; isRepr = false; }
     86a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <circuit+0x5>
     86e:	81 11       	cpse	r24, r1
     870:	09 c0       	rjmp	.+18     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     872:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cstates>
     876:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
     87a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isRec.1653>
     87e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <isRepr.1652>
     882:	3f c0       	rjmp	.+126    	; 0x902 <__stack+0x3>
		else if ( circuit.signal_input[FORW_IN] == PRESSED && !fadin_active )	  circuit.state = cstates[st_FORW];
     884:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <circuit+0x7>
     888:	81 11       	cpse	r24, r1
     88a:	07 c0       	rjmp	.+14     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     88c:	41 11       	cpse	r20, r1
     88e:	05 c0       	rjmp	.+10     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     890:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cstates+0x1>
     894:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
     898:	34 c0       	rjmp	.+104    	; 0x902 <__stack+0x3>
		else if ( circuit.signal_input[REW_IN]	== PRESSED && !fadin_active )	  circuit.state = cstates[st_REW];	
     89a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <circuit+0x4>
     89e:	81 11       	cpse	r24, r1
     8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     8a2:	41 11       	cpse	r20, r1
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     8a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <cstates+0x2>
     8aa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
     8ae:	29 c0       	rjmp	.+82     	; 0x902 <__stack+0x3>
		else if ( circuit.signal_input[REPR_IN] == PRESSED )					{ circuit.state = cstates[st_REPR]; isRepr = true; }
     8b0:	91 11       	cpse	r25, r1
     8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     8b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cstates+0x3>
     8b8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <isRepr.1652>
     8c2:	1f c0       	rjmp	.+62     	; 0x902 <__stack+0x3>
		else if ( circuit.signal_input[REC_IN]	== PRESSED && !fadin_active )	{ circuit.state = cstates[st_REC];	isRec  = true;  }
     8c4:	21 11       	cpse	r18, r1
     8c6:	0a c0       	rjmp	.+20     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     8c8:	41 11       	cpse	r20, r1
     8ca:	08 c0       	rjmp	.+16     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     8cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cstates+0x4>
     8d0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isRec.1653>
     8da:	13 c0       	rjmp	.+38     	; 0x902 <__stack+0x3>
		else if ( circuit.signal_input[CUT_IN]	== PRESSED && !fadin_active )	  circuit.state = cstates[st_CUT];
     8dc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <circuit+0x3>
     8e0:	81 11       	cpse	r24, r1
     8e2:	0f c0       	rjmp	.+30     	; 0x902 <__stack+0x3>
     8e4:	41 11       	cpse	r20, r1
     8e6:	0d c0       	rjmp	.+26     	; 0x902 <__stack+0x3>
     8e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <cstates+0x5>
     8ec:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
     8f0:	08 c0       	rjmp	.+16     	; 0x902 <__stack+0x3>
	}
	else
	{
		circuit.state = cstates[st_INIT];
     8f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cstates>
     8f6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <circuit+0x1b>
		isRepr = false;
     8fa:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <isRepr.1652>
		isRec  = false;
     8fe:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isRec.1653>
	}
	
	circuit_do_outputs();
     902:	0e 94 ce 03 	call	0x79c	; 0x79c <circuit_do_outputs>
     906:	08 95       	ret

00000908 <main>:

#include <util/delay.h>

int main(void)
{
    gpio_init(eeprom_read_byte(0x00));
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <eeprom_read_byte>
     910:	0e 94 cd 01 	call	0x39a	; 0x39a <gpio_init>
     914:	ff cf       	rjmp	.-2      	; 0x914 <main+0xc>

00000916 <spi_xfer>:
}


uint8_t spi_xfer(uint8_t cs_pin, uint8_t data)
{
	SPDR = data;
     916:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
     918:	0d b4       	in	r0, 0x2d	; 45
     91a:	07 fe       	sbrs	r0, 7
     91c:	fd cf       	rjmp	.-6      	; 0x918 <spi_xfer+0x2>
	
	return SPDR;
     91e:	8e b5       	in	r24, 0x2e	; 46
}
     920:	08 95       	ret

00000922 <spi_write>:
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
	}
}

void spi_write(uint8_t cs_pin, uint8_t reg, uint8_t data)
{
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	06 2f       	mov	r16, r22
     92c:	14 2f       	mov	r17, r20
	SPI_PORT &= ~( 1 << cs_pin );
     92e:	98 b1       	in	r25, 0x08	; 8
     930:	c1 e0       	ldi	r28, 0x01	; 1
     932:	d0 e0       	ldi	r29, 0x00	; 0
     934:	02 c0       	rjmp	.+4      	; 0x93a <spi_write+0x18>
     936:	cc 0f       	add	r28, r28
     938:	dd 1f       	adc	r29, r29
     93a:	8a 95       	dec	r24
     93c:	e2 f7       	brpl	.-8      	; 0x936 <spi_write+0x14>
     93e:	8c 2f       	mov	r24, r28
     940:	80 95       	com	r24
     942:	98 23       	and	r25, r24
     944:	98 b9       	out	0x08, r25	; 8
	spi_xfer(SPI_CS1, MCP23S08_OPCOD);
     946:	60 e4       	ldi	r22, 0x40	; 64
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0e 94 8b 04 	call	0x916	; 0x916 <spi_xfer>
	spi_xfer(SPI_CS1, reg);
     94e:	60 2f       	mov	r22, r16
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 8b 04 	call	0x916	; 0x916 <spi_xfer>
	spi_xfer(SPI_CS1, data);
     956:	61 2f       	mov	r22, r17
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 8b 04 	call	0x916	; 0x916 <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
     95e:	88 b1       	in	r24, 0x08	; 8
     960:	c8 2b       	or	r28, r24
     962:	c8 b9       	out	0x08, r28	; 8
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <spi_init>:
#include "includes/spi_driver.h"

void spi_init()
{
	// enable SPI, set as master, and clock to fosc/128
	PORTC = 0xff;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	88 b9       	out	0x08, r24	; 8
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
     972:	83 e5       	ldi	r24, 0x53	; 83
     974:	8c bd       	out	0x2c, r24	; 44
	spi_write(SPI_CS1, MCP23S08_IODIR, 0x00); // configure MCP23S08 01 as output
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	0e 94 91 04 	call	0x922	; 0x922 <spi_write>
	spi_write(SPI_CS2, MCP23S08_IODIR, 0x00); // configure MCP23S08 02 as output
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 91 04 	call	0x922	; 0x922 <spi_write>
	spi_write(SPI_CS1, MCP23S08_GPIO, 0x00);
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	69 e0       	ldi	r22, 0x09	; 9
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 91 04 	call	0x922	; 0x922 <spi_write>
	spi_write(SPI_CS2, MCP23S08_GPIO, 0x00);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	69 e0       	ldi	r22, 0x09	; 9
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 91 04 	call	0x922	; 0x922 <spi_write>
     99e:	08 95       	ret

000009a0 <spi_read>:
	spi_xfer(SPI_CS1, data);
	SPI_PORT |= ( 1 << cs_pin );
}

uint8_t spi_read(uint8_t cs_pin, uint8_t reg)
{
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	18 2f       	mov	r17, r24
     9aa:	06 2f       	mov	r16, r22
	uint8_t data;
	SPI_PORT &= ~( 1 << cs_pin );
     9ac:	88 b1       	in	r24, 0x08	; 8
     9ae:	c1 e0       	ldi	r28, 0x01	; 1
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	01 2e       	mov	r0, r17
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <spi_read+0x1a>
     9b6:	cc 0f       	add	r28, r28
     9b8:	dd 1f       	adc	r29, r29
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <spi_read+0x16>
     9be:	9c 2f       	mov	r25, r28
     9c0:	90 95       	com	r25
     9c2:	89 23       	and	r24, r25
     9c4:	88 b9       	out	0x08, r24	; 8
	spi_xfer(cs_pin, MCP23S08_OPCOD + 0x01);
     9c6:	61 e4       	ldi	r22, 0x41	; 65
     9c8:	81 2f       	mov	r24, r17
     9ca:	0e 94 8b 04 	call	0x916	; 0x916 <spi_xfer>
	spi_xfer(cs_pin, reg);
     9ce:	60 2f       	mov	r22, r16
     9d0:	81 2f       	mov	r24, r17
     9d2:	0e 94 8b 04 	call	0x916	; 0x916 <spi_xfer>
	data = spi_xfer(cs_pin, 0xff); // dummy byte
     9d6:	6f ef       	ldi	r22, 0xFF	; 255
     9d8:	81 2f       	mov	r24, r17
     9da:	0e 94 8b 04 	call	0x916	; 0x916 <spi_xfer>
	SPI_PORT |= ( 1 << cs_pin );
     9de:	98 b1       	in	r25, 0x08	; 8
     9e0:	c9 2b       	or	r28, r25
     9e2:	c8 b9       	out	0x08, r28	; 8
	
	return (uint8_t)data;
}
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <spi_gpio>:
	spi_write(SPI_CS1, MCP23S08_GPIO, 0x00);
	spi_write(SPI_CS2, MCP23S08_GPIO, 0x00);
	
}
void spi_gpio(uint8_t io_pin, uint8_t val)
{
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	16 2f       	mov	r17, r22
	uint8_t cs_pin = ( io_pin >> 4 ) & 0x01;
     9f6:	84 fb       	bst	r24, 4
     9f8:	dd 27       	eor	r29, r29
     9fa:	d0 f9       	bld	r29, 0
	
	if ( cs_pin == 0 ) cs_pin = SPI_CS2; // U2
	if ( cs_pin == 1 ) cs_pin = SPI_CS1; // U1
	
	io_pin &= 0x0f;
     9fc:	c8 2f       	mov	r28, r24
     9fe:	cf 70       	andi	r28, 0x0F	; 15
	
	uint8_t data = spi_read(cs_pin, MCP23S08_GPIO);
     a00:	69 e0       	ldi	r22, 0x09	; 9
     a02:	8d 2f       	mov	r24, r29
     a04:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <spi_read>

	if ( val )
     a08:	11 23       	and	r17, r17
     a0a:	69 f0       	breq	.+26     	; 0xa26 <spi_gpio+0x38>
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data | ( 1 << io_pin ) ) );
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <spi_gpio+0x28>
     a12:	44 0f       	add	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	ca 95       	dec	r28
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <spi_gpio+0x24>
     a1a:	48 2b       	or	r20, r24
     a1c:	69 e0       	ldi	r22, 0x09	; 9
     a1e:	8d 2f       	mov	r24, r29
     a20:	0e 94 91 04 	call	0x922	; 0x922 <spi_write>
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <spi_gpio+0x54>
	}
	else
	{
		spi_write(cs_pin, MCP23S08_GPIO, ( data & ~( 1 << io_pin ) ) );
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <spi_gpio+0x42>
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	ca 95       	dec	r28
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <spi_gpio+0x3e>
     a34:	20 95       	com	r18
     a36:	42 2f       	mov	r20, r18
     a38:	48 23       	and	r20, r24
     a3a:	69 e0       	ldi	r22, 0x09	; 9
     a3c:	8d 2f       	mov	r24, r29
     a3e:	0e 94 91 04 	call	0x922	; 0x922 <spi_write>
	}
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	08 95       	ret

00000a4a <sprintf>:
     a4a:	ae e0       	ldi	r26, 0x0E	; 14
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	eb e2       	ldi	r30, 0x2B	; 43
     a50:	f5 e0       	ldi	r31, 0x05	; 5
     a52:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__prologue_saves__+0x1c>
     a56:	0d 89       	ldd	r16, Y+21	; 0x15
     a58:	1e 89       	ldd	r17, Y+22	; 0x16
     a5a:	86 e0       	ldi	r24, 0x06	; 6
     a5c:	8c 83       	std	Y+4, r24	; 0x04
     a5e:	1a 83       	std	Y+2, r17	; 0x02
     a60:	09 83       	std	Y+1, r16	; 0x01
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	9f e7       	ldi	r25, 0x7F	; 127
     a66:	9e 83       	std	Y+6, r25	; 0x06
     a68:	8d 83       	std	Y+5, r24	; 0x05
     a6a:	ae 01       	movw	r20, r28
     a6c:	47 5e       	subi	r20, 0xE7	; 231
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	6f 89       	ldd	r22, Y+23	; 0x17
     a72:	78 8d       	ldd	r23, Y+24	; 0x18
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 47 05 	call	0xa8e	; 0xa8e <vfprintf>
     a7c:	ef 81       	ldd	r30, Y+7	; 0x07
     a7e:	f8 85       	ldd	r31, Y+8	; 0x08
     a80:	e0 0f       	add	r30, r16
     a82:	f1 1f       	adc	r31, r17
     a84:	10 82       	st	Z, r1
     a86:	2e 96       	adiw	r28, 0x0e	; 14
     a88:	e4 e0       	ldi	r30, 0x04	; 4
     a8a:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__epilogue_restores__+0x1c>

00000a8e <vfprintf>:
     a8e:	ab e0       	ldi	r26, 0x0B	; 11
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	ed e4       	ldi	r30, 0x4D	; 77
     a94:	f5 e0       	ldi	r31, 0x05	; 5
     a96:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__prologue_saves__>
     a9a:	6c 01       	movw	r12, r24
     a9c:	7b 01       	movw	r14, r22
     a9e:	8a 01       	movw	r16, r20
     aa0:	fc 01       	movw	r30, r24
     aa2:	17 82       	std	Z+7, r1	; 0x07
     aa4:	16 82       	std	Z+6, r1	; 0x06
     aa6:	83 81       	ldd	r24, Z+3	; 0x03
     aa8:	81 ff       	sbrs	r24, 1
     aaa:	cc c1       	rjmp	.+920    	; 0xe44 <vfprintf+0x3b6>
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	3c 01       	movw	r6, r24
     ab2:	f6 01       	movw	r30, r12
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	f7 01       	movw	r30, r14
     ab8:	93 fd       	sbrc	r25, 3
     aba:	85 91       	lpm	r24, Z+
     abc:	93 ff       	sbrs	r25, 3
     abe:	81 91       	ld	r24, Z+
     ac0:	7f 01       	movw	r14, r30
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <vfprintf+0x3a>
     ac6:	ba c1       	rjmp	.+884    	; 0xe3c <vfprintf+0x3ae>
     ac8:	85 32       	cpi	r24, 0x25	; 37
     aca:	39 f4       	brne	.+14     	; 0xada <vfprintf+0x4c>
     acc:	93 fd       	sbrc	r25, 3
     ace:	85 91       	lpm	r24, Z+
     ad0:	93 ff       	sbrs	r25, 3
     ad2:	81 91       	ld	r24, Z+
     ad4:	7f 01       	movw	r14, r30
     ad6:	85 32       	cpi	r24, 0x25	; 37
     ad8:	29 f4       	brne	.+10     	; 0xae4 <vfprintf+0x56>
     ada:	b6 01       	movw	r22, r12
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     ae2:	e7 cf       	rjmp	.-50     	; 0xab2 <vfprintf+0x24>
     ae4:	91 2c       	mov	r9, r1
     ae6:	21 2c       	mov	r2, r1
     ae8:	31 2c       	mov	r3, r1
     aea:	ff e1       	ldi	r31, 0x1F	; 31
     aec:	f3 15       	cp	r31, r3
     aee:	d8 f0       	brcs	.+54     	; 0xb26 <vfprintf+0x98>
     af0:	8b 32       	cpi	r24, 0x2B	; 43
     af2:	79 f0       	breq	.+30     	; 0xb12 <vfprintf+0x84>
     af4:	38 f4       	brcc	.+14     	; 0xb04 <vfprintf+0x76>
     af6:	80 32       	cpi	r24, 0x20	; 32
     af8:	79 f0       	breq	.+30     	; 0xb18 <vfprintf+0x8a>
     afa:	83 32       	cpi	r24, 0x23	; 35
     afc:	a1 f4       	brne	.+40     	; 0xb26 <vfprintf+0x98>
     afe:	23 2d       	mov	r18, r3
     b00:	20 61       	ori	r18, 0x10	; 16
     b02:	1d c0       	rjmp	.+58     	; 0xb3e <vfprintf+0xb0>
     b04:	8d 32       	cpi	r24, 0x2D	; 45
     b06:	61 f0       	breq	.+24     	; 0xb20 <vfprintf+0x92>
     b08:	80 33       	cpi	r24, 0x30	; 48
     b0a:	69 f4       	brne	.+26     	; 0xb26 <vfprintf+0x98>
     b0c:	23 2d       	mov	r18, r3
     b0e:	21 60       	ori	r18, 0x01	; 1
     b10:	16 c0       	rjmp	.+44     	; 0xb3e <vfprintf+0xb0>
     b12:	83 2d       	mov	r24, r3
     b14:	82 60       	ori	r24, 0x02	; 2
     b16:	38 2e       	mov	r3, r24
     b18:	e3 2d       	mov	r30, r3
     b1a:	e4 60       	ori	r30, 0x04	; 4
     b1c:	3e 2e       	mov	r3, r30
     b1e:	2a c0       	rjmp	.+84     	; 0xb74 <vfprintf+0xe6>
     b20:	f3 2d       	mov	r31, r3
     b22:	f8 60       	ori	r31, 0x08	; 8
     b24:	1d c0       	rjmp	.+58     	; 0xb60 <vfprintf+0xd2>
     b26:	37 fc       	sbrc	r3, 7
     b28:	2d c0       	rjmp	.+90     	; 0xb84 <vfprintf+0xf6>
     b2a:	20 ed       	ldi	r18, 0xD0	; 208
     b2c:	28 0f       	add	r18, r24
     b2e:	2a 30       	cpi	r18, 0x0A	; 10
     b30:	40 f0       	brcs	.+16     	; 0xb42 <vfprintf+0xb4>
     b32:	8e 32       	cpi	r24, 0x2E	; 46
     b34:	b9 f4       	brne	.+46     	; 0xb64 <vfprintf+0xd6>
     b36:	36 fc       	sbrc	r3, 6
     b38:	81 c1       	rjmp	.+770    	; 0xe3c <vfprintf+0x3ae>
     b3a:	23 2d       	mov	r18, r3
     b3c:	20 64       	ori	r18, 0x40	; 64
     b3e:	32 2e       	mov	r3, r18
     b40:	19 c0       	rjmp	.+50     	; 0xb74 <vfprintf+0xe6>
     b42:	36 fe       	sbrs	r3, 6
     b44:	06 c0       	rjmp	.+12     	; 0xb52 <vfprintf+0xc4>
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	98 9e       	mul	r9, r24
     b4a:	20 0d       	add	r18, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	92 2e       	mov	r9, r18
     b50:	11 c0       	rjmp	.+34     	; 0xb74 <vfprintf+0xe6>
     b52:	ea e0       	ldi	r30, 0x0A	; 10
     b54:	2e 9e       	mul	r2, r30
     b56:	20 0d       	add	r18, r0
     b58:	11 24       	eor	r1, r1
     b5a:	22 2e       	mov	r2, r18
     b5c:	f3 2d       	mov	r31, r3
     b5e:	f0 62       	ori	r31, 0x20	; 32
     b60:	3f 2e       	mov	r3, r31
     b62:	08 c0       	rjmp	.+16     	; 0xb74 <vfprintf+0xe6>
     b64:	8c 36       	cpi	r24, 0x6C	; 108
     b66:	21 f4       	brne	.+8      	; 0xb70 <vfprintf+0xe2>
     b68:	83 2d       	mov	r24, r3
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	38 2e       	mov	r3, r24
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <vfprintf+0xe6>
     b70:	88 36       	cpi	r24, 0x68	; 104
     b72:	41 f4       	brne	.+16     	; 0xb84 <vfprintf+0xf6>
     b74:	f7 01       	movw	r30, r14
     b76:	93 fd       	sbrc	r25, 3
     b78:	85 91       	lpm	r24, Z+
     b7a:	93 ff       	sbrs	r25, 3
     b7c:	81 91       	ld	r24, Z+
     b7e:	7f 01       	movw	r14, r30
     b80:	81 11       	cpse	r24, r1
     b82:	b3 cf       	rjmp	.-154    	; 0xaea <vfprintf+0x5c>
     b84:	98 2f       	mov	r25, r24
     b86:	9f 7d       	andi	r25, 0xDF	; 223
     b88:	95 54       	subi	r25, 0x45	; 69
     b8a:	93 30       	cpi	r25, 0x03	; 3
     b8c:	28 f4       	brcc	.+10     	; 0xb98 <vfprintf+0x10a>
     b8e:	0c 5f       	subi	r16, 0xFC	; 252
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	9f e3       	ldi	r25, 0x3F	; 63
     b94:	99 83       	std	Y+1, r25	; 0x01
     b96:	0d c0       	rjmp	.+26     	; 0xbb2 <vfprintf+0x124>
     b98:	83 36       	cpi	r24, 0x63	; 99
     b9a:	31 f0       	breq	.+12     	; 0xba8 <vfprintf+0x11a>
     b9c:	83 37       	cpi	r24, 0x73	; 115
     b9e:	71 f0       	breq	.+28     	; 0xbbc <vfprintf+0x12e>
     ba0:	83 35       	cpi	r24, 0x53	; 83
     ba2:	09 f0       	breq	.+2      	; 0xba6 <vfprintf+0x118>
     ba4:	59 c0       	rjmp	.+178    	; 0xc58 <vfprintf+0x1ca>
     ba6:	21 c0       	rjmp	.+66     	; 0xbea <vfprintf+0x15c>
     ba8:	f8 01       	movw	r30, r16
     baa:	80 81       	ld	r24, Z
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	0e 5f       	subi	r16, 0xFE	; 254
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	88 24       	eor	r8, r8
     bb4:	83 94       	inc	r8
     bb6:	91 2c       	mov	r9, r1
     bb8:	53 01       	movw	r10, r6
     bba:	13 c0       	rjmp	.+38     	; 0xbe2 <vfprintf+0x154>
     bbc:	28 01       	movw	r4, r16
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	4f 0e       	add	r4, r31
     bc2:	51 1c       	adc	r5, r1
     bc4:	f8 01       	movw	r30, r16
     bc6:	a0 80       	ld	r10, Z
     bc8:	b1 80       	ldd	r11, Z+1	; 0x01
     bca:	36 fe       	sbrs	r3, 6
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <vfprintf+0x146>
     bce:	69 2d       	mov	r22, r9
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <vfprintf+0x14a>
     bd4:	6f ef       	ldi	r22, 0xFF	; 255
     bd6:	7f ef       	ldi	r23, 0xFF	; 255
     bd8:	c5 01       	movw	r24, r10
     bda:	0e 94 33 07 	call	0xe66	; 0xe66 <strnlen>
     bde:	4c 01       	movw	r8, r24
     be0:	82 01       	movw	r16, r4
     be2:	f3 2d       	mov	r31, r3
     be4:	ff 77       	andi	r31, 0x7F	; 127
     be6:	3f 2e       	mov	r3, r31
     be8:	16 c0       	rjmp	.+44     	; 0xc16 <vfprintf+0x188>
     bea:	28 01       	movw	r4, r16
     bec:	22 e0       	ldi	r18, 0x02	; 2
     bee:	42 0e       	add	r4, r18
     bf0:	51 1c       	adc	r5, r1
     bf2:	f8 01       	movw	r30, r16
     bf4:	a0 80       	ld	r10, Z
     bf6:	b1 80       	ldd	r11, Z+1	; 0x01
     bf8:	36 fe       	sbrs	r3, 6
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <vfprintf+0x174>
     bfc:	69 2d       	mov	r22, r9
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x178>
     c02:	6f ef       	ldi	r22, 0xFF	; 255
     c04:	7f ef       	ldi	r23, 0xFF	; 255
     c06:	c5 01       	movw	r24, r10
     c08:	0e 94 28 07 	call	0xe50	; 0xe50 <strnlen_P>
     c0c:	4c 01       	movw	r8, r24
     c0e:	f3 2d       	mov	r31, r3
     c10:	f0 68       	ori	r31, 0x80	; 128
     c12:	3f 2e       	mov	r3, r31
     c14:	82 01       	movw	r16, r4
     c16:	33 fc       	sbrc	r3, 3
     c18:	1b c0       	rjmp	.+54     	; 0xc50 <vfprintf+0x1c2>
     c1a:	82 2d       	mov	r24, r2
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	88 16       	cp	r8, r24
     c20:	99 06       	cpc	r9, r25
     c22:	b0 f4       	brcc	.+44     	; 0xc50 <vfprintf+0x1c2>
     c24:	b6 01       	movw	r22, r12
     c26:	80 e2       	ldi	r24, 0x20	; 32
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     c2e:	2a 94       	dec	r2
     c30:	f4 cf       	rjmp	.-24     	; 0xc1a <vfprintf+0x18c>
     c32:	f5 01       	movw	r30, r10
     c34:	37 fc       	sbrc	r3, 7
     c36:	85 91       	lpm	r24, Z+
     c38:	37 fe       	sbrs	r3, 7
     c3a:	81 91       	ld	r24, Z+
     c3c:	5f 01       	movw	r10, r30
     c3e:	b6 01       	movw	r22, r12
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     c46:	21 10       	cpse	r2, r1
     c48:	2a 94       	dec	r2
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	82 1a       	sub	r8, r18
     c4e:	91 08       	sbc	r9, r1
     c50:	81 14       	cp	r8, r1
     c52:	91 04       	cpc	r9, r1
     c54:	71 f7       	brne	.-36     	; 0xc32 <vfprintf+0x1a4>
     c56:	e8 c0       	rjmp	.+464    	; 0xe28 <vfprintf+0x39a>
     c58:	84 36       	cpi	r24, 0x64	; 100
     c5a:	11 f0       	breq	.+4      	; 0xc60 <vfprintf+0x1d2>
     c5c:	89 36       	cpi	r24, 0x69	; 105
     c5e:	41 f5       	brne	.+80     	; 0xcb0 <vfprintf+0x222>
     c60:	f8 01       	movw	r30, r16
     c62:	37 fe       	sbrs	r3, 7
     c64:	07 c0       	rjmp	.+14     	; 0xc74 <vfprintf+0x1e6>
     c66:	60 81       	ld	r22, Z
     c68:	71 81       	ldd	r23, Z+1	; 0x01
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	0c 5f       	subi	r16, 0xFC	; 252
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	08 c0       	rjmp	.+16     	; 0xc84 <vfprintf+0x1f6>
     c74:	60 81       	ld	r22, Z
     c76:	71 81       	ldd	r23, Z+1	; 0x01
     c78:	07 2e       	mov	r0, r23
     c7a:	00 0c       	add	r0, r0
     c7c:	88 0b       	sbc	r24, r24
     c7e:	99 0b       	sbc	r25, r25
     c80:	0e 5f       	subi	r16, 0xFE	; 254
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	f3 2d       	mov	r31, r3
     c86:	ff 76       	andi	r31, 0x6F	; 111
     c88:	3f 2e       	mov	r3, r31
     c8a:	97 ff       	sbrs	r25, 7
     c8c:	09 c0       	rjmp	.+18     	; 0xca0 <vfprintf+0x212>
     c8e:	90 95       	com	r25
     c90:	80 95       	com	r24
     c92:	70 95       	com	r23
     c94:	61 95       	neg	r22
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	8f 4f       	sbci	r24, 0xFF	; 255
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	f0 68       	ori	r31, 0x80	; 128
     c9e:	3f 2e       	mov	r3, r31
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	a3 01       	movw	r20, r6
     ca6:	0e 94 7a 07 	call	0xef4	; 0xef4 <__ultoa_invert>
     caa:	88 2e       	mov	r8, r24
     cac:	86 18       	sub	r8, r6
     cae:	45 c0       	rjmp	.+138    	; 0xd3a <vfprintf+0x2ac>
     cb0:	85 37       	cpi	r24, 0x75	; 117
     cb2:	31 f4       	brne	.+12     	; 0xcc0 <vfprintf+0x232>
     cb4:	23 2d       	mov	r18, r3
     cb6:	2f 7e       	andi	r18, 0xEF	; 239
     cb8:	b2 2e       	mov	r11, r18
     cba:	2a e0       	ldi	r18, 0x0A	; 10
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	25 c0       	rjmp	.+74     	; 0xd0a <vfprintf+0x27c>
     cc0:	93 2d       	mov	r25, r3
     cc2:	99 7f       	andi	r25, 0xF9	; 249
     cc4:	b9 2e       	mov	r11, r25
     cc6:	8f 36       	cpi	r24, 0x6F	; 111
     cc8:	c1 f0       	breq	.+48     	; 0xcfa <vfprintf+0x26c>
     cca:	18 f4       	brcc	.+6      	; 0xcd2 <vfprintf+0x244>
     ccc:	88 35       	cpi	r24, 0x58	; 88
     cce:	79 f0       	breq	.+30     	; 0xcee <vfprintf+0x260>
     cd0:	b5 c0       	rjmp	.+362    	; 0xe3c <vfprintf+0x3ae>
     cd2:	80 37       	cpi	r24, 0x70	; 112
     cd4:	19 f0       	breq	.+6      	; 0xcdc <vfprintf+0x24e>
     cd6:	88 37       	cpi	r24, 0x78	; 120
     cd8:	21 f0       	breq	.+8      	; 0xce2 <vfprintf+0x254>
     cda:	b0 c0       	rjmp	.+352    	; 0xe3c <vfprintf+0x3ae>
     cdc:	e9 2f       	mov	r30, r25
     cde:	e0 61       	ori	r30, 0x10	; 16
     ce0:	be 2e       	mov	r11, r30
     ce2:	b4 fe       	sbrs	r11, 4
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <vfprintf+0x272>
     ce6:	fb 2d       	mov	r31, r11
     ce8:	f4 60       	ori	r31, 0x04	; 4
     cea:	bf 2e       	mov	r11, r31
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <vfprintf+0x272>
     cee:	34 fe       	sbrs	r3, 4
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <vfprintf+0x278>
     cf2:	29 2f       	mov	r18, r25
     cf4:	26 60       	ori	r18, 0x06	; 6
     cf6:	b2 2e       	mov	r11, r18
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <vfprintf+0x278>
     cfa:	28 e0       	ldi	r18, 0x08	; 8
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x27c>
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <vfprintf+0x27c>
     d06:	20 e1       	ldi	r18, 0x10	; 16
     d08:	32 e0       	ldi	r19, 0x02	; 2
     d0a:	f8 01       	movw	r30, r16
     d0c:	b7 fe       	sbrs	r11, 7
     d0e:	07 c0       	rjmp	.+14     	; 0xd1e <vfprintf+0x290>
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	0c 5f       	subi	r16, 0xFC	; 252
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	06 c0       	rjmp	.+12     	; 0xd2a <vfprintf+0x29c>
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 5f       	subi	r16, 0xFE	; 254
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	a3 01       	movw	r20, r6
     d2c:	0e 94 7a 07 	call	0xef4	; 0xef4 <__ultoa_invert>
     d30:	88 2e       	mov	r8, r24
     d32:	86 18       	sub	r8, r6
     d34:	fb 2d       	mov	r31, r11
     d36:	ff 77       	andi	r31, 0x7F	; 127
     d38:	3f 2e       	mov	r3, r31
     d3a:	36 fe       	sbrs	r3, 6
     d3c:	0d c0       	rjmp	.+26     	; 0xd58 <vfprintf+0x2ca>
     d3e:	23 2d       	mov	r18, r3
     d40:	2e 7f       	andi	r18, 0xFE	; 254
     d42:	a2 2e       	mov	r10, r18
     d44:	89 14       	cp	r8, r9
     d46:	58 f4       	brcc	.+22     	; 0xd5e <vfprintf+0x2d0>
     d48:	34 fe       	sbrs	r3, 4
     d4a:	0b c0       	rjmp	.+22     	; 0xd62 <vfprintf+0x2d4>
     d4c:	32 fc       	sbrc	r3, 2
     d4e:	09 c0       	rjmp	.+18     	; 0xd62 <vfprintf+0x2d4>
     d50:	83 2d       	mov	r24, r3
     d52:	8e 7e       	andi	r24, 0xEE	; 238
     d54:	a8 2e       	mov	r10, r24
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <vfprintf+0x2d4>
     d58:	b8 2c       	mov	r11, r8
     d5a:	a3 2c       	mov	r10, r3
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <vfprintf+0x2d6>
     d5e:	b8 2c       	mov	r11, r8
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <vfprintf+0x2d6>
     d62:	b9 2c       	mov	r11, r9
     d64:	a4 fe       	sbrs	r10, 4
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <vfprintf+0x2f8>
     d68:	fe 01       	movw	r30, r28
     d6a:	e8 0d       	add	r30, r8
     d6c:	f1 1d       	adc	r31, r1
     d6e:	80 81       	ld	r24, Z
     d70:	80 33       	cpi	r24, 0x30	; 48
     d72:	21 f4       	brne	.+8      	; 0xd7c <vfprintf+0x2ee>
     d74:	9a 2d       	mov	r25, r10
     d76:	99 7e       	andi	r25, 0xE9	; 233
     d78:	a9 2e       	mov	r10, r25
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <vfprintf+0x300>
     d7c:	a2 fe       	sbrs	r10, 2
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <vfprintf+0x2fe>
     d80:	b3 94       	inc	r11
     d82:	b3 94       	inc	r11
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <vfprintf+0x300>
     d86:	8a 2d       	mov	r24, r10
     d88:	86 78       	andi	r24, 0x86	; 134
     d8a:	09 f0       	breq	.+2      	; 0xd8e <vfprintf+0x300>
     d8c:	b3 94       	inc	r11
     d8e:	a3 fc       	sbrc	r10, 3
     d90:	11 c0       	rjmp	.+34     	; 0xdb4 <vfprintf+0x326>
     d92:	a0 fe       	sbrs	r10, 0
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <vfprintf+0x314>
     d96:	b2 14       	cp	r11, r2
     d98:	88 f4       	brcc	.+34     	; 0xdbc <vfprintf+0x32e>
     d9a:	28 0c       	add	r2, r8
     d9c:	92 2c       	mov	r9, r2
     d9e:	9b 18       	sub	r9, r11
     da0:	0e c0       	rjmp	.+28     	; 0xdbe <vfprintf+0x330>
     da2:	b2 14       	cp	r11, r2
     da4:	60 f4       	brcc	.+24     	; 0xdbe <vfprintf+0x330>
     da6:	b6 01       	movw	r22, r12
     da8:	80 e2       	ldi	r24, 0x20	; 32
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     db0:	b3 94       	inc	r11
     db2:	f7 cf       	rjmp	.-18     	; 0xda2 <vfprintf+0x314>
     db4:	b2 14       	cp	r11, r2
     db6:	18 f4       	brcc	.+6      	; 0xdbe <vfprintf+0x330>
     db8:	2b 18       	sub	r2, r11
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0x332>
     dbc:	98 2c       	mov	r9, r8
     dbe:	21 2c       	mov	r2, r1
     dc0:	a4 fe       	sbrs	r10, 4
     dc2:	10 c0       	rjmp	.+32     	; 0xde4 <vfprintf+0x356>
     dc4:	b6 01       	movw	r22, r12
     dc6:	80 e3       	ldi	r24, 0x30	; 48
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     dce:	a2 fe       	sbrs	r10, 2
     dd0:	17 c0       	rjmp	.+46     	; 0xe00 <vfprintf+0x372>
     dd2:	a1 fc       	sbrc	r10, 1
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <vfprintf+0x34e>
     dd6:	88 e7       	ldi	r24, 0x78	; 120
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <vfprintf+0x352>
     ddc:	88 e5       	ldi	r24, 0x58	; 88
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	b6 01       	movw	r22, r12
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <vfprintf+0x36e>
     de4:	8a 2d       	mov	r24, r10
     de6:	86 78       	andi	r24, 0x86	; 134
     de8:	59 f0       	breq	.+22     	; 0xe00 <vfprintf+0x372>
     dea:	a1 fe       	sbrs	r10, 1
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x364>
     dee:	8b e2       	ldi	r24, 0x2B	; 43
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <vfprintf+0x366>
     df2:	80 e2       	ldi	r24, 0x20	; 32
     df4:	a7 fc       	sbrc	r10, 7
     df6:	8d e2       	ldi	r24, 0x2D	; 45
     df8:	b6 01       	movw	r22, r12
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     e00:	89 14       	cp	r8, r9
     e02:	38 f4       	brcc	.+14     	; 0xe12 <vfprintf+0x384>
     e04:	b6 01       	movw	r22, r12
     e06:	80 e3       	ldi	r24, 0x30	; 48
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     e0e:	9a 94       	dec	r9
     e10:	f7 cf       	rjmp	.-18     	; 0xe00 <vfprintf+0x372>
     e12:	8a 94       	dec	r8
     e14:	f3 01       	movw	r30, r6
     e16:	e8 0d       	add	r30, r8
     e18:	f1 1d       	adc	r31, r1
     e1a:	80 81       	ld	r24, Z
     e1c:	b6 01       	movw	r22, r12
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     e24:	81 10       	cpse	r8, r1
     e26:	f5 cf       	rjmp	.-22     	; 0xe12 <vfprintf+0x384>
     e28:	22 20       	and	r2, r2
     e2a:	09 f4       	brne	.+2      	; 0xe2e <vfprintf+0x3a0>
     e2c:	42 ce       	rjmp	.-892    	; 0xab2 <vfprintf+0x24>
     e2e:	b6 01       	movw	r22, r12
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 3e 07 	call	0xe7c	; 0xe7c <fputc>
     e38:	2a 94       	dec	r2
     e3a:	f6 cf       	rjmp	.-20     	; 0xe28 <vfprintf+0x39a>
     e3c:	f6 01       	movw	r30, r12
     e3e:	86 81       	ldd	r24, Z+6	; 0x06
     e40:	97 81       	ldd	r25, Z+7	; 0x07
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x3ba>
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	9f ef       	ldi	r25, 0xFF	; 255
     e48:	2b 96       	adiw	r28, 0x0b	; 11
     e4a:	e2 e1       	ldi	r30, 0x12	; 18
     e4c:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__epilogue_restores__>

00000e50 <strnlen_P>:
     e50:	fc 01       	movw	r30, r24
     e52:	05 90       	lpm	r0, Z+
     e54:	61 50       	subi	r22, 0x01	; 1
     e56:	70 40       	sbci	r23, 0x00	; 0
     e58:	01 10       	cpse	r0, r1
     e5a:	d8 f7       	brcc	.-10     	; 0xe52 <strnlen_P+0x2>
     e5c:	80 95       	com	r24
     e5e:	90 95       	com	r25
     e60:	8e 0f       	add	r24, r30
     e62:	9f 1f       	adc	r25, r31
     e64:	08 95       	ret

00000e66 <strnlen>:
     e66:	fc 01       	movw	r30, r24
     e68:	61 50       	subi	r22, 0x01	; 1
     e6a:	70 40       	sbci	r23, 0x00	; 0
     e6c:	01 90       	ld	r0, Z+
     e6e:	01 10       	cpse	r0, r1
     e70:	d8 f7       	brcc	.-10     	; 0xe68 <strnlen+0x2>
     e72:	80 95       	com	r24
     e74:	90 95       	com	r25
     e76:	8e 0f       	add	r24, r30
     e78:	9f 1f       	adc	r25, r31
     e7a:	08 95       	ret

00000e7c <fputc>:
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	fb 01       	movw	r30, r22
     e86:	23 81       	ldd	r18, Z+3	; 0x03
     e88:	21 fd       	sbrc	r18, 1
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <fputc+0x16>
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	9f ef       	ldi	r25, 0xFF	; 255
     e90:	2c c0       	rjmp	.+88     	; 0xeea <fputc+0x6e>
     e92:	22 ff       	sbrs	r18, 2
     e94:	16 c0       	rjmp	.+44     	; 0xec2 <fputc+0x46>
     e96:	46 81       	ldd	r20, Z+6	; 0x06
     e98:	57 81       	ldd	r21, Z+7	; 0x07
     e9a:	24 81       	ldd	r18, Z+4	; 0x04
     e9c:	35 81       	ldd	r19, Z+5	; 0x05
     e9e:	42 17       	cp	r20, r18
     ea0:	53 07       	cpc	r21, r19
     ea2:	44 f4       	brge	.+16     	; 0xeb4 <fputc+0x38>
     ea4:	a0 81       	ld	r26, Z
     ea6:	b1 81       	ldd	r27, Z+1	; 0x01
     ea8:	9d 01       	movw	r18, r26
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	31 83       	std	Z+1, r19	; 0x01
     eb0:	20 83       	st	Z, r18
     eb2:	8c 93       	st	X, r24
     eb4:	26 81       	ldd	r18, Z+6	; 0x06
     eb6:	37 81       	ldd	r19, Z+7	; 0x07
     eb8:	2f 5f       	subi	r18, 0xFF	; 255
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	37 83       	std	Z+7, r19	; 0x07
     ebe:	26 83       	std	Z+6, r18	; 0x06
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <fputc+0x6e>
     ec2:	8b 01       	movw	r16, r22
     ec4:	ec 01       	movw	r28, r24
     ec6:	fb 01       	movw	r30, r22
     ec8:	00 84       	ldd	r0, Z+8	; 0x08
     eca:	f1 85       	ldd	r31, Z+9	; 0x09
     ecc:	e0 2d       	mov	r30, r0
     ece:	09 95       	icall
     ed0:	89 2b       	or	r24, r25
     ed2:	e1 f6       	brne	.-72     	; 0xe8c <fputc+0x10>
     ed4:	d8 01       	movw	r26, r16
     ed6:	16 96       	adiw	r26, 0x06	; 6
     ed8:	8d 91       	ld	r24, X+
     eda:	9c 91       	ld	r25, X
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	17 96       	adiw	r26, 0x07	; 7
     ee2:	9c 93       	st	X, r25
     ee4:	8e 93       	st	-X, r24
     ee6:	16 97       	sbiw	r26, 0x06	; 6
     ee8:	ce 01       	movw	r24, r28
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <__ultoa_invert>:
     ef4:	fa 01       	movw	r30, r20
     ef6:	aa 27       	eor	r26, r26
     ef8:	28 30       	cpi	r18, 0x08	; 8
     efa:	51 f1       	breq	.+84     	; 0xf50 <__ultoa_invert+0x5c>
     efc:	20 31       	cpi	r18, 0x10	; 16
     efe:	81 f1       	breq	.+96     	; 0xf60 <__ultoa_invert+0x6c>
     f00:	e8 94       	clt
     f02:	6f 93       	push	r22
     f04:	6e 7f       	andi	r22, 0xFE	; 254
     f06:	6e 5f       	subi	r22, 0xFE	; 254
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	af 4f       	sbci	r26, 0xFF	; 255
     f10:	b1 e0       	ldi	r27, 0x01	; 1
     f12:	3e d0       	rcall	.+124    	; 0xf90 <__ultoa_invert+0x9c>
     f14:	b4 e0       	ldi	r27, 0x04	; 4
     f16:	3c d0       	rcall	.+120    	; 0xf90 <__ultoa_invert+0x9c>
     f18:	67 0f       	add	r22, r23
     f1a:	78 1f       	adc	r23, r24
     f1c:	89 1f       	adc	r24, r25
     f1e:	9a 1f       	adc	r25, r26
     f20:	a1 1d       	adc	r26, r1
     f22:	68 0f       	add	r22, r24
     f24:	79 1f       	adc	r23, r25
     f26:	8a 1f       	adc	r24, r26
     f28:	91 1d       	adc	r25, r1
     f2a:	a1 1d       	adc	r26, r1
     f2c:	6a 0f       	add	r22, r26
     f2e:	71 1d       	adc	r23, r1
     f30:	81 1d       	adc	r24, r1
     f32:	91 1d       	adc	r25, r1
     f34:	a1 1d       	adc	r26, r1
     f36:	20 d0       	rcall	.+64     	; 0xf78 <__ultoa_invert+0x84>
     f38:	09 f4       	brne	.+2      	; 0xf3c <__ultoa_invert+0x48>
     f3a:	68 94       	set
     f3c:	3f 91       	pop	r19
     f3e:	2a e0       	ldi	r18, 0x0A	; 10
     f40:	26 9f       	mul	r18, r22
     f42:	11 24       	eor	r1, r1
     f44:	30 19       	sub	r19, r0
     f46:	30 5d       	subi	r19, 0xD0	; 208
     f48:	31 93       	st	Z+, r19
     f4a:	de f6       	brtc	.-74     	; 0xf02 <__ultoa_invert+0xe>
     f4c:	cf 01       	movw	r24, r30
     f4e:	08 95       	ret
     f50:	46 2f       	mov	r20, r22
     f52:	47 70       	andi	r20, 0x07	; 7
     f54:	40 5d       	subi	r20, 0xD0	; 208
     f56:	41 93       	st	Z+, r20
     f58:	b3 e0       	ldi	r27, 0x03	; 3
     f5a:	0f d0       	rcall	.+30     	; 0xf7a <__ultoa_invert+0x86>
     f5c:	c9 f7       	brne	.-14     	; 0xf50 <__ultoa_invert+0x5c>
     f5e:	f6 cf       	rjmp	.-20     	; 0xf4c <__ultoa_invert+0x58>
     f60:	46 2f       	mov	r20, r22
     f62:	4f 70       	andi	r20, 0x0F	; 15
     f64:	40 5d       	subi	r20, 0xD0	; 208
     f66:	4a 33       	cpi	r20, 0x3A	; 58
     f68:	18 f0       	brcs	.+6      	; 0xf70 <__ultoa_invert+0x7c>
     f6a:	49 5d       	subi	r20, 0xD9	; 217
     f6c:	31 fd       	sbrc	r19, 1
     f6e:	40 52       	subi	r20, 0x20	; 32
     f70:	41 93       	st	Z+, r20
     f72:	02 d0       	rcall	.+4      	; 0xf78 <__ultoa_invert+0x84>
     f74:	a9 f7       	brne	.-22     	; 0xf60 <__ultoa_invert+0x6c>
     f76:	ea cf       	rjmp	.-44     	; 0xf4c <__ultoa_invert+0x58>
     f78:	b4 e0       	ldi	r27, 0x04	; 4
     f7a:	a6 95       	lsr	r26
     f7c:	97 95       	ror	r25
     f7e:	87 95       	ror	r24
     f80:	77 95       	ror	r23
     f82:	67 95       	ror	r22
     f84:	ba 95       	dec	r27
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__ultoa_invert+0x86>
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	61 05       	cpc	r22, r1
     f8c:	71 05       	cpc	r23, r1
     f8e:	08 95       	ret
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	0a 2e       	mov	r0, r26
     f96:	06 94       	lsr	r0
     f98:	57 95       	ror	r21
     f9a:	47 95       	ror	r20
     f9c:	37 95       	ror	r19
     f9e:	27 95       	ror	r18
     fa0:	ba 95       	dec	r27
     fa2:	c9 f7       	brne	.-14     	; 0xf96 <__ultoa_invert+0xa2>
     fa4:	62 0f       	add	r22, r18
     fa6:	73 1f       	adc	r23, r19
     fa8:	84 1f       	adc	r24, r20
     faa:	95 1f       	adc	r25, r21
     fac:	a0 1d       	adc	r26, r0
     fae:	08 95       	ret

00000fb0 <eeprom_read_byte>:
     fb0:	f9 99       	sbic	0x1f, 1	; 31
     fb2:	fe cf       	rjmp	.-4      	; 0xfb0 <eeprom_read_byte>
     fb4:	92 bd       	out	0x22, r25	; 34
     fb6:	81 bd       	out	0x21, r24	; 33
     fb8:	f8 9a       	sbi	0x1f, 0	; 31
     fba:	99 27       	eor	r25, r25
     fbc:	80 b5       	in	r24, 0x20	; 32
     fbe:	08 95       	ret

00000fc0 <__prologue_saves__>:
     fc0:	2f 92       	push	r2
     fc2:	3f 92       	push	r3
     fc4:	4f 92       	push	r4
     fc6:	5f 92       	push	r5
     fc8:	6f 92       	push	r6
     fca:	7f 92       	push	r7
     fcc:	8f 92       	push	r8
     fce:	9f 92       	push	r9
     fd0:	af 92       	push	r10
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	ca 1b       	sub	r28, r26
     fea:	db 0b       	sbc	r29, r27
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	09 94       	ijmp

00000ff8 <__epilogue_restores__>:
     ff8:	2a 88       	ldd	r2, Y+18	; 0x12
     ffa:	39 88       	ldd	r3, Y+17	; 0x11
     ffc:	48 88       	ldd	r4, Y+16	; 0x10
     ffe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1000:	6e 84       	ldd	r6, Y+14	; 0x0e
    1002:	7d 84       	ldd	r7, Y+13	; 0x0d
    1004:	8c 84       	ldd	r8, Y+12	; 0x0c
    1006:	9b 84       	ldd	r9, Y+11	; 0x0b
    1008:	aa 84       	ldd	r10, Y+10	; 0x0a
    100a:	b9 84       	ldd	r11, Y+9	; 0x09
    100c:	c8 84       	ldd	r12, Y+8	; 0x08
    100e:	df 80       	ldd	r13, Y+7	; 0x07
    1010:	ee 80       	ldd	r14, Y+6	; 0x06
    1012:	fd 80       	ldd	r15, Y+5	; 0x05
    1014:	0c 81       	ldd	r16, Y+4	; 0x04
    1016:	1b 81       	ldd	r17, Y+3	; 0x03
    1018:	aa 81       	ldd	r26, Y+2	; 0x02
    101a:	b9 81       	ldd	r27, Y+1	; 0x01
    101c:	ce 0f       	add	r28, r30
    101e:	d1 1d       	adc	r29, r1
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	ed 01       	movw	r28, r26
    102c:	08 95       	ret

0000102e <_exit>:
    102e:	f8 94       	cli

00001030 <__stop_program>:
    1030:	ff cf       	rjmp	.-2      	; 0x1030 <__stop_program>
